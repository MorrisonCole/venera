package com.heisentest.splatter.dexifier;

import java.util.*;
import org.ow2.asmdex.*;
import org.ow2.asmdex.structureCommon.*;

public class ClassesDump implements Opcodes {

public static byte[] dump() throws Exception {

	ApplicationWriter aw = new ApplicationWriter();
	aw.visit();

	dumpBuildConfig(aw);
	dumpR$attr(aw);
	dumpR$dimen(aw);
	dumpR$drawable(aw);
	dumpR$id(aw);
	dumpR$layout(aw);
	dumpR$string(aw);
	dumpR$style(aw);
	dumpR(aw);
	dumpExclusionStrategy(aw);
	dumpFieldAttributes(aw);
	dumpFieldNamingStrategy(aw);
	dumpGson(aw);
	dumpGsonBuilder(aw);
	dumpInstanceCreator(aw);
	dumpJsonDeserializationContext(aw);
	dumpJsonDeserializer(aw);
	dumpJsonElement(aw);
	dumpJsonParseException(aw);
	dumpJsonParser(aw);
	dumpJsonSerializationContext(aw);
	dumpJsonSerializer(aw);
	dumpJsonStreamParser(aw);
	dumpLongSerializationPolicy(aw);
	dumpTreeTypeAdapter$1(aw);
	dumpTypeAdapter(aw);
	dumpTypeAdapterFactory(aw);
	dumpExpose(aw);
	dumpSerializedName(aw);
	dumpSince(aw);
	dumpUntil(aw);
	dump$Gson$Preconditions(aw);
	dump$Gson$Types$GenericArrayTypeImpl(aw);
	dump$Gson$Types$ParameterizedTypeImpl(aw);
	dump$Gson$Types$WildcardTypeImpl(aw);
	dump$Gson$Types(aw);
	dumpConstructorConstructor(aw);
	dumpJsonReaderInternalAccess(aw);
	dumpLazilyParsedNumber(aw);
	dumpLinkedTreeMap$1(aw);
	dumpLinkedTreeMap$EntrySet(aw);
	dumpLinkedTreeMap$KeySet(aw);
	dumpLinkedTreeMap$LinkedTreeMapIterator(aw);
	dumpLinkedTreeMap$Node(aw);
	dumpLinkedTreeMap(aw);
	dumpObjectConstructor(aw);
	dumpPrimitives(aw);
	dumpStreams$1(aw);
	dumpStreams$AppendableWriter$CurrentWrite(aw);
	dumpStreams$AppendableWriter(aw);
	dumpStreams(aw);
	dumpUnsafeAllocator(aw);
	dumpJsonTreeReader$1(aw);
	dumpJsonTreeWriter$1(aw);
	dumpObjectTypeAdapter$2(aw);
	dumpReflectiveTypeAdapterFactory$BoundField(aw);
	dumpTypeAdapters$32(aw);
	dumpTypeAdapters(aw);
	dumpTypeToken(aw);
	dumpJsonReader(aw);
	dumpJsonScope(aw);
	dumpJsonToken(aw);
	dumpJsonWriter(aw);
	dumpMalformedJsonException(aw);
	dumpAnInstrumentationTestCase(aw);
	dumpHeisentestJsonLogger(aw);
	dumpHeisentestLogger(aw);
	dumpHeisentestXmlLogger(aw);
	dumpMainActivity(aw);
	dumpLogEvent(aw);
	dumpSplatterIgnore(aw);
	dumpActiveTestSuite$1(aw);
	dumppackageinfo(aw);
	dumpAssert(aw);
	dumpAssertionFailedError(aw);
	dumpComparisonCompactor(aw);
	dumpJUnit4TestAdapterCache(aw);
	dumpProtectable(aw);
	dumpTest(aw);
	dumpTestFailure(aw);
	dumpTestListener(aw);
	dumpTestResult(aw);
	dumppackageinfo2(aw);
	dumpTestRunListener(aw);
	dumpVersion(aw);
	dumppackageinfo3(aw);
	dumppackageinfo4(aw);
	dumpAfter(aw);
	dumpAfterClass(aw);
	dumpAssert2(aw);
	dumpAssume(aw);
	dumpBefore(aw);
	dumpBeforeClass(aw);
	dumpClassRule(aw);
	dumpComparisonFailure$ComparisonCompactor(aw);
	dumpComparisonFailure(aw);
	dumpFixMethodOrder(aw);
	dumpIgnore(aw);
	dumpRule(aw);
	dumpTest$None(aw);
	dumpTest2(aw);
	dumpCategories$ExcludeCategory(aw);
	dumpCategories$IncludeCategory(aw);
	dumpCategory(aw);
	dumpCouldNotReadCoreException(aw);
	dumpMaxCore(aw);
	dumpMaxHistory$1(aw);
	dumpMaxHistory$TestComparator(aw);
	dumpMaxHistory(aw);
	dumpFailureList(aw);
	dumpPrintableResult(aw);
	dumpResultMatchers$1(aw);
	dumpResultMatchers$2(aw);
	dumpResultMatchers$3(aw);
	dumpResultMatchers(aw);
	dumpDataPoint(aw);
	dumpDataPoints(aw);
	dumpParameterSignature(aw);
	dumpParameterSupplier(aw);
	dumpParametersSuppliedBy(aw);
	dumpPotentialAssignment$CouldNotGenerateValueException(aw);
	dumpPotentialAssignment(aw);
	dumpTheory(aw);
	dumpAllMembersSupplier$1(aw);
	dumpAssignments(aw);
	dumpParameterizedAssertionError(aw);
	dumpTestedOn(aw);
	dumpArrayComparisonFailure(aw);
	dumpAssumptionViolatedException(aw);
	dumpComparisonCriteria(aw);
	dumpJUnitSystem(aw);
	dumpMethodSorter$1(aw);
	dumpMethodSorter$2(aw);
	dumpMethodSorter(aw);
	dumpStacktracePrintingMatcher(aw);
	dumpThrowableCauseMatcher(aw);
	dumpThrowableMessageMatcher(aw);
	dumpTypeSafeMatcher(aw);
	dumppackageinfo5(aw);
	dumpClassRoadie(aw);
	dumpFailedBefore(aw);
	dumpInitializationError(aw);
	dumpJUnit38ClassRunner$1(aw);
	dumpJUnit4ClassRunner$1(aw);
	dumpJUnit4ClassRunner$2(aw);
	dumpMethodRoadie$1$1(aw);
	dumpMethodRoadie$1(aw);
	dumpMethodRoadie$2(aw);
	dumpMethodRoadie(aw);
	dumpMethodValidator(aw);
	dumpTestClass(aw);
	dumpTestMethod(aw);
	dumpEachTestNotifier(aw);
	dumpReflectiveCallable(aw);
	dumppackageinfo6(aw);
	dumpRuleFieldValidator(aw);
	dumpFailOnTimeout$StatementThread(aw);
	dumpJUnitMatchers(aw);
	dumppackageinfo7(aw);
	dumppackageinfo8(aw);
	dumpErrorCollector$1(aw);
	dumpExpectedExceptionMatcherBuilder(aw);
	dumpMethodRule(aw);
	dumpTestRule(aw);
	dumpComputer(aw);
	dumpDescribable(aw);
	dumpDescription(aw);
	dumpJUnitCore(aw);
	dumpRequest(aw);
	dumpResult$1(aw);
	dumpResult(aw);
	dumpRunWith(aw);
	dumpFilter(aw);
	dumpFilterable(aw);
	dumpNoTestsRemainException(aw);
	dumpSortable(aw);
	dumpSorter$1(aw);
	dumpSorter(aw);
	dumppackageinfo9(aw);
	dumpFailure(aw);
	dumpRunListener(aw);
	dumpRunNotifier$SafeNotifier(aw);
	dumpRunNotifier(aw);
	dumpStoppedByUserException(aw);
	dumppackageinfo10(aw);
	dumppackageinfo11(aw);
	dumpMethodSorters(aw);
	dumpParameterized$Parameter(aw);
	dumpParameterized$Parameters(aw);
	dumpParentRunner$3(aw);
	dumpParentRunner$4(aw);
	dumpSuite$SuiteClasses(aw);
	dumpFrameworkMember(aw);
	dumpInitializationError2(aw);
	dumpMultipleFailureException(aw);
	dumpNoGenericTypeParametersValidator(aw);
	dumpRunnerBuilder(aw);
	dumpRunnerScheduler(aw);
	dumpStatement(aw);
	dumpTestClass2(aw);
	dumppackageinfo12(aw);
	dumpDefaultDateTypeAdapter(aw);
	dumpFieldNamingPolicy(aw);
	dumpGson$1(aw);
	dumpGson$2(aw);
	dumpGson$3(aw);
	dumpGson$4(aw);
	dumpGson$5(aw);
	dumpGson$FutureTypeAdapter(aw);
	dumpJsonArray(aw);
	dumpJsonIOException(aw);
	dumpJsonNull(aw);
	dumpJsonObject(aw);
	dumpJsonPrimitive(aw);
	dumpJsonSyntaxException(aw);
	dumpLongSerializationPolicy$1(aw);
	dumpLongSerializationPolicy$2(aw);
	dumpTreeTypeAdapter$SingleTypeFactory(aw);
	dumpTreeTypeAdapter(aw);
	dumpTypeAdapter$1(aw);
	dumpConstructorConstructor$10(aw);
	dumpConstructorConstructor$11(aw);
	dumpConstructorConstructor$12(aw);
	dumpConstructorConstructor$1(aw);
	dumpConstructorConstructor$2(aw);
	dumpConstructorConstructor$3(aw);
	dumpConstructorConstructor$4(aw);
	dumpConstructorConstructor$5(aw);
	dumpConstructorConstructor$6(aw);
	dumpConstructorConstructor$7(aw);
	dumpConstructorConstructor$8(aw);
	dumpConstructorConstructor$9(aw);
	dumpExcluder$1(aw);
	dumpExcluder(aw);
	dumpLinkedTreeMap$EntrySet$1(aw);
	dumpLinkedTreeMap$KeySet$1(aw);
	dumpUnsafeAllocator$1(aw);
	dumpUnsafeAllocator$2(aw);
	dumpUnsafeAllocator$3(aw);
	dumpUnsafeAllocator$4(aw);
	dumpArrayTypeAdapter$1(aw);
	dumpArrayTypeAdapter(aw);
	dumpCollectionTypeAdapterFactory$Adapter(aw);
	dumpCollectionTypeAdapterFactory(aw);
	dumpDateTypeAdapter$1(aw);
	dumpDateTypeAdapter(aw);
	dumpJsonTreeReader(aw);
	dumpJsonTreeWriter(aw);
	dumpMapTypeAdapterFactory$Adapter(aw);
	dumpMapTypeAdapterFactory(aw);
	dumpObjectTypeAdapter$1(aw);
	dumpObjectTypeAdapter(aw);
	dumpReflectiveTypeAdapterFactory$1(aw);
	dumpReflectiveTypeAdapterFactory$Adapter(aw);
	dumpReflectiveTypeAdapterFactory(aw);
	dumpSqlDateTypeAdapter$1(aw);
	dumpSqlDateTypeAdapter(aw);
	dumpTimeTypeAdapter$1(aw);
	dumpTimeTypeAdapter(aw);
	dumpTypeAdapterRuntimeTypeWrapper(aw);
	dumpTypeAdapters$10(aw);
	dumpTypeAdapters$11(aw);
	dumpTypeAdapters$12(aw);
	dumpTypeAdapters$13(aw);
	dumpTypeAdapters$14(aw);
	dumpTypeAdapters$15(aw);
	dumpTypeAdapters$16(aw);
	dumpTypeAdapters$17(aw);
	dumpTypeAdapters$18(aw);
	dumpTypeAdapters$19(aw);
	dumpTypeAdapters$1(aw);
	dumpTypeAdapters$20(aw);
	dumpTypeAdapters$21(aw);
	dumpTypeAdapters$22$1(aw);
	dumpTypeAdapters$22(aw);
	dumpTypeAdapters$23(aw);
	dumpTypeAdapters$24(aw);
	dumpTypeAdapters$25(aw);
	dumpTypeAdapters$26(aw);
	dumpTypeAdapters$27(aw);
	dumpTypeAdapters$28(aw);
	dumpTypeAdapters$29(aw);
	dumpTypeAdapters$2(aw);
	dumpTypeAdapters$30(aw);
	dumpTypeAdapters$31(aw);
	dumpTypeAdapters$3(aw);
	dumpTypeAdapters$4(aw);
	dumpTypeAdapters$5(aw);
	dumpTypeAdapters$6(aw);
	dumpTypeAdapters$7(aw);
	dumpTypeAdapters$8(aw);
	dumpTypeAdapters$9(aw);
	dumpTypeAdapters$EnumTypeAdapter(aw);
	dumpJsonReader$1(aw);
	dumpTestDecorator(aw);
	dumpTestSetup$1(aw);
	dumpComparisonFailure2(aw);
	dumpJUnit4TestAdapter(aw);
	dumpJUnit4TestAdapterCache$1(aw);
	dumpJUnit4TestCaseFacade(aw);
	dumpTestCase(aw);
	dumpTestResult$1(aw);
	dumpTestSuite(aw);
	dumpBaseTestRunner(aw);
	dumpResultPrinter(aw);
	dumpParallelComputer$1(aw);
	dumpParallelComputer(aw);
	dumpCategories$CategoryFilter(aw);
	dumpMaxCore$1(aw);
	dumpMaxHistory$RememberingListener(aw);
	dumpPotentialAssignment$1(aw);
	dumpTheories$TheoryAnchor$1$1(aw);
	dumpTheories$TheoryAnchor$2(aw);
	dumpTheories$TheoryAnchor(aw);
	dumpAllMembersSupplier$MethodParameterValue(aw);
	dumpAllMembersSupplier(aw);
	dumpTestedOnSupplier(aw);
	dumpExactComparisonCriteria(aw);
	dumpInexactComparisonCriteria(aw);
	dumpRealSystem(aw);
	dumpTextListener(aw);
	dumpAllDefaultPossibilitiesBuilder(aw);
	dumpAnnotatedBuilder(aw);
	dumpIgnoredBuilder(aw);
	dumpJUnit3Builder(aw);
	dumpJUnit4Builder(aw);
	dumpNullBuilder(aw);
	dumpSuiteMethodBuilder(aw);
	dumpClassRequest(aw);
	dumpFilterRequest(aw);
	dumpSortingRequest(aw);
	dumpJUnit38ClassRunner$OldTestClassAdaptingListener(aw);
	dumpMultipleFailureException2(aw);
	dumpExpectException(aw);
	dumpFail(aw);
	dumpFailOnTimeout(aw);
	dumpInvokeMethod(aw);
	dumpRunAfters(aw);
	dumpRunBefores(aw);
	dumpExpectedException$ExpectedExceptionStatement(aw);
	dumpExpectedException(aw);
	dumpExternalResource$1(aw);
	dumpExternalResource(aw);
	dumpRuleChain(aw);
	dumpRunRules(aw);
	dumpTestWatcher$1(aw);
	dumpTestWatcher(aw);
	dumpTestWatchman$1(aw);
	dumpTestWatchman(aw);
	dumpTimeout(aw);
	dumpVerifier$1(aw);
	dumpVerifier(aw);
	dumpComputer$1(aw);
	dumpRequest$1(aw);
	dumpResult$Listener(aw);
	dumpRunner(aw);
	dumpFilter$1(aw);
	dumpFilter$2(aw);
	dumpFilter$3(aw);
	dumpRunNotifier$1(aw);
	dumpRunNotifier$2(aw);
	dumpRunNotifier$3(aw);
	dumpRunNotifier$4(aw);
	dumpRunNotifier$5(aw);
	dumpRunNotifier$6(aw);
	dumpRunNotifier$7(aw);
	dumpBlockJUnit4ClassRunner$1(aw);
	dumpParentRunner$1(aw);
	dumpParentRunner$2(aw);
	dumpFrameworkField(aw);
	dumpFrameworkMethod$1(aw);
	dumpFrameworkMethod(aw);
	dumpFieldNamingPolicy$1(aw);
	dumpFieldNamingPolicy$2(aw);
	dumpFieldNamingPolicy$3(aw);
	dumpFieldNamingPolicy$4(aw);
	dumpFieldNamingPolicy$5(aw);
	dumpSplatterIgnoreMethodRule(aw);
	dumpActiveTestSuite(aw);
	dumpRepeatedTest(aw);
	dumpTestSetup(aw);
	dumpTestSuite$1(aw);
	dumpTestRunner(aw);
	dumpIgnoredClassRunner(aw);
	dumpErrorReportingRunner(aw);
	dumpJUnit38ClassRunner(aw);
	dumpJUnit4ClassRunner(aw);
	dumpErrorCollector(aw);
	dumpTemporaryFolder(aw);
	dumpTestName(aw);
	dumpParentRunner(aw);
	dumpSuiteMethod(aw);
	dumpBlockJUnit4ClassRunner(aw);
	dumpSuite(aw);
	dumpCategories(aw);
	dumpMaxCore$1$1(aw);
	dumpEnclosed(aw);
	dumpTheories$TheoryAnchor$1(aw);
	dumpTheories(aw);
	dumpAllTests(aw);
	dumpJUnit4(aw);
	dumpParameterized$TestClassRunnerForParameters(aw);
	dumpParameterized(aw);

	aw.visitEnd();

	return aw.toByteArray();
}

public static void dumpBuildConfig(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/BuildConfig;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/BuildConfig;", null, "Ljava/lang/Object;", null);
	cv.visitSource("BuildConfig.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BUILD_TYPE", "Ljava/lang/String;", null, "debug");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "DEBUG", "Z", null, false);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FLAVOR", "Ljava/lang/String;", null, "");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "PACKAGE_NAME", "Ljava/lang/String;", null, "com.example.android_source");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "VERSION_CODE", "I", null, 1);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "VERSION_NAME", "Ljava/lang/String;", null, "1.0");
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "true");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "parseBoolean", "ZLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Lcom/example/android_source/BuildConfig;", "DEBUG", "Z", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$attr(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$attr;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$attr;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$attr;", "Lcom/example/android_source/R;", "attr", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$dimen(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$dimen;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$dimen;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$dimen;", "Lcom/example/android_source/R;", "dimen", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "activity_horizontal_margin", "I", null, 2130968576);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "activity_vertical_margin", "I", null, 2130968577);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$drawable(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$drawable;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$drawable;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$drawable;", "Lcom/example/android_source/R;", "drawable", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "ic_launcher", "I", null, 2130837504);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$id(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$id;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$id;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$id;", "Lcom/example/android_source/R;", "id", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "container", "I", null, 2131165185);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "drawer_layout", "I", null, 2131165184);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "section_label", "I", null, 2131165186);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$layout(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$layout;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$layout;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$layout;", "Lcom/example/android_source/R;", "layout", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "activity_main", "I", null, 2130903040);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "fragment_main", "I", null, 2130903041);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$string(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$string;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$string;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$string;", "Lcom/example/android_source/R;", "string", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "app_name", "I", null, 2131034112);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR$style(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$style;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R$style;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitInnerClass("Lcom/example/android_source/R$style;", "Lcom/example/android_source/R;", "style", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "AppTheme", "I", null, 2131099648);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpR(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/example/android_source/R;", null, "Ljava/lang/Object;", null);
	cv.visitSource("R.java", null);
	cv.visitMemberClass("Lcom/example/android_source/R$style;", "Lcom/example/android_source/R;", "style");
	cv.visitMemberClass("Lcom/example/android_source/R$string;", "Lcom/example/android_source/R;", "string");
	cv.visitMemberClass("Lcom/example/android_source/R$layout;", "Lcom/example/android_source/R;", "layout");
	cv.visitMemberClass("Lcom/example/android_source/R$id;", "Lcom/example/android_source/R;", "id");
	cv.visitMemberClass("Lcom/example/android_source/R$drawable;", "Lcom/example/android_source/R;", "drawable");
	cv.visitMemberClass("Lcom/example/android_source/R$dimen;", "Lcom/example/android_source/R;", "dimen");
	cv.visitMemberClass("Lcom/example/android_source/R$attr;", "Lcom/example/android_source/R;", "attr");
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExclusionStrategy(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/ExclusionStrategy;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/ExclusionStrategy;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ExclusionStrategy.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "shouldSkipClass", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "shouldSkipField", "ZLcom/google/gson/FieldAttributes;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldAttributes(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/FieldAttributes;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/FieldAttributes;", null, "Ljava/lang/Object;", null);
	cv.visitSource("FieldAttributes.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "field", "Ljava/lang/reflect/Field;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "get", "Ljava/lang/Object;Ljava/lang/Object;", null, new String[] { "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new String[] { "<T::", "Ljava/lang/annotation/Annotation;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotations", "Ljava/util/Collection;", new String[] { "()", "Ljava/util/Collection", "<", "Ljava/lang/annotation/Annotation;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDeclaredClass", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDeclaredType", "Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getGenericType", "Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDeclaringClass", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getDeclaringClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hasModifier", "ZI", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_AND_INT_2ADDR, 0, 0, 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "isSynthetic", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/FieldAttributes;", "field", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "isSynthetic", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingStrategy(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/FieldNamingStrategy;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/FieldNamingStrategy;", null, "Ljava/lang/Object;", null);
	cv.visitSource("FieldNamingStrategy.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/Gson;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/Gson;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Gson.java", null);
	cv.visitMemberClass("Lcom/google/gson/Gson$FutureTypeAdapter;", "Lcom/google/gson/Gson;", "FutureTypeAdapter");
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "DEFAULT_JSON_NON_EXECUTABLE", "Z", null, false);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "JSON_NON_EXECUTABLE_PREFIX", "Ljava/lang/String;", null, ")]}'\n");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "calls", "Ljava/lang/ThreadLocal;", new String[] { "Ljava/lang/ThreadLocal", "<", "Ljava/util/Map", "<", "Lcom/google/gson/reflect/TypeToken", "<*>;", "Lcom/google/gson/Gson$FutureTypeAdapter", "<*>;>;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "deserializationContext", "Lcom/google/gson/JsonDeserializationContext;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "factories", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/TypeAdapterFactory;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "generateNonExecutableJson", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "htmlSafe", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "prettyPrinting", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "serializationContext", "Lcom/google/gson/JsonSerializationContext;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "serializeNulls", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "typeTokenCache", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Lcom/google/gson/reflect/TypeToken", "<*>;", "Lcom/google/gson/TypeAdapter", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "DEFAULT", "Lcom/google/gson/internal/Excluder;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "IDENTITY", "Lcom/google/gson/FieldNamingPolicy;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "emptyMap", "Ljava/util/Map;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "DEFAULT", "Lcom/google/gson/LongSerializationPolicy;", 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "emptyList", "Ljava/util/List;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 12);
		mv.visitVarInsn(INSN_MOVE, 5, 4);
		mv.visitVarInsn(INSN_MOVE, 6, 4);
		mv.visitVarInsn(INSN_MOVE, 8, 4);
		mv.visitVarInsn(INSN_MOVE, 9, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/Gson;", "<init>", "VLcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map;ZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/util/List;", new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map;ZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/util/List;", new String[] { "(", "Lcom/google/gson/internal/Excluder;", "Lcom/google/gson/FieldNamingStrategy;", "Ljava/util/Map", "<", "Ljava/lang/reflect/Type;", "Lcom/google/gson/InstanceCreator", "<*>;>;ZZZZZZ", "Lcom/google/gson/LongSerializationPolicy;", "Ljava/util/List", "<", "Lcom/google/gson/TypeAdapterFactory;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(16, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/ThreadLocal;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/ThreadLocal;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson;", "calls", "Ljava/lang/ThreadLocal;", 1, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "synchronizedMap", "Ljava/util/Map;Ljava/util/Map;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson;", "typeTokenCache", "Ljava/util/Map;", 1, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/Gson$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson$1;", "<init>", "VLcom/google/gson/Gson;", new int[] { 1, 4 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson;", "deserializationContext", "Lcom/google/gson/JsonDeserializationContext;", 1, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/Gson$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson$2;", "<init>", "VLcom/google/gson/Gson;", new int[] { 1, 4 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson;", "serializationContext", "Lcom/google/gson/JsonSerializationContext;", 1, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor;", "<init>", "VLjava/util/Map;", new int[] { 1, 7 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 4);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/Gson;", "serializeNulls", "Z", 8, 4);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/Gson;", "generateNonExecutableJson", "Z", 10, 4);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/Gson;", "htmlSafe", "Z", 11, 4);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/Gson;", "prettyPrinting", "Z", 12, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "JSON_ELEMENT_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 5 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 15 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INTEGER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BOOLEAN_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BYTE_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "SHORT_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Long;", "TYPE", "Ljava/lang/Class;", 1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Long;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "longAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/LongSerializationPolicy;", new int[] { 4, 14 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Double;", "TYPE", "Ljava/lang/Class;", 1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "doubleAdapter", "Lcom/google/gson/TypeAdapter;Z", new int[] { 4, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Float;", "TYPE", "Ljava/lang/Class;", 1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "floatAdapter", "Lcom/google/gson/TypeAdapter;Z", new int[] { 4, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "NUMBER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CHARACTER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUILDER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUFFER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/math/BigDecimal;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIG_DECIMAL", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/math/BigInteger;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIG_INTEGER", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URL_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URI_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "UUID_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "LOCALE_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INET_ADDRESS_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIT_SET_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CALENDAR_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "TIMESTAMP_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "ENUM_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CLASS_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Z", new int[] { 1, 2, 9 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/FieldNamingStrategy;Lcom/google/gson/internal/Excluder;", new int[] { 1, 2, 6, 5 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "unmodifiableList", "Ljava/util/List;Ljava/util/List;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson;", "factories", "Ljava/util/List;", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "VLcom/google/gson/Gson;D", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "checkValidFloatingPoint", "VD", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "assertFullConsumption", "VLjava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		mv.visitTryCatchBlock(l1, l2, l2, "Lcom/google/gson/stream/MalformedJsonException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "JSON document was not fully consumed.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "checkValidFloatingPoint", "VD", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isInfinite", "ZD", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;D", new int[] { 1, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " is not a valid double value as per JSON specification. To override this");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "doubleAdapter", "Lcom/google/gson/TypeAdapter;Z", new String[] { "(Z)", "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "DOUBLE", "Lcom/google/gson/TypeAdapter;", 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/Gson$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson$3;", "<init>", "VLcom/google/gson/Gson;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "floatAdapter", "Lcom/google/gson/TypeAdapter;Z", new String[] { "(Z)", "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "FLOAT", "Lcom/google/gson/TypeAdapter;", 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/Gson$4;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson$4;", "<init>", "VLcom/google/gson/Gson;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "longAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/LongSerializationPolicy;", new String[] { "(", "Lcom/google/gson/LongSerializationPolicy;", ")", "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "DEFAULT", "Lcom/google/gson/LongSerializationPolicy;", 0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "LONG", "Lcom/google/gson/TypeAdapter;", 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/Gson$5;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson$5;", "<init>", "VLcom/google/gson/Gson;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "newJsonWriter", "Lcom/google/gson/stream/JsonWriter;Ljava/io/Writer;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "generateNonExecutableJson", "Z", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ")]}'\n");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 3, 1 });
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "<init>", "VLjava/io/Writer;", new int[] { 0, 3 });
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "prettyPrinting", "Z", 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "  ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setIndent", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "serializeNulls", "Z", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/JsonElement;", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "wrap", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/JsonElement;", "Ljava/lang/reflect/Type;", ")TT;" }, new String[] { "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/JsonTreeReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "<init>", "VLcom/google/gson/JsonElement;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;", new int[] { 1, 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/stream/JsonReader;", "Ljava/lang/reflect/Type;", ")TT;" }, new String[] { "Lcom/google/gson/JsonIOException;", "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "isLenient", "Z", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 8, 6 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/EOFException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/IllegalStateException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/io/IOException;");
		Label l5 = new Label();
		mv.visitTryCatchBlock(l0, l1, l5, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 8 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 7, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 4, 8 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 8, 3 });
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 8, 3 });
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l7);
		mv.visitTryCatchBlock(l7, l5, l5, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 8, 3 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitTryCatchBlock(l8, l9, l5, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Ljava/io/Reader;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/io/Reader;", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Lcom/google/gson/JsonSyntaxException;", "Lcom/google/gson/JsonIOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "<init>", "VLjava/io/Reader;", new int[] { 0, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;", new int[] { 3, 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/Gson;", "assertFullConsumption", "VLjava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "wrap", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Ljava/io/Reader;Ljava/lang/reflect/Type;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/io/Reader;", "Ljava/lang/reflect/Type;", ")TT;" }, new String[] { "Lcom/google/gson/JsonIOException;", "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "<init>", "VLjava/io/Reader;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;", new int[] { 2, 0, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/Gson;", "assertFullConsumption", "VLjava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/String;", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "wrap", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fromJson", "Ljava/lang/Object;Ljava/lang/String;Ljava/lang/reflect/Type;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/String;", "Ljava/lang/reflect/Type;", ")TT;" }, new String[] { "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringReader;", "<init>", "VLjava/lang/String;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Ljava/io/Reader;Ljava/lang/reflect/Type;", new int[] { 2, 0, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "typeTokenCache", "Ljava/util/Map;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 8, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/TypeAdapter;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "calls", "Ljava/lang/ThreadLocal;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/ThreadLocal;", "get", "Ljava/lang/Object;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/util/Map;");
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 7 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "calls", "Ljava/lang/ThreadLocal;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/ThreadLocal;", "set", "VLjava/lang/Object;", new int[] { 8, 7 });
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 7, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Lcom/google/gson/Gson$FutureTypeAdapter;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 5);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l3, l4, l5, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/Gson$FutureTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 7, 12, 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "factories", "Ljava/util/List;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/TypeAdapterFactory;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/TypeAdapterFactory;", "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new int[] { 3, 11, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$FutureTypeAdapter;", "setDelegate", "VLcom/google/gson/TypeAdapter;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "typeTokenCache", "Ljava/util/Map;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 8, 12, 2 });
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "remove", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 7, 12 });
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "calls", "Ljava/lang/ThreadLocal;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/ThreadLocal;", "remove", "V", new int[] { 8 });
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l7);
		mv.visitTryCatchBlock(l7, l5, l5, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 9, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 9 });
		mv.visitStringInsn(INSN_CONST_STRING, 10, "GSON cannot handle ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 9, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_THROW, 8);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "remove", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 7, 12 });
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "calls", "Ljava/lang/ThreadLocal;", 9, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/ThreadLocal;", "remove", "V", new int[] { 9 });
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_THROW, 8);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAdapter", "Lcom/google/gson/TypeAdapter;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDelegateAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/TypeAdapterFactory;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "factories", "Ljava/util/List;", 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/TypeAdapterFactory;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 3, 0);
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 8);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/TypeAdapterFactory;", "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new int[] { 1, 7, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 6, "GSON cannot serialize ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 5, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "Ljava/lang/String;Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLcom/google/gson/JsonElement;Ljava/lang/Appendable;", new int[] { 2, 3, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "Ljava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "Ljava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "Ljava/lang/String;Ljava/lang/Object;Ljava/lang/reflect/Type;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "Ljava/lang/String;Ljava/lang/Object;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLjava/lang/Object;Ljava/lang/reflect/Type;Ljava/lang/Appendable;", new int[] { 2, 3, 4, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Lcom/google/gson/JsonIOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "isLenient", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 7, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "isHtmlSafe", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "htmlSafe", "Z", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setHtmlSafe", "VZ", new int[] { 7, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "getSerializeNulls", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "serializeNulls", "Z", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 7, 4 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "write", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", new int[] { 6, 7 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 7, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setHtmlSafe", "VZ", new int[] { 7, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 7, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitTryCatchBlock(l4, l3, l3, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 7, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setHtmlSafe", "VZ", new int[] { 7, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 7, 3 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "VLcom/google/gson/JsonElement;Ljava/lang/Appendable;", null, new String[] { "Lcom/google/gson/JsonIOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "writerForAppendable", "Ljava/io/Writer;Ljava/lang/Appendable;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "newJsonWriter", "Lcom/google/gson/stream/JsonWriter;Ljava/io/Writer;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", new int[] { 3, 4, 1 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "VLjava/lang/Object;Ljava/lang/Appendable;", null, new String[] { "Lcom/google/gson/JsonIOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLjava/lang/Object;Ljava/lang/reflect/Type;Ljava/lang/Appendable;", new int[] { 1, 2, 0, 3 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLcom/google/gson/JsonElement;Ljava/lang/Appendable;", new int[] { 1, 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "VLjava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Lcom/google/gson/JsonIOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 6, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "isLenient", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 9, 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "isHtmlSafe", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "htmlSafe", "Z", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setHtmlSafe", "VZ", new int[] { 9, 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "getSerializeNulls", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "serializeNulls", "Z", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 9, 5 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 9, 7 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 9, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setHtmlSafe", "VZ", new int[] { 9, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 9, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitTryCatchBlock(l4, l3, l3, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 5, 1 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 9, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setHtmlSafe", "VZ", new int[] { 9, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setSerializeNulls", "VZ", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJson", "VLjava/lang/Object;Ljava/lang/reflect/Type;Ljava/lang/Appendable;", null, new String[] { "Lcom/google/gson/JsonIOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "writerForAppendable", "Ljava/io/Writer;Ljava/lang/Appendable;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "newJsonWriter", "Lcom/google/gson/stream/JsonWriter;Ljava/io/Writer;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLjava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/stream/JsonWriter;", new int[] { 3, 4, 5, 1 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/JsonTreeWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLjava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/stream/JsonWriter;", new int[] { 2, 3, 4, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "get", "Lcom/google/gson/JsonElement;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "{serializeNulls:");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/Gson;", "serializeNulls", "Z", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Z", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "factories:");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "factories", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ",instanceCreators:");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "}");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGsonBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/GsonBuilder;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/GsonBuilder;", null, "Ljava/lang/Object;", null);
	cv.visitSource("GsonBuilder.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "complexMapKeySerialization", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "datePattern", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "dateStyle", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "escapeHtmlChars", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "excluder", "Lcom/google/gson/internal/Excluder;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "factories", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/TypeAdapterFactory;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "generateNonExecutableJson", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "hierarchyFactories", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/TypeAdapterFactory;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "instanceCreators", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/reflect/Type;", "Lcom/google/gson/InstanceCreator", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "longSerializationPolicy", "Lcom/google/gson/LongSerializationPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "prettyPrinting", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "serializeNulls", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "serializeSpecialFloatingPointValues", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "timeStyle", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "DEFAULT", "Lcom/google/gson/internal/Excluder;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "DEFAULT", "Lcom/google/gson/LongSerializationPolicy;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "longSerializationPolicy", "Lcom/google/gson/LongSerializationPolicy;", 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "IDENTITY", "Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "instanceCreators", "Ljava/util/Map;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "factories", "Ljava/util/List;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "hierarchyFactories", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/GsonBuilder;", "dateStyle", "I", 1, 2);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/GsonBuilder;", "timeStyle", "I", 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "escapeHtmlChars", "Z", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addTypeAdaptersForDate", "VLjava/lang/String;IILjava/util/List;", new String[] { "(", "Ljava/lang/String;", "II", "Ljava/util/List", "<", "Lcom/google/gson/TypeAdapterFactory;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "trim", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/DefaultDateTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "<init>", "VLjava/lang/String;", new int[] { 0, 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/Date;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/TreeTypeAdapter;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 8, 1 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/sql/Timestamp;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/TreeTypeAdapter;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 8, 1 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/sql/Date;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/TreeTypeAdapter;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 8, 1 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitJumpInsn(INSN_IF_EQ, l2, 6, 3);
		mv.visitJumpInsn(INSN_IF_EQ, l2, 7, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/DefaultDateTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "<init>", "VII", new int[] { 0, 6, 7 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addDeserializationExclusionStrategy", "Lcom/google/gson/GsonBuilder;Lcom/google/gson/ExclusionStrategy;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "withExclusionStrategy", "Lcom/google/gson/internal/Excluder;Lcom/google/gson/ExclusionStrategy;ZZ", new int[] { 0, 4, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addSerializationExclusionStrategy", "Lcom/google/gson/GsonBuilder;Lcom/google/gson/ExclusionStrategy;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "withExclusionStrategy", "Lcom/google/gson/internal/Excluder;Lcom/google/gson/ExclusionStrategy;ZZ", new int[] { 0, 4, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 11, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 11 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "factories", "Ljava/util/List;", 0, 12);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 11, 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "reverse", "VLjava/util/List;", new int[] { 11 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "hierarchyFactories", "Ljava/util/List;", 0, 12);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 11, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "datePattern", "Ljava/lang/String;", 0, 12);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/GsonBuilder;", "dateStyle", "I", 1, 12);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/GsonBuilder;", "timeStyle", "I", 2, 12);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/GsonBuilder;", "addTypeAdaptersForDate", "VLjava/lang/String;IILjava/util/List;", new int[] { 12, 0, 1, 2, 11 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/Gson;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 1, 12);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", 2, 12);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "instanceCreators", "Ljava/util/Map;", 3, 12);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "serializeNulls", "Z", 4, 12);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "complexMapKeySerialization", "Z", 5, 12);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "generateNonExecutableJson", "Z", 6, 12);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "escapeHtmlChars", "Z", 7, 12);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "prettyPrinting", "Z", 8, 12);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "serializeSpecialFloatingPointValues", "Z", 9, 12);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "longSerializationPolicy", "Lcom/google/gson/LongSerializationPolicy;", 10, 12);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/Gson;", "<init>", "VLcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map;ZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/util/List;", new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "disableHtmlEscaping", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "escapeHtmlChars", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "disableInnerClassSerialization", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "disableInnerClassSerialization", "Lcom/google/gson/internal/Excluder;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "enableComplexMapKeySerialization", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "complexMapKeySerialization", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "excludeFieldsWithModifiers", "Lcom/google/gson/GsonBuilder;[I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "withModifiers", "Lcom/google/gson/internal/Excluder;[I", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "excludeFieldsWithoutExposeAnnotation", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "excludeFieldsWithoutExposeAnnotation", "Lcom/google/gson/internal/Excluder;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "generateNonExecutableJson", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "generateNonExecutableJson", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "registerTypeAdapter", "Lcom/google/gson/GsonBuilder;Ljava/lang/reflect/Type;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/JsonSerializer;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/JsonDeserializer;");
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/InstanceCreator;");
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/TypeAdapter;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 1 });
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/InstanceCreator;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "instanceCreators", "Ljava/util/Map;", 2, 3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/InstanceCreator;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 4, 1 });
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/JsonSerializer;");
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/JsonDeserializer;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 1, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "factories", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/TreeTypeAdapter;", "newFactoryWithMatchRawType", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Object;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/TypeAdapter;");
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "factories", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Lcom/google/gson/TypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapter;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "registerTypeAdapterFactory", "Lcom/google/gson/GsonBuilder;Lcom/google/gson/TypeAdapterFactory;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "factories", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "registerTypeHierarchyAdapter", "Lcom/google/gson/GsonBuilder;Ljava/lang/Class;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/Object;", ")", "Lcom/google/gson/GsonBuilder;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 5, 0, "Lcom/google/gson/JsonSerializer;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 5, 0, "Lcom/google/gson/JsonDeserializer;");
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 5, 0, "Lcom/google/gson/TypeAdapter;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 0 });
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 5, 0, "Lcom/google/gson/JsonDeserializer;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 0, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 5, 0, "Lcom/google/gson/JsonSerializer;");
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "hierarchyFactories", "Ljava/util/List;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/TreeTypeAdapter;", "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "VILjava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 5, 0, "Lcom/google/gson/TypeAdapter;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "factories", "Ljava/util/List;", 0, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Lcom/google/gson/TypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serializeNulls", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "serializeNulls", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serializeSpecialFloatingPointValues", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "serializeSpecialFloatingPointValues", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setDateFormat", "Lcom/google/gson/GsonBuilder;I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/GsonBuilder;", "dateStyle", "I", 2, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "datePattern", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setDateFormat", "Lcom/google/gson/GsonBuilder;II", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/GsonBuilder;", "dateStyle", "I", 2, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/GsonBuilder;", "timeStyle", "I", 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "datePattern", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setDateFormat", "Lcom/google/gson/GsonBuilder;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "datePattern", "Ljava/lang/String;", 1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "setExclusionStrategies", "Lcom/google/gson/GsonBuilder;[Lcom/google/gson/ExclusionStrategy;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 7);
		mv.visitArrayLengthInsn(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 1, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "withExclusionStrategy", "Lcom/google/gson/internal/Excluder;Lcom/google/gson/ExclusionStrategy;ZZ", new int[] { 4, 3, 5, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 4, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setFieldNamingPolicy", "Lcom/google/gson/GsonBuilder;Lcom/google/gson/FieldNamingPolicy;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", 1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setFieldNamingStrategy", "Lcom/google/gson/GsonBuilder;Lcom/google/gson/FieldNamingStrategy;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", 1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setLongSerializationPolicy", "Lcom/google/gson/GsonBuilder;Lcom/google/gson/LongSerializationPolicy;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "longSerializationPolicy", "Lcom/google/gson/LongSerializationPolicy;", 1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setPrettyPrinting", "Lcom/google/gson/GsonBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/GsonBuilder;", "prettyPrinting", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setVersion", "Lcom/google/gson/GsonBuilder;D", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "withVersion", "Lcom/google/gson/internal/Excluder;D", new int[] { 0, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/GsonBuilder;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpInstanceCreator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/InstanceCreator;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/InstanceCreator;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("InstanceCreator.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "createInstance", "Ljava/lang/Object;Ljava/lang/reflect/Type;", new String[] { "(", "Ljava/lang/reflect/Type;", ")TT;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonDeserializationContext(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonDeserializationContext;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonDeserializationContext;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JsonDeserializationContext.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "deserialize", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/JsonElement;", "Ljava/lang/reflect/Type;", ")TT;" }, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonDeserializer(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonDeserializer;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonDeserializer;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("JsonDeserializer.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "deserialize", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;", new String[] { "(", "Lcom/google/gson/JsonElement;", "Ljava/lang/reflect/Type;", "Lcom/google/gson/JsonDeserializationContext;", ")TT;" }, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonElement(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/JsonElement;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/JsonElement;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JsonElement.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_ABSTRACT, "deepCopy", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBigDecimal", "Ljava/math/BigDecimal;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBigInteger", "Ljava/math/BigInteger;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBoolean", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getAsBooleanWrapper", "Ljava/lang/Boolean;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsByte", "B", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsCharacter", "C", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsDouble", "D", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsFloat", "F", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsInt", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonArray", "Lcom/google/gson/JsonArray;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonArray", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lcom/google/gson/JsonArray;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "This is not a JSON Array.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonNull", "Lcom/google/gson/JsonNull;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonNull", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lcom/google/gson/JsonNull;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "This is not a JSON Null.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonObject", "Lcom/google/gson/JsonObject;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonObject", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonObject;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Not a JSON Object: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonPrimitive", "Lcom/google/gson/JsonPrimitive;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonPrimitive", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "This is not a JSON Primitive.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsLong", "J", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsNumber", "Ljava/lang/Number;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsShort", "S", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isJsonArray", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Lcom/google/gson/JsonArray;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isJsonNull", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Lcom/google/gson/JsonNull;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isJsonObject", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Lcom/google/gson/JsonObject;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isJsonPrimitive", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/stream/JsonWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "<init>", "VLjava/io/Writer;", new int[] { 1, 2 });
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setLenient", "VZ", new int[] { 1, 3 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "write", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", new int[] { 4, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonParseException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/google/gson/JsonParseException;", null, "Ljava/lang/RuntimeException;", null);
	cv.visit(0, ACC_PUBLIC, "Lcom/google/gson/JsonParseException;", null, "Ljava/lang/RuntimeException;", null);
	cv.visitSource("JsonParseException.java", null);
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, -4086729973971783390L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonParser(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonParser;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonParser;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JsonParser.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "parse", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Lcom/google/gson/JsonIOException;", "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "isLenient", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 6, 2 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/StackOverflowError;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/OutOfMemoryError;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "parse", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 6 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitTryCatchBlock(l5, l4, l4, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonParseException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Failed parsing JSON source: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " to Json");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l6, l7, l4, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonParseException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Failed parsing JSON source: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " to Json");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "parse", "Lcom/google/gson/JsonElement;Ljava/io/Reader;", null, new String[] { "Lcom/google/gson/JsonIOException;", "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitTryCatchBlock(l0, l1, l1, "Lcom/google/gson/stream/MalformedJsonException;");
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/stream/JsonReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "<init>", "VLjava/io/Reader;", new int[] { 2, 6 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonParser;", "parse", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonNull", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l4, 3, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Did not consume the entire document.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "parse", "Lcom/google/gson/JsonElement;Ljava/lang/String;", null, new String[] { "Lcom/google/gson/JsonSyntaxException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringReader;", "<init>", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonParser;", "parse", "Lcom/google/gson/JsonElement;Ljava/io/Reader;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonSerializationContext(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonSerializationContext;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonSerializationContext;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JsonSerializationContext.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonSerializer(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonSerializer;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/JsonSerializer;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("JsonSerializer.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;", new String[] { "(TT;", "Ljava/lang/reflect/Type;", "Lcom/google/gson/JsonSerializationContext;", ")", "Lcom/google/gson/JsonElement;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonStreamParser(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonStreamParser;", new String[] { "Ljava/lang/Object;", "Ljava/util/Iterator", "<", "Lcom/google/gson/JsonElement;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Iterator;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonStreamParser;", new String[] { "Ljava/lang/Object;", "Ljava/util/Iterator", "<", "Lcom/google/gson/JsonElement;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Iterator;" });
	cv.visitSource("JsonStreamParser.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "lock", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "parser", "Lcom/google/gson/stream/JsonReader;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/Reader;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "<init>", "VLjava/io/Reader;", new int[] { 0, 3 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/JsonStreamParser;", "parser", "Lcom/google/gson/stream/JsonReader;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonStreamParser;", "parser", "Lcom/google/gson/stream/JsonReader;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "setLenient", "VZ", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/JsonStreamParser;", "lock", "Ljava/lang/Object;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringReader;", "<init>", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonStreamParser;", "<init>", "VLjava/io/Reader;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hasNext", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonStreamParser;", "lock", "Ljava/lang/Object;", 2, 4);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lcom/google/gson/stream/MalformedJsonException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/io/IOException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonStreamParser;", "parser", "Lcom/google/gson/stream/JsonReader;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		mv.visitLabel(l1);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l5, 1, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l6, l7, l4, null);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitTryCatchBlock(l8, l9, l4, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "next", "Lcom/google/gson/JsonElement;", null, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonStreamParser;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/NoSuchElementException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/NoSuchElementException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/StackOverflowError;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/OutOfMemoryError;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Lcom/google/gson/JsonParseException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonStreamParser;", "parser", "Lcom/google/gson/stream/JsonReader;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "parse", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonParseException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Failed parsing JSON source to Json");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonParseException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Failed parsing JSON source to Json");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonParseException;", "getCause", "Ljava/lang/Throwable;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 1, 0, "Ljava/io/EOFException;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/NoSuchElementException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/NoSuchElementException;", "<init>", "V", new int[] { 0 });
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "next", "Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonStreamParser;", "next", "Lcom/google/gson/JsonElement;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "remove", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLongSerializationPolicy(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT + ACC_ENUM, "Lcom/google/gson/LongSerializationPolicy;", new String[] { "Ljava/lang/Enum", "<", "Lcom/google/gson/LongSerializationPolicy;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT + ACC_ENUM, "Lcom/google/gson/LongSerializationPolicy;", new String[] { "Ljava/lang/Enum", "<", "Lcom/google/gson/LongSerializationPolicy;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visitSource("LongSerializationPolicy.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$VALUES", "[Lcom/google/gson/LongSerializationPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "DEFAULT", "Lcom/google/gson/LongSerializationPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "STRING", "Lcom/google/gson/LongSerializationPolicy;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/LongSerializationPolicy$1;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "DEFAULT");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/LongSerializationPolicy$1;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "DEFAULT", "Lcom/google/gson/LongSerializationPolicy;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/LongSerializationPolicy$2;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "STRING");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/LongSerializationPolicy$2;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 3 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "STRING", "Lcom/google/gson/LongSerializationPolicy;", 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Lcom/google/gson/LongSerializationPolicy;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "DEFAULT", "Lcom/google/gson/LongSerializationPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "STRING", "Lcom/google/gson/LongSerializationPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 3);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "$VALUES", "[Lcom/google/gson/LongSerializationPolicy;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", new String[] { "()V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Enum;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;ILcom/google/gson/LongSerializationPolicy$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/LongSerializationPolicy;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "Lcom/google/gson/LongSerializationPolicy;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/google/gson/LongSerializationPolicy;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Enum;", "valueOf", "Ljava/lang/Enum;Ljava/lang/Class;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/LongSerializationPolicy;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "[Lcom/google/gson/LongSerializationPolicy;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/LongSerializationPolicy;", "$VALUES", "[Lcom/google/gson/LongSerializationPolicy;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Lcom/google/gson/LongSerializationPolicy;", "clone", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Lcom/google/gson/LongSerializationPolicy;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Long;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTreeTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lcom/google/gson/TreeTypeAdapter$1;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lcom/google/gson/TreeTypeAdapter$1;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TreeTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/TreeTypeAdapter$1;", "Lcom/google/gson/TreeTypeAdapter;", null, ACC_STATIC + ACC_SYNTHETIC);
	cv.visitEnd();
}

public static void dumpTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/TypeAdapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/TypeAdapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("TypeAdapter.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "fromJson", "Ljava/lang/Object;Ljava/io/Reader;", new String[] { "(", "Ljava/io/Reader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "<init>", "VLjava/io/Reader;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "fromJson", "Ljava/lang/Object;Ljava/lang/String;", new String[] { "(", "Ljava/lang/String;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringReader;", "<init>", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "fromJson", "Ljava/lang/Object;Ljava/io/Reader;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "fromJsonTree", "Ljava/lang/Object;Lcom/google/gson/JsonElement;", new String[] { "(", "Lcom/google/gson/JsonElement;", ")TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/JsonTreeReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "<init>", "VLcom/google/gson/JsonElement;", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 3, 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "nullSafe", "Lcom/google/gson/TypeAdapter;", new String[] { "()", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/TypeAdapter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter$1;", "<init>", "VLcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "toJson", "Ljava/lang/String;Ljava/lang/Object;", new String[] { "(TT;)", "Ljava/lang/String;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "toJson", "VLjava/io/Writer;Ljava/lang/Object;", new int[] { 2, 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "toJson", "VLjava/io/Writer;Ljava/lang/Object;", new String[] { "(", "Ljava/io/Writer;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "<init>", "VLjava/io/Writer;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 1, 0, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new String[] { "(TT;)", "Lcom/google/gson/JsonElement;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/JsonTreeWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 3, 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "get", "Lcom/google/gson/JsonElement;", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapterFactory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/TypeAdapterFactory;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/TypeAdapterFactory;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TypeAdapterFactory.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExpose(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/Expose;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/Expose;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Expose.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "deserialize", "Z", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("deserialize", true);
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "serialize", "Z", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("serialize", true);
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSerializedName(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/SerializedName;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/SerializedName;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("SerializedName.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Ljava/lang/String;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSince(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/Since;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/Since;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Since.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "TYPE");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "D", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpUntil(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/Until;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/google/gson/annotations/Until;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Until.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "TYPE");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "D", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dump$Gson$Preconditions(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/$Gson$Preconditions;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/$Gson$Preconditions;", null, "Ljava/lang/Object;", null);
	cv.visitSource("$Gson$Preconditions.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "checkArgument", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new String[] { "<T:", "Ljava/lang/Object;", ">(TT;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/NullPointerException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NullPointerException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dump$Gson$Types$GenericArrayTypeImpl(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/reflect/GenericArrayType;", "Ljava/io/Serializable;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/reflect/GenericArrayType;", "Ljava/io/Serializable;" });
	cv.visitSource("$Gson$Types.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "Lcom/google/gson/internal/$Gson$Types;", "GenericArrayTypeImpl", ACC_PRIVATE + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "componentType", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "componentType", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "equals", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getGenericComponentType", "Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "componentType", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "componentType", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "componentType", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "[]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dump$Gson$Types$ParameterizedTypeImpl(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/reflect/ParameterizedType;", "Ljava/io/Serializable;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/reflect/ParameterizedType;", "Ljava/io/Serializable;" });
	cv.visitSource("$Gson$Types.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "Lcom/google/gson/internal/$Gson$Types;", "ParameterizedTypeImpl", ACC_PRIVATE + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "ownerType", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "rawType", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "typeArguments", "[Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 5 });
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 7, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 7);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getEnclosingClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 2, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 2, 4);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 2 });
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getEnclosingClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 2, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_MOVE, 3, 4);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 3 });
		mv.visitLabel(l0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 6, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "ownerType", "Ljava/lang/reflect/Type;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "rawType", "Ljava/lang/reflect/Type;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Ljava/lang/reflect/Type;", "clone", "Ljava/lang/Object;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "[Ljava/lang/reflect/Type;");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l8 = new Label();
		mv.visitLabel(l8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitArrayLengthInsn(2, 2);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l9, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "access$000", "VLjava/lang/reflect/Type;", new int[] { 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 3, 5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 2, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l8, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_MOVE, 2, 3);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l9);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "equals", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getActualTypeArguments", "[Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Ljava/lang/reflect/Type;", "clone", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Ljava/lang/reflect/Type;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getOwnerType", "Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "ownerType", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRawType", "Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "rawType", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "hashCode", "I[Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "rawType", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_XOR_INT_2ADDR, 0, 0, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "ownerType", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "access$100", "ILjava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_XOR_INT_2ADDR, 0, 0, 1, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitArrayLengthInsn(2, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitOperationInsn(INSN_MUL_INT_LIT8, 2, 2, 0, 30);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "VI", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "rawType", "Ljava/lang/reflect/Type;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitArrayLengthInsn(2, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 3, 5);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 2, 5);
		mv.visitArrayLengthInsn(2, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ", ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "typeArguments", "[Ljava/lang/reflect/Type;", 3, 5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dump$Gson$Types$WildcardTypeImpl(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/reflect/WildcardType;", "Ljava/io/Serializable;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/reflect/WildcardType;", "Ljava/io/Serializable;" });
	cv.visitSource("$Gson$Types.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "Lcom/google/gson/internal/$Gson$Types;", "WildcardTypeImpl", ACC_PRIVATE + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "lowerBound", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "upperBound", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V[Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 4 });
		mv.visitArrayLengthInsn(0, 6);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GT, l0, 0, 1);
		mv.visitVarInsn(INSN_MOVE, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 0 });
		mv.visitArrayLengthInsn(0, 5);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 1);
		mv.visitVarInsn(INSN_MOVE, 0, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 0 });
		mv.visitArrayLengthInsn(0, 6);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 6, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0 });
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 6, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "access$000", "VLjava/lang/reflect/Type;", new int[] { 0 });
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 5, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Object;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l5, 0, 3);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 1 });
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 6, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 0, 4);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/Object;");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "upperBound", "Ljava/lang/reflect/Type;", 0, 4);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_MOVE, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE, 1, 2);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 5, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0 });
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 5, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "access$000", "VLjava/lang/reflect/Type;", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 0, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 5, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "upperBound", "Ljava/lang/reflect/Type;", 0, 4);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/lang/reflect/WildcardType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "equals", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getLowerBounds", "[Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 0, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/reflect/Type;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 2, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types;", "EMPTY_TYPE_ARRAY", "[Ljava/lang/reflect/Type;", 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getUpperBounds", "[Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/reflect/Type;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "upperBound", "Ljava/lang/reflect/Type;", 2, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 31);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "upperBound", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 31);
		mv.visitOperationInsn(INSN_XOR_INT_2ADDR, 0, 0, 1, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "? super ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "lowerBound", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "upperBound", "Ljava/lang/reflect/Type;", 0, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Object;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "?");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "? extends ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "upperBound", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dump$Gson$Types(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/$Gson$Types;", null, "Ljava/lang/Object;", null);
	cv.visitSource("$Gson$Types.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "Lcom/google/gson/internal/$Gson$Types;", "WildcardTypeImpl");
	cv.visitMemberClass("Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "Lcom/google/gson/internal/$Gson$Types;", "GenericArrayTypeImpl");
	cv.visitMemberClass("Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "Lcom/google/gson/internal/$Gson$Types;", "ParameterizedTypeImpl");
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "EMPTY_TYPE_ARRAY", "[Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/reflect/Type;");
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/$Gson$Types;", "EMPTY_TYPE_ARRAY", "[Ljava/lang/reflect/Type;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "VLjava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "checkNotPrimitive", "VLjava/lang/reflect/Type;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "ILjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "hashCodeOrZero", "ILjava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "arrayOf", "Ljava/lang/reflect/GenericArrayType;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "<init>", "VLjava/lang/reflect/Type;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 8, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 8);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isArray", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getComponentType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "<init>", "VLjava/lang/reflect/Type;", new int[] { 4, 5 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/Type;");
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 8, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 8);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getOwnerType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "<init>", "VLjava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", new int[] { 4, 5, 6, 7 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 8, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 8);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$GenericArrayTypeImpl;", "<init>", "VLjava/lang/reflect/Type;", new int[] { 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 8, 0, "Ljava/lang/reflect/WildcardType;");
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 8);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getLowerBounds", "[Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "<init>", "V[Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", new int[] { 4, 5, 6 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 8);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "checkNotPrimitive", "VLjava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isPrimitive", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "declaringClassOf", "Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;", new String[] { "(", "Ljava/lang/reflect/TypeVariable", "<*>;)", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getGenericDeclaration", "Ljava/lang/reflect/GenericDeclaration;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "equal", "ZLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "equals", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(14, 0);
		mv.visitVarInsn(INSN_CONST_4, 8, 1);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 12, 13);
		mv.visitVarInsn(INSN_MOVE, 9, 8);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 9);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 12, 0, "Ljava/lang/Class;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 12, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 12, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 10, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 13, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 10, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 12);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 13);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getOwnerType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getOwnerType", "Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "equal", "ZLjava/lang/Object;Ljava/lang/Object;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "equals", "Z[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 10, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE, 9, 8);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_MOVE, 8, 9);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 12, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 10, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 8, 13, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 8, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 12);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 13);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "equals", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 12, 0, "Ljava/lang/reflect/WildcardType;");
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 10, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 13, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 10, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 12);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 6, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 13);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "equals", "Z[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getLowerBounds", "[Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getLowerBounds", "[Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "equals", "Z[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 10, 0);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_MOVE, 9, 8);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_MOVE, 8, 9);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 12, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 10, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 10, 13, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 10, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 12);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 13);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getGenericDeclaration", "Ljava/lang/reflect/GenericDeclaration;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getGenericDeclaration", "Ljava/lang/reflect/GenericDeclaration;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l10, 10, 11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		mv.visitJumpInsn(INSN_IF_EQZ, l10, 10, 0);
		Label l11 = new Label();
		mv.visitLabel(l11);
		mv.visitVarInsn(INSN_MOVE, 9, 8);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_MOVE, 8, 9);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getArrayComponentType", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getComponentType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getCollectionElementType", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<*>;)", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/Collection;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 3, 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Ljava/lang/reflect/WildcardType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 1, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 1, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Object;");
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "getGenericSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;)", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 8, 7);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInterface", "Z", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getInterfaces", "[Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitArrayLengthInsn(2, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_IF_GE, l2, 0, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 1, 0);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 4, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericInterfaces", "[Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 6, 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 8, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericInterfaces", "[Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 4, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 5, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getGenericSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4, 5, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInterface", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 4, 0);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Ljava/lang/Object;");
		mv.visitJumpInsn(INSN_IF_EQ, l6, 7, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSuperclass", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 3, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericSuperclass", "Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 8, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericSuperclass", "Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getGenericSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4, 3, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 3);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 8);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getMapKeyAndValueTypes", "[Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<*>;)[", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 2);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/util/Properties;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 6, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 3, "[Ljava/lang/reflect/Type;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/String;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 2, 4);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/String;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 2, 5);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/util/Map;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 6, 7, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 1, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 3, "[Ljava/lang/reflect/Type;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 2, 4);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 2, 5);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new String[] { "(", "Ljava/lang/reflect/Type;", ")", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 7, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/Class;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 7, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 7);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 3, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 4 });
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/Class;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 7, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "newInstance", "Ljava/lang/Object;Ljava/lang/Class;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 7, 0, "Ljava/lang/reflect/TypeVariable;");
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Ljava/lang/Object;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 7, 0, "Ljava/lang/reflect/WildcardType;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 7, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "null");
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 6, "Expected a Class, ParameterizedType, or GenericArrayType, but <");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 6, "> is of type ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "getSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;)", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getGenericSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "hashCodeOrZero", "ILjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "indexOf", "I[Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/NoSuchElementException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/NoSuchElementException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "newParameterizedTypeWithOwner", "Ljava/lang/reflect/ParameterizedType;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$ParameterizedTypeImpl;", "<init>", "VLjava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", new int[] { 0, 1, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<*>;", "Ljava/lang/reflect/Type;", ")", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(24, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 23);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 19, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 17, 23);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 17, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 2, 17);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolveTypeVariable", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 23);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 23);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 17);
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 10, 23);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 10);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 23);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/Class;");
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 19, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 19, 23);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 19, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Ljava/lang/Class;", "isArray", "Z", new int[] { 19 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 19);
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 19, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 11, 23);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 11, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getComponentType", "Ljava/lang/Class;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 5, 8);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 10, 11);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "arrayOf", "Ljava/lang/reflect/GenericArrayType;Ljava/lang/reflect/Type;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 23);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 19, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 10, 23);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 10, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitJumpInsn(INSN_IF_EQ, l2, 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "arrayOf", "Ljava/lang/reflect/GenericArrayType;Ljava/lang/reflect/Type;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 23);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 19, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 10, 23);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 10, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getOwnerType", "Ljava/lang/reflect/Type;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 14);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 14 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l8, 9, 14);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_CONST_16, 16, 0);
		mv.visitArrayLengthInsn(6, 3);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 16);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l11, 0, 6);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 19, 3, 16);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 2, 19);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 15);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 19, 3, 16);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 19);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l12, 15, 0);
		Label l13 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l13, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Ljava/lang/reflect/Type;", "clone", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "[Ljava/lang/reflect/Type;");
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitLabel(l13);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 15, 3, 16);
		mv.visitLabel(l12);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 16, 16, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l11);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 19);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 19);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "newParameterizedTypeWithOwner", "Ljava/lang/reflect/ParameterizedType;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", new int[] { 9, 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 23);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		Label l14 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l14, 19, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 10, 23);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 10, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getLowerBounds", "[Ljava/lang/reflect/Type;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 13);
		mv.visitArrayLengthInsn(0, 12);
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		mv.visitVarInsn(INSN_CONST_16, 20, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 19);
		mv.visitVarInsn(INSN_MOVE_FROM16, 1, 20);
		Label l15 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l15, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 19, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 19, 12, 19);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 2, 19);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitVarInsn(INSN_CONST_16, 19, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 19, 12, 19);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 19);
		mv.visitJumpInsn(INSN_IF_EQ, l2, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "supertypeOf", "Ljava/lang/reflect/WildcardType;Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitLabel(l15);
		mv.visitArrayLengthInsn(0, 13);
		mv.visitVarInsn(INSN_MOVE_FROM16, 19, 0);
		mv.visitVarInsn(INSN_CONST_16, 20, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 19);
		mv.visitVarInsn(INSN_MOVE_FROM16, 1, 20);
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 19, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 19, 13, 19);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 22);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 2, 19);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 18);
		mv.visitVarInsn(INSN_CONST_16, 19, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 19, 13, 19);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 19);
		mv.visitJumpInsn(INSN_IF_EQ, l2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lcom/google/gson/internal/$Gson$Types;", "subtypeOf", "Ljava/lang/reflect/WildcardType;Ljava/lang/reflect/Type;", new int[] { 18 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitLabel(l14);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 10, 23);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "resolveTypeVariable", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<*>;", "Ljava/lang/reflect/TypeVariable", "<*>;)", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "declaringClassOf", "Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getGenericSupertype", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4, 5, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getTypeParameters", "[Ljava/lang/reflect/TypeVariable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "indexOf", "I[Ljava/lang/Object;Ljava/lang/Object;", new int[] { 3, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 6, 3, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "subtypeOf", "Ljava/lang/reflect/WildcardType;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;");
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/reflect/Type;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/$Gson$Types;", "EMPTY_TYPE_ARRAY", "[Ljava/lang/reflect/Type;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "<init>", "V[Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "supertypeOf", "Ljava/lang/reflect/WildcardType;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 4, "[Ljava/lang/reflect/Type;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 1, 3);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 4, "[Ljava/lang/reflect/Type;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/$Gson$Types$WildcardTypeImpl;", "<init>", "V[Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/ConstructorConstructor;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/ConstructorConstructor;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ConstructorConstructor.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "instanceCreators", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/reflect/Type;", "Lcom/google/gson/InstanceCreator", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/Map;", new String[] { "(", "Ljava/util/Map", "<", "Ljava/lang/reflect/Type;", "Lcom/google/gson/InstanceCreator", "<*>;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor;", "instanceCreators", "Ljava/util/Map;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "newDefaultConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<-TT;>;)", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredConstructor", "Ljava/lang/reflect/Constructor;[Ljava/lang/Class;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "isAccessible", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "setAccessible", "VZ", new int[] { 0, 2 });
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$3;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Ljava/lang/reflect/Constructor;", new int[] { 2, 3, 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<-TT;>;)", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/Collection;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/SortedSet;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$4;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$4;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/EnumSet;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$5;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Ljava/lang/reflect/Type;", new int[] { 0, 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/Set;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$6;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$6;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/Queue;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$7;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$7;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$8;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$8;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/Map;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/SortedMap;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$9;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$9;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/String;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l8, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$10;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$10;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$11;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$11;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "newUnsafeAllocator", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/reflect/Type;", "Ljava/lang/Class", "<-TT;>;)", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$12;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0, 1, 3, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "get", "Lcom/google/gson/internal/ObjectConstructor;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor;", "instanceCreators", "Ljava/util/Map;", 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 6, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Lcom/google/gson/InstanceCreator;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$1;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/InstanceCreator;Ljava/lang/reflect/Type;", new int[] { 0, 7, 5, 4 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor;", "instanceCreators", "Ljava/util/Map;", 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 6, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/InstanceCreator;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/ConstructorConstructor$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor$2;", "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/InstanceCreator;Ljava/lang/reflect/Type;", new int[] { 0, 7, 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/Class;", new int[] { 7, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;", new int[] { 7, 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 1, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/ConstructorConstructor;", "newUnsafeAllocator", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;", new int[] { 7, 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor;", "instanceCreators", "Ljava/util/Map;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonReaderInternalAccess(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/internal/JsonReaderInternalAccess;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/internal/JsonReaderInternalAccess;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JsonReaderInternalAccess.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC, "INSTANCE", "Lcom/google/gson/internal/JsonReaderInternalAccess;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "promoteNameToValue", "VLcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLazilyParsedNumber(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/LazilyParsedNumber;", null, "Ljava/lang/Number;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/LazilyParsedNumber;", null, "Ljava/lang/Number;", null);
	cv.visitSource("LazilyParsedNumber.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "value", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Number;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "writeReplace", "Ljava/lang/Object;", null, new String[] { "Ljava/io/ObjectStreamException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/math/BigDecimal;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigDecimal;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "doubleValue", "D", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "parseDouble", "DLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "floatValue", "F", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "parseFloat", "FLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "intValue", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NumberFormatException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "parseInt", "ILjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l4, l5, l6, "Ljava/lang/NumberFormatException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "parseLong", "JLjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitOperationInsn(INSN_LONG_TO_INT, 2, 2, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/math/BigDecimal;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigDecimal;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/math/BigDecimal;", "intValue", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "longValue", "J", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NumberFormatException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "parseLong", "JLjava/lang/String;", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_WIDE, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/math/BigDecimal;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigDecimal;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/math/BigDecimal;", "longValue", "J", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "value", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/LinkedTreeMap$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/Comparable;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/LinkedTreeMap$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/Comparable;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/LinkedTreeMap$1;", "Lcom/google/gson/internal/LinkedTreeMap;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILjava/lang/Comparable;Ljava/lang/Comparable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Comparable;", "compareTo", "ILjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Comparable;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/Comparable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap$1;", "compare", "ILjava/lang/Comparable;Ljava/lang/Comparable;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$EntrySet(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", new String[] { "Ljava/util/AbstractSet", "<", "Ljava/util/Map$Entry", "<TK;TV;>;>;" }, "Ljava/util/AbstractSet;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", new String[] { "Ljava/util/AbstractSet", "<", "Ljava/util/Map$Entry", "<TK;TV;>;>;" }, "Ljava/util/AbstractSet;", null);
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "Lcom/google/gson/internal/LinkedTreeMap;", "EntrySet", 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/AbstractSet;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "clear", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "clear", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "contains", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/util/Map$Entry;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Map$Entry;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "findByEntry", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/util/Map$Entry;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "iterator", "Ljava/util/Iterator;", new String[] { "()", "Ljava/util/Iterator", "<", "Ljava/util/Map$Entry", "<TK;TV;>;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap$EntrySet;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "remove", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 5, 0, "Ljava/util/Map$Entry;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 3, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Ljava/util/Map$Entry;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "findByEntry", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/util/Map$Entry;", new int[] { 3, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "removeInternal", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new int[] { 1, 0, 2 });
		mv.visitVarInsn(INSN_MOVE, 1, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "size", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 0, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$KeySet(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", new String[] { "Ljava/util/AbstractSet", "<TK;>;" }, "Ljava/util/AbstractSet;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", new String[] { "Ljava/util/AbstractSet", "<TK;>;" }, "Ljava/util/AbstractSet;", null);
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "Lcom/google/gson/internal/LinkedTreeMap;", "KeySet", 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/AbstractSet;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "clear", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "clear", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "contains", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "containsKey", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "iterator", "Ljava/util/Iterator;", new String[] { "()", "Ljava/util/Iterator", "<TK;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$KeySet$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet$1;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap$KeySet;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "remove", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "removeInternalByKey", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "size", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 0, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$LinkedTreeMapIterator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_ABSTRACT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;", "Ljava/util/Iterator", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Iterator;" });
	cv.visit(0, ACC_ABSTRACT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;", "Ljava/util/Iterator", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Iterator;" });
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "Lcom/google/gson/internal/LinkedTreeMap;", "LinkedTreeMapIterator", ACC_PRIVATE + ACC_ABSTRACT);
	{
		fv = cv.visitField(0, "expectedModCount", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "lastReturned", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "lastReturned", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "expectedModCount", "I", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap;Lcom/google/gson/internal/LinkedTreeMap$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "hasNext", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_FINAL, "nextNode", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "()", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/NoSuchElementException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/NoSuchElementException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 1, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "expectedModCount", "I", 2, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l1, 1, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ConcurrentModificationException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ConcurrentModificationException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "lastReturned", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "remove", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "lastReturned", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "lastReturned", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 3);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "removeInternal", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new int[] { 0, 1, 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "lastReturned", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "expectedModCount", "I", 0, 3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$Node(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "<K:", "Ljava/lang/Object;", "V:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;", "Ljava/util/Map$Entry", "<TK;TV;>;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Map$Entry;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "<K:", "Ljava/lang/Object;", "V:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;", "Ljava/util/Map$Entry", "<TK;TV;>;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Map$Entry;" });
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/LinkedTreeMap$Node;", "Lcom/google/gson/internal/LinkedTreeMap;", "Node", ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(0, "height", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "key", "Ljava/lang/Object;", new String[] { "TK;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "value", "Ljava/lang/Object;", new String[] { "TV;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;Lcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "(", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;TK;", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 5, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 5);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 5, 0, "Ljava/util/Map$Entry;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Map$Entry;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 2, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 2, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "first", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "()", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getKey", "Ljava/lang/Object;", new String[] { "()TK;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getValue", "Ljava/lang/Object;", new String[] { "()TV;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 0, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 2, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 2, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_XOR_INT_2ADDR, 0, 0, 1, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "last", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "()", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setValue", "Ljava/lang/Object;Ljava/lang/Object;", new String[] { "(TV;)TV;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 2, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/LinkedTreeMap;", new String[] { "<K:", "Ljava/lang/Object;", "V:", "Ljava/lang/Object;", ">", "Ljava/util/AbstractMap", "<TK;TV;>;", "Ljava/io/Serializable;" }, "Ljava/util/AbstractMap;", new String[] { "Ljava/io/Serializable;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/LinkedTreeMap;", new String[] { "<K:", "Ljava/lang/Object;", "V:", "Ljava/lang/Object;", ">", "Ljava/util/AbstractMap", "<TK;TV;>;", "Ljava/io/Serializable;" }, "Ljava/util/AbstractMap;", new String[] { "Ljava/io/Serializable;" });
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "Lcom/google/gson/internal/LinkedTreeMap;", "KeySet");
	cv.visitMemberClass("Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "Lcom/google/gson/internal/LinkedTreeMap;", "EntrySet");
	cv.visitMemberClass("Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "Lcom/google/gson/internal/LinkedTreeMap;", "LinkedTreeMapIterator");
	cv.visitMemberClass("Lcom/google/gson/internal/LinkedTreeMap$Node;", "Lcom/google/gson/internal/LinkedTreeMap;", "Node");
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$assertionsDisabled", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NATURAL_ORDER", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<", "Ljava/lang/Comparable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "comparator", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<-TK;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "entrySet", "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<TK;TV;>.EntrySet;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "keySet", "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<TK;TV;>.KeySet;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "modCount", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "root", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "size", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "desiredAssertionStatus", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Lcom/google/gson/internal/LinkedTreeMap;", "$assertionsDisabled", "Z", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "NATURAL_ORDER", "Ljava/util/Comparator;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "NATURAL_ORDER", "Ljava/util/Comparator;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "<init>", "VLjava/util/Comparator;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/Comparator;", new String[] { "(", "Ljava/util/Comparator", "<-TK;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/AbstractMap;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$Node;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "comparator", "Ljava/util/Comparator;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "NATURAL_ORDER", "Ljava/util/Comparator;", 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "equal", "ZLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 2, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "rebalance", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new String[] { "(", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;Z)V" }, null);
		mv.visitCode();
		mv.visitMaxs(21, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 9, 19);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 9, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 2, 9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 10, 9);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 10, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 12, 10);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitOperationInsn(INSN_SUB_INT, 1, 4, 12, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, -2);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l6, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 13, 10);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 15, 10);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 15, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 0, 15);
		mv.visitVarInsn(INSN_MOVE_FROM16, 16, 0);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 13, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 14, 13);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitOperationInsn(INSN_SUB_INT, 11, 14, 16, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, -1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l11, 11, 0);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l12, 11, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l12, 20, 0);
		mv.visitLabel(l11);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rotateLeft", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 0, 9 });
		Label l13 = new Label();
		mv.visitLabel(l13);
		Label l14 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l14, 20, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 12, 0);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_CONST_16, 16, 0);
		mv.visitJumpInsn(INSN_GOTO, l8, 0, 0);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_CONST_4, 14, 0);
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l12);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Lcom/google/gson/internal/LinkedTreeMap;", "$assertionsDisabled", "Z", 17, 0);
		Label l15 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l15, 17, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		mv.visitJumpInsn(INSN_IF_EQ, l15, 11, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 17, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 17 });
		mv.visitIntInsn(INSN_THROW, 17);
		mv.visitLabel(l15);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rotateRight", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 0, 10 });
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rotateLeft", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 0, 9 });
		mv.visitJumpInsn(INSN_GOTO, l13, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_16, 17, 2);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		Label l16 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l16, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 5, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 2);
		Label l17 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l17, 7, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 8, 7);
		Label l18 = new Label();
		mv.visitLabel(l18);
		Label l19 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l19, 5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 6, 5);
		Label l20 = new Label();
		mv.visitLabel(l20);
		mv.visitOperationInsn(INSN_SUB_INT, 3, 6, 8, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		Label l21 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l21, 3, 0);
		Label l22 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l22, 3, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l22, 20, 0);
		mv.visitLabel(l21);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rotateRight", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 0, 9 });
		Label l23 = new Label();
		mv.visitLabel(l23);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 20, 0);
		mv.visitLabel(l14);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 9, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l0, 0, 0);
		mv.visitLabel(l17);
		mv.visitVarInsn(INSN_CONST_4, 8, 0);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l19);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitJumpInsn(INSN_GOTO, l20, 0, 0);
		mv.visitLabel(l22);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Lcom/google/gson/internal/LinkedTreeMap;", "$assertionsDisabled", "Z", 17, 0);
		Label l24 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l24, 17, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, -1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		mv.visitJumpInsn(INSN_IF_EQ, l24, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 17, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 17 });
		mv.visitIntInsn(INSN_THROW, 17);
		mv.visitLabel(l24);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rotateLeft", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 0, 2 });
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rotateRight", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 0, 9 });
		mv.visitJumpInsn(INSN_GOTO, l23, 0, 0);
		mv.visitLabel(l16);
		Label l25 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l25, 1, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 17, 4, 0, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 0, 9);
		mv.visitJumpInsn(INSN_IF_EQZ, l14, 20, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l25);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Lcom/google/gson/internal/LinkedTreeMap;", "$assertionsDisabled", "Z", 17, 0);
		Label l26 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l26, 17, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, -1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		mv.visitJumpInsn(INSN_IF_EQ, l26, 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 17, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		mv.visitJumpInsn(INSN_IF_EQ, l26, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 17, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 17 });
		mv.visitIntInsn(INSN_THROW, 17);
		mv.visitLabel(l26);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 4, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 17);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 17, 17, 0, 1);
		mv.visitVarInsn(INSN_MOVE_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 0, 9);
		mv.visitJumpInsn(INSN_IF_NEZ, l14, 20, 0);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "(", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 4);
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 1, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Lcom/google/gson/internal/LinkedTreeMap;", "$assertionsDisabled", "Z", 1, 0);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l4, 1, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "root", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 2);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "rotateLeft", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "(", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 2, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 3, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 2, 8);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 7, 8, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 8);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 0);
		mv.visitVarInsn(INSN_MOVE, 6, 4);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 2);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 6, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 8);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 8);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 5, 3);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 6, 5);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "rotateRight", "VLcom/google/gson/internal/LinkedTreeMap$Node;", new String[] { "(", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 3, 8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 2, 8);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 7, 8, 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 8);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 3);
		mv.visitVarInsn(INSN_MOVE, 6, 4);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 2);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 6, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 8);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 8);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 1, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 5, 1);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 4, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 6, 5);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "writeReplace", "Ljava/lang/Object;", null, new String[] { "Ljava/io/ObjectStreamException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/LinkedHashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/LinkedHashMap;", "<init>", "VLjava/util/Map;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "clear", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "root", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 1, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "containsKey", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "findByObject", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "entrySet", "Ljava/util/Set;", new String[] { "()", "Ljava/util/Set", "<", "Ljava/util/Map$Entry", "<TK;TV;>;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "entrySet", "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "entrySet", "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "find", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;Z", new String[] { "(TK;Z)", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 8, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "comparator", "Ljava/util/Comparator;", 2, 10);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "root", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 6, 10);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 6, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "NATURAL_ORDER", "Ljava/util/Comparator;", 7, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 2, 7);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 11);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/Comparable;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 7, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Comparable;", "compareTo", "ILjava/lang/Object;", new int[] { 1, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l4 = new Label();
		mv.visitLabel(l4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 8, 6);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 8);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 7, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Comparator;", "compare", "ILjava/lang/Object;Ljava/lang/Object;", new int[] { 2, 11, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l5);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_GEZ, l7, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 6);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l9, 0, 0);
		mv.visitLabel(l0);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 12, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "header", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 5, 10);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l10, 6, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "NATURAL_ORDER", "Ljava/util/Comparator;", 7, 0);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l11, 2, 7);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 7, 11, 0, "Ljava/lang/Comparable;");
		mv.visitJumpInsn(INSN_IF_NEZ, l11, 7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/ClassCastException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 8 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitStringInsn(INSN_CONST_STRING, 9, " is not Comparable");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/ClassCastException;", "<init>", "VLjava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_THROW, 7);
		mv.visitLabel(l7);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 6);
		mv.visitJumpInsn(INSN_GOTO, l8, 0, 0);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l11);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$Node;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;Lcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 4, 6, 11, 5, 7 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "root", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 10);
		Label l12 = new Label();
		mv.visitLabel(l12);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 7, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 7, 10);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 8, 4);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l10);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$Node;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;Lcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 4, 6, 11, 5, 7 });
		Label l13 = new Label();
		mv.visitJumpInsn(INSN_IF_GEZ, l13, 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 6);
		Label l14 = new Label();
		mv.visitLabel(l14);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rebalance", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new int[] { 10, 6, 7 });
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l13);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 6);
		mv.visitJumpInsn(INSN_GOTO, l14, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "findByEntry", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/util/Map$Entry;", new String[] { "(", "Ljava/util/Map$Entry", "<**>;)", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "findByObject", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "equal", "ZLjava/lang/Object;Ljava/lang/Object;", new int[] { 4, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "findByObject", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, "Ljava/lang/ClassCastException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "find", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;Z", new int[] { 3, 4, 2 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "get", "Ljava/lang/Object;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")TV;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "findByObject", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "keySet", "Ljava/util/Set;", new String[] { "()", "Ljava/util/Set", "<TK;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "keySet", "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap;", "keySet", "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new String[] { "(TK;TV;)TV;" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/NullPointerException;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "key == null");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NullPointerException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "find", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;Z", new int[] { 4, 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 6, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "remove", "Ljava/lang/Object;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")TV;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "removeInternalByKey", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "value", "Ljava/lang/Object;", 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "removeInternal", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new String[] { "(", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;Z)V" }, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitVarInsn(INSN_CONST_4, 8, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 12, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 6, 11);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 11);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "next", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 6, 11);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 11);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "prev", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 7, 6);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 11);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 11);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 3, 11);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 6, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 7, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l2, 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "last", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "removeInternal", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new int[] { 10, 0, 9 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 11);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 1, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 11);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 11);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 5, 4);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "parent", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 0, 4);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 11);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "height", "I", 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 10, 11, 0 });
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "first", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l1);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 10, 11, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "left", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 11);
		Label l8 = new Label();
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "rebalance", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new int[] { 10, 3, 9 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 6, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 6, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 6, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/LinkedTreeMap;", "modCount", "I", 6, 10);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l7);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 10, 11, 4 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "right", "Lcom/google/gson/internal/LinkedTreeMap$Node;", 8, 11);
		mv.visitJumpInsn(INSN_GOTO, l8, 0, 0);
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "replaceInParent", "VLcom/google/gson/internal/LinkedTreeMap$Node;Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 10, 11, 8 });
		mv.visitJumpInsn(INSN_GOTO, l8, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "removeInternalByKey", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")", "Lcom/google/gson/internal/LinkedTreeMap$Node", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "findByObject", "Lcom/google/gson/internal/LinkedTreeMap$Node;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "removeInternal", "VLcom/google/gson/internal/LinkedTreeMap$Node;Z", new int[] { 2, 0, 1 });
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "size", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/LinkedTreeMap;", "size", "I", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpObjectConstructor(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/internal/ObjectConstructor;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lcom/google/gson/internal/ObjectConstructor;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("ObjectConstructor.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpPrimitives(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/Primitives;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/Primitives;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Primitives.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PRIMITIVE_TO_WRAPPER_TYPE", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "WRAPPER_TO_PRIMITIVE_TYPE", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 16);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "VI", new int[] { 0, 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "VI", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Boolean;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Boolean;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Byte;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Byte;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Character;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Character;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Double;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Float;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Integer;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Integer;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Long;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Long;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Short;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Short;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Void;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Void;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "unmodifiableMap", "Ljava/util/Map;Ljava/util/Map;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/Primitives;", "PRIMITIVE_TO_WRAPPER_TYPE", "Ljava/util/Map;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "unmodifiableMap", "Ljava/util/Map;Ljava/util/Map;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/Primitives;", "WRAPPER_TO_PRIMITIVE_TYPE", "Ljava/util/Map;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "add", "VLjava/util/Map;Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;>;", "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;>;", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 3, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isPrimitive", "ZLjava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/Primitives;", "PRIMITIVE_TO_WRAPPER_TYPE", "Ljava/util/Map;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "containsKey", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isWrapperType", "ZLjava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/Primitives;", "WRAPPER_TO_PRIMITIVE_TYPE", "Ljava/util/Map;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "containsKey", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "unwrap", "Ljava/lang/Class;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)", "Ljava/lang/Class", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/Primitives;", "WRAPPER_TO_PRIMITIVE_TYPE", "Ljava/util/Map;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "wrap", "Ljava/lang/Class;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)", "Ljava/lang/Class", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/Primitives;", "PRIMITIVE_TO_WRAPPER_TYPE", "Ljava/util/Map;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpStreams$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lcom/google/gson/internal/Streams$1;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lcom/google/gson/internal/Streams$1;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Streams.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/Streams$1;", "Lcom/google/gson/internal/Streams;", null, ACC_STATIC + ACC_SYNTHETIC);
	cv.visitEnd();
}

public static void dumpStreams$AppendableWriter$CurrentWrite(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/CharSequence;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/CharSequence;" });
	cv.visitSource("Streams.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "Lcom/google/gson/internal/Streams$AppendableWriter;", "CurrentWrite", ACC_STATIC);
	{
		fv = cv.visitField(0, "chars", "[C", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "charAt", "CI", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "chars", "[C", 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 0, 0, 2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "length", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "chars", "[C", 0, 1);
		mv.visitArrayLengthInsn(0, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "subSequence", "Ljava/lang/CharSequence;II", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "chars", "[C", 1, 3);
		mv.visitOperationInsn(INSN_SUB_INT, 2, 5, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 0, 1, 4, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpStreams$AppendableWriter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/Streams$AppendableWriter;", null, "Ljava/io/Writer;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/Streams$AppendableWriter;", null, "Ljava/io/Writer;", null);
	cv.visitSource("Streams.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/Streams$AppendableWriter;", "Lcom/google/gson/internal/Streams;", "AppendableWriter", ACC_PRIVATE + ACC_STATIC + ACC_FINAL);
	cv.visitMemberClass("Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "Lcom/google/gson/internal/Streams$AppendableWriter;", "CurrentWrite");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "appendable", "Ljava/lang/Appendable;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "currentWrite", "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Appendable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/Writer;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "currentWrite", "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "appendable", "Ljava/lang/Appendable;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Appendable;Lcom/google/gson/internal/Streams$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "<init>", "VLjava/lang/Appendable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "flush", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VI", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "appendable", "Ljava/lang/Appendable;", 0, 2);
		mv.visitOperationInsn(INSN_INT_TO_CHAR, 1, 3, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Appendable;", "append", "Ljava/lang/Appendable;C", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "V[CII", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "currentWrite", "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", 0, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", "chars", "[C", 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "appendable", "Ljava/lang/Appendable;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "currentWrite", "Lcom/google/gson/internal/Streams$AppendableWriter$CurrentWrite;", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT, 2, 5, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Appendable;", "append", "Ljava/lang/Appendable;Ljava/lang/CharSequence;II", new int[] { 0, 1, 5, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpStreams(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/Streams;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/Streams;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Streams.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/Streams$1;", "Lcom/google/gson/internal/Streams;", "1");
	cv.visitMemberClass("Lcom/google/gson/internal/Streams$AppendableWriter;", "Lcom/google/gson/internal/Streams;", "AppendableWriter");
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "parse", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/EOFException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Lcom/google/gson/stream/MalformedJsonException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/io/IOException;");
		Label l5 = new Label();
		mv.visitTryCatchBlock(l0, l1, l5, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "JSON_ELEMENT", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lcom/google/gson/JsonElement;");
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "write", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "JSON_ELEMENT", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 2, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "writerForAppendable", "Ljava/io/Writer;Ljava/lang/Appendable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/io/Writer;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/io/Writer;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/Streams$AppendableWriter;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Streams$AppendableWriter;", "<init>", "VLjava/lang/Appendable;Lcom/google/gson/internal/Streams$1;", new int[] { 0, 2, 1 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpUnsafeAllocator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/internal/UnsafeAllocator;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lcom/google/gson/internal/UnsafeAllocator;", null, "Ljava/lang/Object;", null);
	cv.visitSource("UnsafeAllocator.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "create", "Lcom/google/gson/internal/UnsafeAllocator;", null, null);
		mv.visitCode();
		mv.visitMaxs(12, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 7, "sun.misc.Unsafe");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Class;", "forName", "Ljava/lang/Class;Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "theUnsafe");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredField", "Ljava/lang/reflect/Field;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "setAccessible", "VZ", new int[] { 2, 7 });
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "allocateInstance");
		mv.visitVarInsn(INSN_CONST_4, 8, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 8, 0, 8, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 10, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 10, 8, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 6, 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Lcom/google/gson/internal/UnsafeAllocator$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator$1;", "<init>", "VLjava/lang/reflect/Method;Ljava/lang/Object;", new int[] { 7, 0, 5 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 7);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l3, l4, l5, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Ljava/io/ObjectInputStream;");
		mv.visitStringInsn(INSN_CONST_STRING, 8, "newInstance");
		mv.visitVarInsn(INSN_CONST_4, 9, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 9, 0, 9, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 10, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 11, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 11, 9, 10);
		mv.visitVarInsn(INSN_CONST_4, 10, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 11, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 11, 9, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 7, 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "setAccessible", "VZ", new int[] { 4, 7 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Lcom/google/gson/internal/UnsafeAllocator$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator$2;", "<init>", "VLjava/lang/reflect/Method;", new int[] { 7, 4 });
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 7);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l6, l7, l8, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Ljava/io/ObjectStreamClass;");
		mv.visitStringInsn(INSN_CONST_STRING, 8, "getConstructorId");
		mv.visitVarInsn(INSN_CONST_4, 9, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 9, 0, 9, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 10, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 11, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 11, 9, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 7, 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "setAccessible", "VZ", new int[] { 3, 7 });
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitVarInsn(INSN_CONST_4, 8, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 8, 0, 8, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 10, 0, 0, "Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 10, 8, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 3, 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/Integer;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Integer;", "intValue", "I", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Ljava/io/ObjectStreamClass;");
		mv.visitStringInsn(INSN_CONST_STRING, 8, "newInstance");
		mv.visitVarInsn(INSN_CONST_4, 9, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 9, 0, 9, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 10, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 11, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 11, 9, 10);
		mv.visitVarInsn(INSN_CONST_4, 10, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Integer;", "TYPE", "Ljava/lang/Class;", 11, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 11, 9, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 7, 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "setAccessible", "VZ", new int[] { 4, 7 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Lcom/google/gson/internal/UnsafeAllocator$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator$3;", "<init>", "VLjava/lang/reflect/Method;I", new int[] { 7, 4, 1 });
		mv.visitLabel(l7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 7);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Lcom/google/gson/internal/UnsafeAllocator$4;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator$4;", "<init>", "V", new int[] { 7 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "newInstance", "Ljava/lang/Object;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Ljava/lang/Exception;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonTreeReader$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeReader$1;", null, "Ljava/io/Reader;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeReader$1;", null, "Ljava/io/Reader;", null);
	cv.visitSource("JsonTreeReader.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/JsonTreeReader$1;", "Lcom/google/gson/internal/bind/JsonTreeReader;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/Reader;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "I[CII", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonTreeWriter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeWriter$1;", null, "Ljava/io/Writer;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeWriter$1;", null, "Ljava/io/Writer;", null);
	cv.visitSource("JsonTreeWriter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/JsonTreeWriter$1;", "Lcom/google/gson/internal/bind/JsonTreeWriter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/Writer;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "flush", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "V[CII", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpObjectTypeAdapter$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ObjectTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", null, ACC_STATIC + ACC_SYNTHETIC);
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$SwitchMap$com$google$gson$stream$JsonToken", "[I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonToken;", "values", "[Lcom/google/gson/stream/JsonToken;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[I");
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l1);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l1, l3, l4, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 2);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l3);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l3, l5, l6, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 3);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l5);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l5, l7, l8, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 4);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l7);
		Label l9 = new Label();
		Label l10 = new Label();
		mv.visitTryCatchBlock(l7, l9, l10, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 5);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l9);
		Label l11 = new Label();
		Label l12 = new Label();
		mv.visitTryCatchBlock(l9, l11, l12, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 6);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l11);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l10);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpReflectiveTypeAdapterFactory$BoundField(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_ABSTRACT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_ABSTRACT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ReflectiveTypeAdapterFactory.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "BoundField", ACC_STATIC + ACC_ABSTRACT);
	{
		fv = cv.visitField(ACC_FINAL, "deserialized", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "name", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "serialized", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;ZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "name", "Ljava/lang/String;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "serialized", "Z", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "deserialized", "Z", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_ABSTRACT, "read", "VLcom/google/gson/stream/JsonReader;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_ABSTRACT, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$32(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lcom/google/gson/internal/bind/TypeAdapters$32;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lcom/google/gson/internal/bind/TypeAdapters$32;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$32;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC + ACC_SYNTHETIC);
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$SwitchMap$com$google$gson$stream$JsonToken", "[I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonToken;", "values", "[Lcom/google/gson/stream/JsonToken;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[I");
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l1);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l1, l3, l4, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 2);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l3);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l3, l5, l6, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 3);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l5);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l5, l7, l8, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 4);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l7);
		Label l9 = new Label();
		Label l10 = new Label();
		mv.visitTryCatchBlock(l7, l9, l10, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 5);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l9);
		Label l11 = new Label();
		Label l12 = new Label();
		mv.visitTryCatchBlock(l9, l11, l12, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 6);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l11);
		Label l13 = new Label();
		Label l14 = new Label();
		mv.visitTryCatchBlock(l11, l13, l14, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 7);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l13);
		Label l15 = new Label();
		Label l16 = new Label();
		mv.visitTryCatchBlock(l13, l15, l16, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_16, 2, 8);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l15);
		Label l17 = new Label();
		Label l18 = new Label();
		mv.visitTryCatchBlock(l15, l17, l18, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_16, 2, 9);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l17);
		Label l19 = new Label();
		Label l20 = new Label();
		mv.visitTryCatchBlock(l17, l19, l20, "Ljava/lang/NoSuchFieldError;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_16, 2, 10);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		mv.visitLabel(l19);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l20);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l19, 0, 0);
		mv.visitLabel(l18);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l17, 0, 0);
		mv.visitLabel(l16);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l15, 0, 0);
		mv.visitLabel(l14);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l13, 0, 0);
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l10);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/bind/TypeAdapters$32;", "Lcom/google/gson/internal/bind/TypeAdapters;", "32");
	cv.visitMemberClass("Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "Lcom/google/gson/internal/bind/TypeAdapters;", "EnumTypeAdapter");
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BIG_DECIMAL", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/math/BigDecimal;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BIG_INTEGER", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/math/BigInteger;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BIT_SET", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/BitSet;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BIT_SET_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BOOLEAN", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Boolean;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BOOLEAN_AS_STRING", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Boolean;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BOOLEAN_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BYTE", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "BYTE_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "CALENDAR", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Calendar;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "CALENDAR_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "CHARACTER", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Character;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "CHARACTER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "CLASS", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Class;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "CLASS_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "DOUBLE", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "ENUM_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FLOAT", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "INET_ADDRESS", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/InetAddress;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "INET_ADDRESS_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "INTEGER", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "INTEGER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "JSON_ELEMENT", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Lcom/google/gson/JsonElement;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "JSON_ELEMENT_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "LOCALE", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Locale;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "LOCALE_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "LONG", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "NUMBER", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "NUMBER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "SHORT", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "SHORT_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STRING", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/String;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STRING_BUFFER", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/StringBuffer;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STRING_BUFFER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STRING_BUILDER", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/StringBuilder;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STRING_BUILDER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STRING_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "TIMESTAMP_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "URI", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/URI;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "URI_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "URL", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/URL;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "URL_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "UUID", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/UUID;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "UUID_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CLASS", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/Class;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CLASS", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CLASS_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$2;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIT_SET", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/BitSet;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIT_SET", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIT_SET_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$3;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BOOLEAN", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$4;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$4;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BOOLEAN_AS_STRING", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Boolean;", "TYPE", "Ljava/lang/Class;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Boolean;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BOOLEAN", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BOOLEAN_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$5;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$5;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BYTE", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Byte;", "TYPE", "Ljava/lang/Class;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Byte;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BYTE", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BYTE_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$6;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$6;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "SHORT", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Short;", "TYPE", "Ljava/lang/Class;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Short;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "SHORT", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "SHORT_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$7;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$7;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INTEGER", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Integer;", "TYPE", "Ljava/lang/Class;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Integer;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INTEGER", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INTEGER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$8;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$8;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "LONG", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$9;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$9;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "FLOAT", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$10;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$10;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "DOUBLE", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$11;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$11;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "NUMBER", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/Number;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "NUMBER", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "NUMBER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$12;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$12;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CHARACTER", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Character;", "TYPE", "Ljava/lang/Class;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Character;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CHARACTER", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CHARACTER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$13;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$13;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$14;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$14;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIG_DECIMAL", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$15;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$15;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BIG_INTEGER", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$16;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$16;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUILDER", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUILDER", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUILDER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$17;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$17;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUFFER", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/StringBuffer;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUFFER", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "STRING_BUFFER_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$18;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$18;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URL", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/net/URL;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URL", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URL_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$19;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$19;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URI", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/net/URI;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URI", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "URI_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$20;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$20;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INET_ADDRESS", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/net/InetAddress;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INET_ADDRESS", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "INET_ADDRESS_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$21;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$21;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "UUID", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/UUID;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "UUID", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "UUID_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$22;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$22;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "TIMESTAMP_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$23;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$23;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CALENDAR", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/Calendar;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/GregorianCalendar;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CALENDAR", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactoryForMultipleTypes", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "CALENDAR_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$24;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$24;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "LOCALE", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/util/Locale;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "LOCALE", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "LOCALE_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$25;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "JSON_ELEMENT", "Lcom/google/gson/TypeAdapter;", 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "JSON_ELEMENT", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "JSON_ELEMENT_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/TypeAdapters;", "newEnumTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "ENUM_FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newEnumTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$26;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$26;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapter;", new String[] { "<TT:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/reflect/TypeToken", "<TTT;>;", "Lcom/google/gson/TypeAdapter", "<TTT;>;)", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$27;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$27;", "<init>", "VLcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new String[] { "<TT:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TTT;>;", "Lcom/google/gson/TypeAdapter", "<TTT;>;)", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$28;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "<init>", "VLjava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new String[] { "<TT:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TTT;>;", "Ljava/lang/Class", "<TTT;>;", "Lcom/google/gson/TypeAdapter", "<-TTT;>;)", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$29;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "<init>", "VLjava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newFactoryForMultipleTypes", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new String[] { "<TT:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TTT;>;", "Ljava/lang/Class", "<+TTT;>;", "Lcom/google/gson/TypeAdapter", "<-TTT;>;)", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$30;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "<init>", "VLjava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", new String[] { "<TT:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TTT;>;", "Lcom/google/gson/TypeAdapter", "<TTT;>;)", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$31;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "<init>", "VLjava/lang/Class;Lcom/google/gson/TypeAdapter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeToken(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("TypeToken.java", null);
	{
		fv = cv.visitField(ACC_FINAL, "hashCode", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "rawType", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<-TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "type", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "getSuperclassTypeParameter", "Ljava/lang/reflect/Type;Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "rawType", "Ljava/lang/Class;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/reflect/TypeToken;", "hashCode", "I", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkNotNull", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Type;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "rawType", "Ljava/lang/Class;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/reflect/TypeToken;", "hashCode", "I", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_TRANSIENT, "buildUnexpectedTypeError", "Ljava/lang/AssertionError;Ljava/lang/reflect/Type;[Ljava/lang/Class;", new String[] { "(", "Ljava/lang/reflect/Type;", "[", "Ljava/lang/Class", "<*>;)", "Ljava/lang/AssertionError;" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Unexpected type. Expected one of: ");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "VLjava/lang/String;", new int[] { 2, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 8);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 6, ", ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "but got: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 6, ", for type token: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitVarInsn(INSN_CONST_16, 6, 46);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 5, 6 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)", "Lcom/google/gson/reflect/TypeToken", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/reflect/TypeToken;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/reflect/TypeToken;", "<init>", "VLjava/lang/reflect/Type;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new String[] { "(", "Ljava/lang/reflect/Type;", ")", "Lcom/google/gson/reflect/TypeToken", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/reflect/TypeToken;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/reflect/TypeToken;", "<init>", "VLjava/lang/reflect/Type;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "getSuperclassTypeParameter", "Ljava/lang/reflect/Type;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/lang/reflect/Type;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericSuperclass", "Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 1, 0, "Ljava/lang/Class;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Missing type parameter.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "canonicalize", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/GenericArrayType;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 4, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 3);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 4, 0, "Ljava/lang/Class;");
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isArray", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getComponentType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/reflect/ParameterizedType;", "Ljava/util/Map", "<", "Ljava/lang/String;", "Ljava/lang/reflect/Type;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(19, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 16, 0);
		mv.visitVarInsn(INSN_CONST_4, 15, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 15);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 16);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 15);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 15, 0);
		mv.visitVarInsn(INSN_CONST_4, 15, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 16 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 16);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 15, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 15, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 9, 16);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 9, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getTypeParameters", "[Ljava/lang/reflect/TypeVariable;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitArrayLengthInsn(15, 11);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l6, 5, 15);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 11, 5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 14, 12, 5);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 15, 2, 0, "Ljava/lang/reflect/TypeVariable;");
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 15, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 13, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 13, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getName", "Ljava/lang/String;", new int[] { 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 15);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/Type;");
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getName", "Ljava/lang/String;", new int[] { 14 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 15);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 15, 2 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 18);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "typeEquals", "ZLjava/lang/reflect/ParameterizedType;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new int[] { 9, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 15);
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 15, 0);
		mv.visitVarInsn(INSN_CONST_4, 15, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericInterfaces", "[Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayLengthInsn(8, 3);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		Label l9 = new Label();
		mv.visitLabel(l9);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l10, 6, 8);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 7, 3, 6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 15, 0, 0, "Ljava/util/HashMap;");
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "VLjava/util/Map;", new int[] { 15, 0 });
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new int[] { 7, 0, 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 15);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l11, 15, 0);
		mv.visitVarInsn(INSN_CONST_4, 15, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getGenericSuperclass", "Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 15, 0, 0, "Ljava/util/HashMap;");
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "VLjava/util/Map;", new int[] { 15, 0 });
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new int[] { 10, 0, 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 15);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "matches", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/util/Map;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/lang/reflect/Type;", "Ljava/util/Map", "<", "Ljava/lang/String;", "Ljava/lang/reflect/Type;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 1, 0, "Ljava/lang/reflect/TypeVariable;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/TypeVariable;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "typeEquals", "ZLjava/lang/reflect/ParameterizedType;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new String[] { "(", "Ljava/lang/reflect/ParameterizedType;", "Ljava/lang/reflect/ParameterizedType;", "Ljava/util/Map", "<", "Ljava/lang/String;", "Ljava/lang/reflect/Type;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getRawType", "Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitArrayLengthInsn(4, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l2, 1, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 5, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "matches", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/util/Map;", new int[] { 4, 5, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 4, 0);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN, 3);
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lcom/google/gson/reflect/TypeToken;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/reflect/TypeToken;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "equals", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "getRawType", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<-TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "rawType", "Ljava/lang/Class;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "getType", "Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/reflect/TypeToken;", "hashCode", "I", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isAssignableFrom", "ZLcom/google/gson/reflect/TypeToken;", new String[] { "(", "Lcom/google/gson/reflect/TypeToken", "<*>;)Z" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isAssignableFrom", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isAssignableFrom", "ZLjava/lang/reflect/Type;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 0, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/Class;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "rawType", "Ljava/lang/Class;", 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;", new int[] { 6, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "rawType", "Ljava/lang/Class;", 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "isAssignableFrom", "ZLjava/lang/reflect/Type;Ljava/lang/reflect/GenericArrayType;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 0, 1);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_MOVE, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_MOVE, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 5);
		mv.visitVarInsn(INSN_CONST_4, 3, 3);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Class;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 3, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "buildUnexpectedTypeError", "Ljava/lang/AssertionError;Ljava/lang/reflect/Type;[Ljava/lang/Class;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/reflect/TypeToken;", "type", "Ljava/lang/reflect/Type;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "typeToString", "Ljava/lang/String;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonReader(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/google/gson/stream/JsonReader;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Closeable;" });
	cv.visit(0, ACC_PUBLIC, "Lcom/google/gson/stream/JsonReader;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Closeable;" });
	cv.visitSource("JsonReader.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "MIN_INCOMPLETE_INTEGER", "J", null, -922337203685477580L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NON_EXECUTE_PREFIX", "[C", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_DECIMAL", "I", null, 3);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_DIGIT", "I", null, 2);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_EXP_DIGIT", "I", null, 7);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_EXP_E", "I", null, 5);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_EXP_SIGN", "I", null, 6);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_FRACTION_DIGIT", "I", null, 4);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_NONE", "I", null, 0);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NUMBER_CHAR_SIGN", "I", null, 1);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_BEGIN_ARRAY", "I", null, 3);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_BEGIN_OBJECT", "I", null, 1);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_BUFFERED", "I", null, 11);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_DOUBLE_QUOTED", "I", null, 9);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_DOUBLE_QUOTED_NAME", "I", null, 13);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_END_ARRAY", "I", null, 4);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_END_OBJECT", "I", null, 2);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_EOF", "I", null, 17);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_FALSE", "I", null, 6);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_LONG", "I", null, 15);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_NONE", "I", null, 0);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_NULL", "I", null, 7);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_NUMBER", "I", null, 16);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_SINGLE_QUOTED", "I", null, 8);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_SINGLE_QUOTED_NAME", "I", null, 12);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_TRUE", "I", null, 5);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_UNQUOTED", "I", null, 10);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PEEKED_UNQUOTED_NAME", "I", null, 14);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "buffer", "[C", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "in", "Ljava/io/Reader;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "lenient", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "limit", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "lineNumber", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "lineStart", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "peeked", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "peekedLong", "J", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "peekedNumberLength", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "peekedString", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "pos", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "stack", "[I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "stackSize", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, ")]}'\n");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "toCharArray", "[C", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "NON_EXECUTE_PREFIX", "[C", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonReader$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/JsonReaderInternalAccess;", "INSTANCE", "Lcom/google/gson/internal/JsonReaderInternalAccess;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/Reader;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 3 });
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/stream/JsonReader;", "lenient", "Z", 1, 3);
		mv.visitVarInsn(INSN_CONST_16, 0, 1024);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[C");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 0, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 1, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 1, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 1, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 3);
		mv.visitVarInsn(INSN_CONST_16, 0, 32);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[I");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 0, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 0, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 3);
		mv.visitVarInsn(INSN_CONST_4, 2, 6);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/NullPointerException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "in == null");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NullPointerException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "in", "Ljava/io/Reader;", 4, 3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "ILcom/google/gson/stream/JsonReader;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$002", "ILcom/google/gson/stream/JsonReader;I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 0);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "ILcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$200", "ILcom/google/gson/stream/JsonReader;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$300", "ILcom/google/gson/stream/JsonReader;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "checkLenient", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonReader;", "lenient", "Z", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Use JsonReader.setLenient(true) to accept malformed JSON");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "consumeNonExecutePrefix", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 3, 1 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "NON_EXECUTE_PREFIX", "[C", 2, 0);
		mv.visitArrayLengthInsn(2, 2);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l0, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "NON_EXECUTE_PREFIX", "[C", 1, 0);
		mv.visitArrayLengthInsn(1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "NON_EXECUTE_PREFIX", "[C", 1, 0);
		mv.visitArrayLengthInsn(1, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 2, 2, 0, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 1, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "NON_EXECUTE_PREFIX", "[C", 2, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 2, 2, 0);
		mv.visitJumpInsn(INSN_IF_NE, l1, 1, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "NON_EXECUTE_PREFIX", "[C", 2, 0);
		mv.visitArrayLengthInsn(2, 2);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "doPeek", "I", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 7);
		mv.visitVarInsn(INSN_CONST_4, 8, 5);
		mv.visitVarInsn(INSN_CONST_4, 2, 4);
		mv.visitVarInsn(INSN_CONST_4, 3, 2);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 6, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 7, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitArrayOperationInsn(INSN_AGET, 1, 6, 7);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 6, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 7, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitArrayOperationInsn(INSN_APUT, 3, 6, 7);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitLookupSwitchInsn(0, l2, new int[] { 34, 39, 44, 59, 91, 93, 123 }, new Label[] { l3, l4, l5, l5, l6, l7, l8 });
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 3, 9);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l9, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "peekKeyword", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l10, 2, 0);
		Label l11 = new Label();
		mv.visitLabel(l11);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l12, 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l13 = new Label();
		Label l14 = new Label();
		Label l15 = new Label();
		mv.visitLookupSwitchInsn(0, l13, new int[] { 44, 59, 93 }, new Label[] { l1, l14, l15 });
		mv.visitLabel(l13);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Unterminated array");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l15);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l14);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l12);
		mv.visitVarInsn(INSN_CONST_4, 6, 3);
		Label l16 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l16, 1, 6);
		Label l17 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l17, 1, 8);
		mv.visitLabel(l16);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 5, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 6, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, -1);
		mv.visitArrayOperationInsn(INSN_APUT, 2, 5, 6);
		Label l18 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l18, 1, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l19 = new Label();
		Label l20 = new Label();
		Label l21 = new Label();
		mv.visitLookupSwitchInsn(0, l19, new int[] { 44, 59, 125 }, new Label[] { l18, l20, l21 });
		mv.visitLabel(l19);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Unterminated object");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l21);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 3, 9);
		mv.visitVarInsn(INSN_MOVE, 2, 3);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l20);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitLabel(l18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l22 = new Label();
		Label l23 = new Label();
		Label l24 = new Label();
		Label l25 = new Label();
		mv.visitLookupSwitchInsn(0, l22, new int[] { 34, 39, 125 }, new Label[] { l23, l24, l25 });
		mv.visitLabel(l22);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitOperationInsn(INSN_INT_TO_CHAR, 3, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "isLiteral", "ZC", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l26 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l26, 3, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 14);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l23);
		mv.visitVarInsn(INSN_CONST_16, 2, 13);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l24);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitVarInsn(INSN_CONST_16, 2, 12);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l25);
		Label l27 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l27, 1, 8);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 3, 9);
		mv.visitVarInsn(INSN_MOVE, 2, 3);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l27);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected name");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l26);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected name");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l17);
		Label l28 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l28, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 6, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 7, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitArrayOperationInsn(INSN_APUT, 8, 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l29 = new Label();
		Label l30 = new Label();
		mv.visitTableSwitchInsn(0, 58, 61, l29, new Label[] { l1, l29, l29, l30 });
		mv.visitLabel(l29);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected ':'");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l30);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 7, 9);
		Label l31 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l31, 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 6, 0);
		mv.visitLabel(l31);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 6, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 9);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 6, 6, 7);
		mv.visitVarInsn(INSN_CONST_16, 7, 62);
		mv.visitJumpInsn(INSN_IF_NE, l1, 6, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l28);
		mv.visitVarInsn(INSN_CONST_4, 6, 6);
		Label l32 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l32, 1, 6);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonReader;", "lenient", "Z", 6, 9);
		Label l33 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l33, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "consumeNonExecutePrefix", "V", new int[] { 9 });
		mv.visitLabel(l33);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 6, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 7, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitArrayOperationInsn(INSN_APUT, 5, 6, 7);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l32);
		Label l34 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l34, 1, 5);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextNonWhitespace", "IZ", new int[] { 9, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, -1);
		Label l35 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l35, 0, 6);
		mv.visitVarInsn(INSN_CONST_16, 2, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l35);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l34);
		mv.visitVarInsn(INSN_CONST_16, 6, 8);
		mv.visitJumpInsn(INSN_IF_NE, l1, 1, 6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "JsonReader is closed");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l7);
		mv.visitJumpInsn(INSN_IF_NE, l5, 1, 4);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l5);
		Label l36 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l36, 1, 4);
		Label l37 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l37, 1, 3);
		mv.visitLabel(l36);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 5, 9);
		mv.visitVarInsn(INSN_MOVE, 2, 5);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l37);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Unexpected value");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitVarInsn(INSN_CONST_16, 2, 8);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 3, 9);
		Label l38 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l38, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitLabel(l38);
		mv.visitVarInsn(INSN_CONST_16, 2, 9);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 2, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l8);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 4, 9);
		mv.visitVarInsn(INSN_MOVE, 2, 4);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "peekNumber", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l11, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 3, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 9);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 3, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "isLiteral", "ZC", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l39 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l39, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected value");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l39);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 9 });
		mv.visitVarInsn(INSN_CONST_16, 2, 10);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l11, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l40 = new Label();
		mv.visitLabel(l40);
		Label l41 = new Label();
		mv.visitLabel(l41);
		Label l42 = new Label();
		mv.visitLabel(l42);
		Label l43 = new Label();
		mv.visitLabel(l43);
		Label l44 = new Label();
		mv.visitLabel(l44);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "fillBuffer", "ZI", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 0, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 7);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 7);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 3, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 7);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "arraycopy", "VLjava/lang/Object;ILjava/lang/Object;II", new int[] { 0, 3, 0, 2, 4 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 7);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "in", "Ljava/io/Reader;", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 4, 7);
		mv.visitArrayLengthInsn(5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 6, 7);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 5, 5, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Reader;", "read", "I[CII", new int[] { 3, 0, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, -1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l3, 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 3, 3, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 3, 7);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 3, 7);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitJumpInsn(INSN_IF_LEZ, l4, 3, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 3, 0, 2);
		mv.visitVarInsn(INSN_CONST, 4, 65279);
		mv.visitJumpInsn(INSN_IF_NE, l4, 3, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 7);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 3, 7);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 3, 7);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 8, 8, 0, 1);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 7);
		mv.visitJumpInsn(INSN_IF_LT, l2, 3, 8);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getColumnNumber", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 0, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 1, 2);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 0, 0, 1, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getLineNumber", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 0, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isLiteral", "ZC", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitLookupSwitchInsn(2, l0, new int[] { 9, 10, 12, 13, 32, 35, 44, 47, 58, 59, 61, 91, 92, 93, 123, 125 }, new Label[] { l1, l1, l1, l1, l1, l2, l1, l2, l1, l2, l2, l1, l2, l1, l1, l1 });
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "nextNonWhitespace", "IZ", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 0, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 10);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 4, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 10);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 10, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 7, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 11, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/io/EOFException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 8 });
		mv.visitStringInsn(INSN_CONST_STRING, 9, "End of input at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitStringInsn(INSN_CONST_STRING, 9, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/EOFException;", "<init>", "VLjava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_THROW, 7);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 10);
		mv.visitLabel(l1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 4, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 1, 0, 4);
		mv.visitVarInsn(INSN_CONST_16, 7, 10);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 1, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 7, 10);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 5, 10);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 7, 32);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l5, 1, 7);
		mv.visitVarInsn(INSN_CONST_16, 7, 13);
		mv.visitJumpInsn(INSN_IF_EQ, l5, 1, 7);
		mv.visitVarInsn(INSN_CONST_16, 7, 9);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l6, 1, 7);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_16, 7, 47);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l7, 1, 7);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 5, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitVarInsn(INSN_CONST_4, 7, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 10, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitJumpInsn(INSN_IF_NEZ, l8, 2, 0);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 10 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 6, 0, 7);
		Label l10 = new Label();
		Label l11 = new Label();
		Label l12 = new Label();
		mv.visitLookupSwitchInsn(6, l10, new int[] { 42, 47 }, new Label[] { l11, l12 });
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l11);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "*/");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "skipTo", "ZLjava/lang/String;", new int[] { 10, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l13 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l13, 7, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Unterminated comment");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 10, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitIntInsn(INSN_THROW, 7);
		mv.visitLabel(l13);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 7, 0, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l0, 0, 0);
		mv.visitLabel(l12);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "skipToEndOfLine", "V", new int[] { 10 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l0, 0, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_CONST_16, 7, 35);
		Label l14 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l14, 1, 7);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 10 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "skipToEndOfLine", "V", new int[] { 10 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l0, 0, 0);
		mv.visitLabel(l14);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 1, -1);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE, 4, 5);
		mv.visitJumpInsn(INSN_GOTO_16, l0, 0, 0);
		Label l15 = new Label();
		mv.visitLabel(l15);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "nextQuotedValue", "Ljava/lang/String;C", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 0, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 8);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 8);
		mv.visitVarInsn(INSN_MOVE, 6, 4);
		mv.visitVarInsn(INSN_MOVE, 5, 4);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l2, 5, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 5, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 2, 0, 5);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 2, 9);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 8);
		mv.visitOperationInsn(INSN_SUB_INT, 7, 4, 6, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;[CII", new int[] { 1, 0, 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 7, 92);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 2, 7);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 8);
		mv.visitOperationInsn(INSN_SUB_INT, 7, 4, 6, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;[CII", new int[] { 1, 0, 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "readEscapeCharacter", "C", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 1, 7 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 8);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 3, 8);
		mv.visitVarInsn(INSN_MOVE, 6, 4);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE, 5, 4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 7, 10);
		mv.visitJumpInsn(INSN_IF_NE, l5, 2, 7);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 7, 8);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 7, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 7, 8);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 4, 8);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_SUB_INT, 7, 5, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;[CII", new int[] { 1, 0, 6, 7 });
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 8);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 8, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 7, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Unterminated string");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 8, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitIntInsn(INSN_THROW, 7);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "nextUnquotedValue", "Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 3, 3, 1, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 4, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 4, 4, 1, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 3, 3, 4);
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitLookupSwitchInsn(3, l2, new int[] { 9, 10, 12, 13, 32, 35, 44, 47, 58, 59, 61, 91, 92, 93, 123, 125 }, new Label[] { l3, l3, l3, l3, l3, l4, l3, l4, l3, l4, l4, l3, l4, l3, l3, l3 });
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 5 });
		mv.visitLabel(l3);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 2, 3, 4, 1 });
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 3, 3, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 3, 5);
		mv.visitArrayLengthInsn(3, 3);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l7, 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 1, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 5, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l7);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l8, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitLabel(l8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;[CII", new int[] { 0, 3, 4, 1 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 3, 3, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 5);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 5, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;[CII", new int[] { 0, 3, 4, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "peekKeyword", "I", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 7, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 8, 9);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 0, 7, 8);
		mv.visitVarInsn(INSN_CONST_16, 7, 116);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 7);
		mv.visitVarInsn(INSN_CONST_16, 7, 84);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 7);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "true");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "TRUE");
		mv.visitVarInsn(INSN_CONST_4, 5, 5);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l4, 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 9);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 7, 7, 1, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 8, 9);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l5, 7, 8);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 1, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 9, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 7, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_RETURN, 5);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_16, 7, 102);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l7, 0, 7);
		mv.visitVarInsn(INSN_CONST_16, 7, 70);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 0, 7);
		mv.visitLabel(l7);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "false");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "FALSE");
		mv.visitVarInsn(INSN_CONST_4, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_16, 7, 110);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l9, 0, 7);
		mv.visitVarInsn(INSN_CONST_16, 7, 78);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l10, 0, 7);
		mv.visitLabel(l9);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "null");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "NULL");
		mv.visitVarInsn(INSN_CONST_4, 5, 7);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 7, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 8, 9);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 8, 8, 1, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 0, 7, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l11, 0, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_EQ, l11, 0, 7);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 9);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 7, 7, 4, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 8, 9);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l12, 7, 8);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 9, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l13 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l13, 7, 0);
		mv.visitLabel(l12);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 7, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 8, 9);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 8, 8, 4, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 7, 7, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "isLiteral", "ZC", new int[] { 9, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_EQZ, l13, 7, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l13);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 6, 6, 4, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 9);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 5, 9);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "peekNumber", "I", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(18, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 1, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 10, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 5, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 11, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitOperationInsn(INSN_ADD_INT, 13, 10, 4, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 13, 5);
		mv.visitArrayLengthInsn(13, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 4, 13);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 13);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 13, 4, 0, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 0, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 13);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 13, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 13, 2);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l6, 6, 13);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 3, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_HIGH16, 13, -9223372036854775808L);
		mv.visitOperationInsn(INSN_CMP_LONG, 13, 11, 13, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l7, 13, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 7, 0);
		mv.visitLabel(l7);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 7, 0);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 11, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 13, 0);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 13, 13, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 13, 0);
		mv.visitVarInsn(INSN_CONST_16, 13, 15);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 10, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 5, 0);
		mv.visitLabel(l1);
		mv.visitOperationInsn(INSN_ADD_INT, 13, 10, 4, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 2, 1, 13);
		Label l10 = new Label();
		Label l11 = new Label();
		Label l12 = new Label();
		Label l13 = new Label();
		Label l14 = new Label();
		mv.visitLookupSwitchInsn(2, l10, new int[] { 43, 45, 46, 69, 101 }, new Label[] { l11, l12, l13, l14, l14 });
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_CONST_16, 13, 48);
		Label l15 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l15, 2, 13);
		mv.visitVarInsn(INSN_CONST_16, 13, 57);
		Label l16 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l16, 2, 13);
		mv.visitLabel(l15);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "isLiteral", "ZC", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 13);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 13, 0);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l12);
		Label l17 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l17, 6, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		Label l18 = new Label();
		mv.visitLabel(l18);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l17);
		mv.visitVarInsn(INSN_CONST_4, 13, 5);
		Label l19 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l19, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 6, 6);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l19);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l11);
		mv.visitVarInsn(INSN_CONST_4, 13, 5);
		Label l20 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l20, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 6, 6);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l20);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l14);
		mv.visitVarInsn(INSN_CONST_4, 13, 2);
		Label l21 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l21, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 13, 4);
		Label l22 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l22, 6, 13);
		mv.visitLabel(l21);
		mv.visitVarInsn(INSN_CONST_4, 6, 5);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l22);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l13);
		mv.visitVarInsn(INSN_CONST_4, 13, 2);
		Label l23 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l23, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 6, 3);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l23);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l16);
		mv.visitVarInsn(INSN_CONST_4, 13, 1);
		Label l24 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l24, 6, 13);
		Label l25 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l25, 6, 0);
		mv.visitLabel(l24);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 13, 2, 0, -48);
		mv.visitOperationInsn(INSN_NEG_INT, 13, 13, 0, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 11, 13, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 2);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l25);
		mv.visitVarInsn(INSN_CONST_4, 13, 2);
		Label l26 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l26, 6, 13);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 13, 0);
		mv.visitOperationInsn(INSN_CMP_LONG, 13, 11, 13, 0);
		Label l27 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l27, 13, 0);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO_16, l3, 0, 0);
		mv.visitLabel(l27);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 13, 10);
		mv.visitOperationInsn(INSN_MUL_LONG_2ADDR, 13, 13, 11, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 15, 2, 0, -48);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 15, 15, 0, 0);
		mv.visitOperationInsn(INSN_SUB_LONG, 8, 13, 15, 0);
		mv.visitVarInsn(INSN_CONST_WIDE, 13, -922337203685477580L);
		mv.visitOperationInsn(INSN_CMP_LONG, 13, 11, 13, 0);
		Label l28 = new Label();
		mv.visitJumpInsn(INSN_IF_GTZ, l28, 13, 0);
		mv.visitVarInsn(INSN_CONST_WIDE, 13, -922337203685477580L);
		mv.visitOperationInsn(INSN_CMP_LONG, 13, 11, 13, 0);
		Label l29 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l29, 13, 0);
		mv.visitOperationInsn(INSN_CMP_LONG, 13, 8, 11, 0);
		mv.visitJumpInsn(INSN_IF_GEZ, l29, 13, 0);
		mv.visitLabel(l28);
		mv.visitVarInsn(INSN_CONST_4, 13, 1);
		Label l30 = new Label();
		mv.visitLabel(l30);
		mv.visitOperationInsn(INSN_AND_INT_2ADDR, 3, 3, 13, 0);
		mv.visitVarInsn(INSN_MOVE_WIDE, 11, 8);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l29);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO, l30, 0, 0);
		mv.visitLabel(l26);
		mv.visitVarInsn(INSN_CONST_4, 13, 3);
		Label l31 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l31, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 6, 4);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l31);
		mv.visitVarInsn(INSN_CONST_4, 13, 5);
		Label l32 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l32, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 13, 6);
		mv.visitJumpInsn(INSN_IF_NE, l18, 6, 13);
		mv.visitLabel(l32);
		mv.visitVarInsn(INSN_CONST_4, 6, 7);
		mv.visitJumpInsn(INSN_GOTO, l18, 0, 0);
		mv.visitLabel(l8);
		mv.visitOperationInsn(INSN_NEG_LONG, 11, 11, 0, 0);
		mv.visitJumpInsn(INSN_GOTO_16, l9, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 13, 2);
		Label l33 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l33, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 13, 4);
		mv.visitJumpInsn(INSN_IF_EQ, l33, 6, 13);
		mv.visitVarInsn(INSN_CONST_4, 13, 7);
		Label l34 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l34, 6, 13);
		mv.visitLabel(l33);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 4, 0);
		mv.visitVarInsn(INSN_CONST_16, 13, 16);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 13, 0);
		mv.visitJumpInsn(INSN_GOTO_16, l3, 0, 0);
		mv.visitLabel(l34);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitJumpInsn(INSN_GOTO_16, l3, 0, 0);
		Label l35 = new Label();
		mv.visitLabel(l35);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "push", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 2, 4);
		mv.visitArrayLengthInsn(2, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 4);
		mv.visitOperationInsn(INSN_MUL_INT_LIT8, 1, 1, 0, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 1, "[I");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "arraycopy", "VLjava/lang/Object;ILjava/lang/Object;II", new int[] { 1, 3, 0, 3, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 0, 4);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 2, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 3, 4);
		mv.visitArrayOperationInsn(INSN_APUT, 5, 1, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "readEscapeCharacter", "C", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitVarInsn(INSN_CONST_4, 10, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 11);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 6, 11);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 5, 6);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 11, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Unterminated escape sequence");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 11, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 5, 11);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 6, 11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 6, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 11);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 2, 5, 6);
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitLookupSwitchInsn(2, l1, new int[] { 10, 98, 102, 110, 114, 116, 117 }, new Label[] { l2, l3, l4, l5, l6, l7, l8 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 4, 2);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_RETURN, 4);
		mv.visitLabel(l8);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 6, 11);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l10, 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 11, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_NEZ, l10, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Unterminated escape sequence");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 11, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 3, 0, 4);
		Label l11 = new Label();
		mv.visitLabel(l11);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l12, 3, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 5, 11);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 0, 5, 3);
		mv.visitOperationInsn(INSN_SHL_INT_LIT8, 5, 4, 0, 4);
		mv.visitOperationInsn(INSN_INT_TO_CHAR, 4, 5, 0, 0);
		mv.visitVarInsn(INSN_CONST_16, 5, 48);
		Label l13 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l13, 0, 5);
		mv.visitVarInsn(INSN_CONST_16, 5, 57);
		mv.visitJumpInsn(INSN_IF_GT, l13, 0, 5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 0, 0, -48);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 5, 5, 4, 0);
		mv.visitOperationInsn(INSN_INT_TO_CHAR, 4, 5, 0, 0);
		Label l14 = new Label();
		mv.visitLabel(l14);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l13);
		mv.visitVarInsn(INSN_CONST_16, 5, 97);
		Label l15 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l15, 0, 5);
		mv.visitVarInsn(INSN_CONST_16, 5, 102);
		mv.visitJumpInsn(INSN_IF_GT, l15, 0, 5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 0, 0, -97);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 10);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 5, 5, 4, 0);
		mv.visitOperationInsn(INSN_INT_TO_CHAR, 4, 5, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l14, 0, 0);
		mv.visitLabel(l15);
		mv.visitVarInsn(INSN_CONST_16, 5, 65);
		Label l16 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l16, 0, 5);
		mv.visitVarInsn(INSN_CONST_16, 5, 70);
		mv.visitJumpInsn(INSN_IF_GT, l16, 0, 5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 0, 0, -65);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 10);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 5, 5, 4, 0);
		mv.visitOperationInsn(INSN_INT_TO_CHAR, 4, 5, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l14, 0, 0);
		mv.visitLabel(l16);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "\\u");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 8, 11);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 9, 11);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 7, 8, 9, 10 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NumberFormatException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l12);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 4);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 11);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_CONST_16, 4, 9);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 4, 8);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_16, 4, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l9, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_16, 4, 13);
		mv.visitJumpInsn(INSN_GOTO_16, l9, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 4, 12);
		mv.visitJumpInsn(INSN_GOTO_16, l9, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 5, 11);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 5, 11);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 11);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 5, 11);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l17 = new Label();
		mv.visitLabel(l17);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "skipQuotedValue", "VC", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 0, 6);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 6);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 6);
		mv.visitVarInsn(INSN_MOVE, 4, 3);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l2, 4, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 4, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 1, 0, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 1, 7);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 5, 92);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 1, 5);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "readEscapeCharacter", "C", new int[] { 6 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 6);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 6);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE, 4, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 5, 10);
		mv.visitJumpInsn(INSN_IF_NE, l5, 1, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 5, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 5, 6);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 3, 6);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 4, 6);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 6, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Unterminated string");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", new int[] { 6, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "skipTo", "ZLjava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l1, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 1, 1, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 10);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 1, 3);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l6, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 2, 2, 0, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 1, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_NE, l4, 1, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "skipToEndOfLine", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l1, 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 2, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 0, 1, 2);
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 1, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineNumber", "I", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 4);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "lineStart", "I", 1, 4);
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 1, 13);
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "skipUnquotedValue", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 0, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "limit", "I", 2, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l2, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 1, 3);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 2, 2, 0, 0);
		mv.visitArrayOperationInsn(INSN_AGET_CHAR, 1, 1, 2);
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitLookupSwitchInsn(1, l3, new int[] { 9, 10, 12, 13, 32, 35, 44, 47, 58, 59, 61, 91, 92, 93, 123, 125 }, new Label[] { l4, l4, l4, l4, l4, l5, l4, l5, l4, l5, l5, l4, l5, l4, l4, l4 });
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "checkLenient", "V", new int[] { 3 });
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 1, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "fillBuffer", "ZI", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "syntaxError", "Ljava/io/IOException;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/MalformedJsonException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/MalformedJsonException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginArray", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "push", "VI", new int[] { 4, 1 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected BEGIN_ARRAY but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginObject", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "push", "VI", new int[] { 4, 1 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected BEGIN_OBJECT but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "stack", "[I", 0, 3);
		mv.visitVarInsn(INSN_CONST_16, 1, 8);
		mv.visitArrayOperationInsn(INSN_APUT, 1, 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "in", "Ljava/io/Reader;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Reader;", "close", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endArray", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected END_ARRAY but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endObject", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected END_OBJECT but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hasNext", "Z", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 4);
		mv.visitJumpInsn(INSN_IF_EQ, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "isLenient", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonReader;", "lenient", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextBoolean", "Z", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 2, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 2);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 6);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 0, 2);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected a boolean but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextDouble", "D", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_16, 8, 11);
		mv.visitVarInsn(INSN_CONST_16, 4, 8);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 9);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_16, 3, 15);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 3);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 7, 9);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 3, 9);
		mv.visitOperationInsn(INSN_LONG_TO_DOUBLE, 1, 3, 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_WIDE, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_16, 3, 16);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 0, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 4, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 6, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 3, 4, 5, 6 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 3, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 4, 9);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 3, 3, 4, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 9);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 8, 9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 3, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "parseDouble", "DLjava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonReader;", "lenient", "Z", 3, 9);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isInfinite", "ZD", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 3, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/stream/MalformedJsonException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "JSON forbids NaN and infinities: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;D", new int[] { 4, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/MalformedJsonException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l3);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l7, 0, 4);
		mv.visitVarInsn(INSN_CONST_16, 3, 9);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 0, 3);
		mv.visitLabel(l7);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l9, 0, 4);
		mv.visitVarInsn(INSN_CONST_16, 3, 39);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 3, 9);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_CONST_16, 3, 34);
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_16, 3, 10);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l11, 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextUnquotedValue", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 3, 9);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l11);
		mv.visitJumpInsn(INSN_IF_EQ, l4, 0, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Expected a double but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 3, 9);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 7, 9);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextInt", "I", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitVarInsn(INSN_CONST_16, 6, 8);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 10);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_16, 5, 15);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 2, 5);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 5, 10);
		mv.visitOperationInsn(INSN_LONG_TO_INT, 3, 5, 0, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 5, 10);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 7, 3, 0, 0);
		mv.visitOperationInsn(INSN_CMP_LONG, 5, 5, 7, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Expected an int but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 7, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;J", new int[] { 6, 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NumberFormatException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 9, 10);
		mv.visitVarInsn(INSN_MOVE, 4, 3);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 4);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_16, 5, 16);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 2, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 6, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 8, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 5, 6, 7, 8 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 6, 10);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 5, 5, 6, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_16, 5, 11);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 5, 10);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "parseDouble", "DLjava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_DOUBLE_TO_INT, 3, 0, 0, 0);
		mv.visitOperationInsn(INSN_INT_TO_DOUBLE, 5, 3, 0, 0);
		mv.visitOperationInsn(INSN_CMPL_DOUBLE, 5, 5, 0, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Expected an int but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 7, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NumberFormatException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l4);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l7, 2, 6);
		mv.visitVarInsn(INSN_CONST_16, 5, 9);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 2, 5);
		mv.visitLabel(l7);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l9, 2, 6);
		mv.visitVarInsn(INSN_CONST_16, 5, 39);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 10, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		Label l11 = new Label();
		mv.visitLabel(l11);
		Label l12 = new Label();
		Label l13 = new Label();
		mv.visitTryCatchBlock(l11, l12, l13, "Ljava/lang/NumberFormatException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "parseInt", "ILjava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 5, 10);
		mv.visitLabel(l12);
		mv.visitVarInsn(INSN_MOVE, 4, 3);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_CONST_16, 5, 34);
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Expected an int but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 9, 10);
		mv.visitVarInsn(INSN_MOVE, 4, 3);
		mv.visitJumpInsn(INSN_GOTO_16, l3, 0, 0);
		mv.visitLabel(l13);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 5);
		mv.visitJumpInsn(INSN_GOTO_16, l5, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextLong", "J", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitVarInsn(INSN_CONST_16, 6, 8);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 10);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_16, 5, 15);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 2, 5);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 9, 10);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 3, 10);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_WIDE, 3);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_16, 5, 16);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 2, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 6, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 7, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 8, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 5, 6, 7, 8 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 6, 10);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 5, 5, 6, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 5, 10);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 5, 11);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 5, 10);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "parseDouble", "DLjava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_DOUBLE_TO_LONG, 3, 0, 0, 0);
		mv.visitOperationInsn(INSN_LONG_TO_DOUBLE, 5, 3, 0, 0);
		mv.visitOperationInsn(INSN_CMPL_DOUBLE, 5, 5, 0, 0);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Expected a long but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 7, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NumberFormatException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l3);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l6, 2, 6);
		mv.visitVarInsn(INSN_CONST_16, 5, 9);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l7, 2, 5);
		mv.visitLabel(l6);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 2, 6);
		mv.visitVarInsn(INSN_CONST_16, 5, 39);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 10, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		Label l10 = new Label();
		mv.visitLabel(l10);
		Label l11 = new Label();
		Label l12 = new Label();
		mv.visitTryCatchBlock(l10, l11, l12, "Ljava/lang/NumberFormatException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "parseLong", "JLjava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 3);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 5, 10);
		mv.visitLabel(l11);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 5);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_16, 5, 34);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Expected a long but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 5, 10);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 9, 10);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextName", "Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_16, 2, 14);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextUnquotedValue", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_16, 2, 12);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 39);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 2, 13);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 34);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Expected a name but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextNull", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 7);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected null but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextString", "Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_16, 2, 10);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextUnquotedValue", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_16, 2, 8);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 39);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 2, 9);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 34);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "nextQuotedValue", "Ljava/lang/String;C", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 2, 11);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l5, 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 1, 5);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonReader;", "peekedString", "Ljava/lang/String;", 2, 5);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_16, 2, 15);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l6, 0, 2);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/stream/JsonReader;", "peekedLong", "J", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "toString", "Ljava/lang/String;J", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_16, 2, 16);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l7, 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/String;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonReader;", "buffer", "[C", 2, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/String;", "<init>", "V[CII", new int[] { 1, 2, 3, 4 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 5);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 3, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 2, 2, 3, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 5);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Expected a string but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "peek", "Lcom/google/gson/stream/JsonToken;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		Label l7 = new Label();
		Label l8 = new Label();
		Label l9 = new Label();
		Label l10 = new Label();
		Label l11 = new Label();
		mv.visitTableSwitchInsn(0, 1, 17, l1, new Label[] { l2, l3, l4, l5, l6, l6, l7, l8, l8, l8, l8, l9, l9, l9, l10, l10, l11 });
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l12 = new Label();
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l9);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l6);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l7);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l8);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l10);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitLabel(l11);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l12, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l13 = new Label();
		mv.visitLabel(l13);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "setLenient", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/stream/JsonReader;", "lenient", "Z", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "skipValue", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 3);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 1, 6);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "doPeek", "I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitLabel(l1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "push", "VI", new int[] { 6, 4 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "peeked", "I", 2, 6);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "push", "VI", new int[] { 6, 5 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 2, 4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l5, 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, -1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 2, 2);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l6, 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "stackSize", "I", 2, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, -1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_16, 2, 14);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l7, 1, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 10);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l8, 1, 2);
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "skipUnquotedValue", "V", new int[] { 6 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_16, 2, 8);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l9, 1, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 12);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l10, 1, 2);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_CONST_16, 2, 39);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "skipQuotedValue", "VC", new int[] { 6, 2 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l10);
		mv.visitVarInsn(INSN_CONST_16, 2, 9);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l11, 1, 2);
		mv.visitVarInsn(INSN_CONST_16, 2, 13);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l12, 1, 2);
		mv.visitLabel(l11);
		mv.visitVarInsn(INSN_CONST_16, 2, 34);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "skipQuotedValue", "VC", new int[] { 6, 2 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l12);
		mv.visitVarInsn(INSN_CONST_16, 2, 16);
		mv.visitJumpInsn(INSN_IF_NE, l3, 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 6);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonReader;", "peekedNumberLength", "I", 3, 6);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 2, 2, 3, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonReader;", "pos", "I", 2, 6);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getLineNumber", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "getColumnNumber", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonScope(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/stream/JsonScope;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/stream/JsonScope;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JsonScope.java", null);
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "CLOSED", "I", null, 8);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "DANGLING_NAME", "I", null, 4);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "EMPTY_ARRAY", "I", null, 1);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "EMPTY_DOCUMENT", "I", null, 6);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "EMPTY_OBJECT", "I", null, 3);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "NONEMPTY_ARRAY", "I", null, 2);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "NONEMPTY_DOCUMENT", "I", null, 7);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC + ACC_FINAL, "NONEMPTY_OBJECT", "I", null, 5);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonToken(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL + ACC_ENUM, "Lcom/google/gson/stream/JsonToken;", new String[] { "Ljava/lang/Enum", "<", "Lcom/google/gson/stream/JsonToken;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL + ACC_ENUM, "Lcom/google/gson/stream/JsonToken;", new String[] { "Ljava/lang/Enum", "<", "Lcom/google/gson/stream/JsonToken;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visitSource("JsonToken.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$VALUES", "[Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "NAME", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "NULL", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "NUMBER", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "STRING", "Lcom/google/gson/stream/JsonToken;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 4);
		mv.visitVarInsn(INSN_CONST_4, 6, 3);
		mv.visitVarInsn(INSN_CONST_4, 5, 2);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "BEGIN_ARRAY");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 3 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "END_ARRAY");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 4 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "BEGIN_OBJECT");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 5 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "END_OBJECT");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 6 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "NAME");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 7 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "STRING");
		mv.visitVarInsn(INSN_CONST_4, 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "NUMBER");
		mv.visitVarInsn(INSN_CONST_4, 2, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "BOOLEAN");
		mv.visitVarInsn(INSN_CONST_4, 2, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "NULL");
		mv.visitVarInsn(INSN_CONST_16, 2, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "END_DOCUMENT");
		mv.visitVarInsn(INSN_CONST_16, 2, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonToken;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitVarInsn(INSN_CONST_16, 0, 10);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Lcom/google/gson/stream/JsonToken;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 6);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 7);
		mv.visitVarInsn(INSN_CONST_4, 1, 5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 6);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 7);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 8);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 9);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonToken;", "$VALUES", "[Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", new String[] { "()V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Enum;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "Lcom/google/gson/stream/JsonToken;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Enum;", "valueOf", "Ljava/lang/Enum;Ljava/lang/Class;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/stream/JsonToken;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "[Lcom/google/gson/stream/JsonToken;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "$VALUES", "[Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Lcom/google/gson/stream/JsonToken;", "clone", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Lcom/google/gson/stream/JsonToken;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonWriter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/google/gson/stream/JsonWriter;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Closeable;", "Ljava/io/Flushable;" });
	cv.visit(0, ACC_PUBLIC, "Lcom/google/gson/stream/JsonWriter;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Closeable;", "Ljava/io/Flushable;" });
	cv.visitSource("JsonWriter.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "REPLACEMENT_CHARS", "[Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "deferredName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "htmlSafe", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "indent", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "lenient", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "out", "Ljava/io/Writer;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "separator", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "serializeNulls", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "stack", "[I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "stackSize", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_16, 1, 128);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/String;");
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_16, 1, 31);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GT, l1, 0, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "\\u%04x");
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 1, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 34);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\\"");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 92);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\\\");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\t");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 8);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\b");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 10);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\n");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 13);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\r");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 12);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\f");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Ljava/lang/String;", "clone", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "[Ljava/lang/String;");
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 60);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\u003c");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 62);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\u003e");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 38);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\u0026");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 61);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\u003d");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 1, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 39);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\\u0027");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/Writer;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_16, 0, 32);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[I");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 0, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "push", "VI", new int[] { 2, 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, ":");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "separator", "Ljava/lang/String;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "serializeNulls", "Z", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/NullPointerException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "out == null");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NullPointerException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 3, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "beforeName", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "peek", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 1, 3);
		mv.visitVarInsn(INSN_CONST_16, 2, 44);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VI", new int[] { 1, 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "newline", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "replaceTop", "VI", new int[] { 3, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 3);
		mv.visitJumpInsn(INSN_IF_EQ, l1, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Nesting problem.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "beforeValue", "VZ", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "peek", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTableSwitchInsn(0, 1, 7, l0, new Label[] { l1, l2, l0, l3, l0, l4, l5 });
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Nesting problem.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "lenient", "Z", 0, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "JSON must have only one top-level value.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "lenient", "Z", 0, 2);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 0, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "JSON must start with an array or an object.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 0, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "replaceTop", "VI", new int[] { 2, 0 });
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "replaceTop", "VI", new int[] { 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "newline", "V", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 1, 44);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "append", "Ljava/io/Writer;C", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "newline", "V", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "separator", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 0, 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "replaceTop", "VI", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l8 = new Label();
		mv.visitLabel(l8);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "close", "Lcom/google/gson/stream/JsonWriter;IILjava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "peek", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 6);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Nesting problem.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 1, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Dangling name: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "newline", "V", new int[] { 4 });
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 1, 7 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "newline", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "indent", "Ljava/lang/String;", 2, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 2, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\n");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 4);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "indent", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "open", "Lcom/google/gson/stream/JsonWriter;ILjava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "push", "VI", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "peek", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "JsonWriter is closed.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 0, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitArrayOperationInsn(INSN_AGET, 0, 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "push", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 2, 4);
		mv.visitArrayLengthInsn(2, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 4);
		mv.visitOperationInsn(INSN_MUL_INT_LIT8, 1, 1, 0, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 1, "[I");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "arraycopy", "VLjava/lang/Object;ILjava/lang/Object;II", new int[] { 1, 3, 0, 3, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 0, 4);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 2, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 2, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 3, 4);
		mv.visitArrayOperationInsn(INSN_APUT, 5, 1, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "replaceTop", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 0, 2);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitArrayOperationInsn(INSN_APUT, 3, 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "string", "VLjava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "htmlSafe", "Z", 6, 8);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 6, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "HTML_SAFE_REPLACEMENT_CHARS", "[Ljava/lang/String;", 5, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 6, 8);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "\"");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 9, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_16, 6, 128);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l4, 0, 6);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 5, 0);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 4, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "REPLACEMENT_CHARS", "[Ljava/lang/String;", 5, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 6, 8232);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l7, 0, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "\\u2028");
		mv.visitLabel(l5);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l8, 2, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 6, 8);
		mv.visitOperationInsn(INSN_SUB_INT, 7, 1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;II", new int[] { 6, 9, 2, 7 });
		mv.visitLabel(l8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 6, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 6, 4 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_CONST_16, 6, 8233);
		mv.visitJumpInsn(INSN_IF_NE, l6, 0, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "\\u2029");
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l9, 2, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 6, 8);
		mv.visitOperationInsn(INSN_SUB_INT, 7, 3, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;II", new int[] { 6, 9, 2, 7 });
		mv.visitLabel(l9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 6, 8);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "\"");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "writeDeferredName", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeName", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "string", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 0, 1);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginArray", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "[");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "open", "Lcom/google/gson/stream/JsonWriter;ILjava/lang/String;", new int[] { 2, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginObject", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "{");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "open", "Lcom/google/gson/stream/JsonWriter;ILjava/lang/String;", new int[] { 2, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "close", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 0, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GT, l0, 0, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "stack", "[I", 1, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 0, 0, -1);
		mv.visitArrayOperationInsn(INSN_AGET, 1, 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 2, 7);
		mv.visitJumpInsn(INSN_IF_EQ, l1, 1, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Incomplete document");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 1, 3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endArray", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "]");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "close", "Lcom/google/gson/stream/JsonWriter;IILjava/lang/String;", new int[] { 3, 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endObject", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "}");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "close", "Lcom/google/gson/stream/JsonWriter;IILjava/lang/String;", new int[] { 3, 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "flush", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "JsonWriter is closed.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "flush", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "getSerializeNulls", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "serializeNulls", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "isHtmlSafe", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "htmlSafe", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isLenient", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "lenient", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/NullPointerException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "name == null");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NullPointerException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 0, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/stream/JsonWriter;", "stackSize", "I", 0, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "JsonWriter is closed.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 3, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nullValue", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "serializeNulls", "Z", 0, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 2 });
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "null");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 0, 1 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "deferredName", "Ljava/lang/String;", 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "setHtmlSafe", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "htmlSafe", "Z", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "setIndent", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "indent", "Ljava/lang/String;", 0, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, ":");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "separator", "Ljava/lang/String;", 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "indent", "Ljava/lang/String;", 2, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, ": ");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "separator", "Ljava/lang/String;", 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "setLenient", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "lenient", "Z", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "setSerializeNulls", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "serializeNulls", "Z", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;D", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isInfinite", "ZD", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Numeric values must be finite, but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;D", new int[] { 1, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 3, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "toString", "Ljava/lang/String;D", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;J", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "toString", "Ljava/lang/String;J", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/stream/JsonWriter;", "lenient", "Z", 1, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "-Infinity");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Infinity");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "NaN");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Numeric values must be finite, but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 4, 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "string", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;Z", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "writeDeferredName", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "beforeValue", "VZ", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/stream/JsonWriter;", "out", "Ljava/io/Writer;", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "true");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/Writer;", "write", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "false");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMalformedJsonException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/stream/MalformedJsonException;", null, "Ljava/io/IOException;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/stream/MalformedJsonException;", null, "Ljava/io/IOException;", null);
	cv.visitSource("MalformedJsonException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/MalformedJsonException;", "initCause", "Ljava/lang/Throwable;Ljava/lang/Throwable;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/MalformedJsonException;", "initCause", "Ljava/lang/Throwable;Ljava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAnInstrumentationTestCase(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", new String[] { "<T:", "Landroid/app/Activity;", ">", "Landroid/test/ActivityInstrumentationTestCase2", "<TT;>;" }, "Landroid/test/ActivityInstrumentationTestCase2;", null);
	cv.visit(0, ACC_PUBLIC, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", new String[] { "<T:", "Landroid/app/Activity;", ">", "Landroid/test/ActivityInstrumentationTestCase2", "<TT;>;" }, "Landroid/test/ActivityInstrumentationTestCase2;", null);
	cv.visitSource("AnInstrumentationTestCase.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "logThread", "Ljava/lang/Thread;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "logging", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Landroid/test/ActivityInstrumentationTestCase2;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "endLogging", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logging", "Z", 1, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "endLogging", "V", new int[] {  });
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/InterruptedException;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logThread", "Ljava/lang/Thread;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Thread;", "join", "V", new int[] { 1 });
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logging", "Z", 1, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Failed to complete logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "setUp", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Landroid/test/ActivityInstrumentationTestCase2;", "setUp", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "startLogging", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "startLogging", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logging", "Z", 4, 7);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "getName", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 5, 6, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Lcom/heisentest/splatter/sdk/SplatterIgnore;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "isAnnotationPresent", "ZLjava/lang/Class;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 4, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/os/Environment;", "getExternalStorageDirectory", "Ljava/io/File;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "<init>", "VLjava/io/File;Ljava/lang/String;", new int[] { 2, 1, 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/Thread;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Thread;", "<init>", "VLjava/lang/Runnable;", new int[] { 4, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logThread", "Ljava/lang/Thread;", 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logThread", "Ljava/lang/Thread;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Thread;", "start", "V", new int[] { 4 });
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "logging", "Z", 4, 7);
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/NoSuchMethodException;", "printStackTrace", "V", new int[] { 0 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "tearDown", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/AnInstrumentationTestCase;", "endLogging", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Landroid/test/ActivityInstrumentationTestCase2;", "tearDown", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpHeisentestJsonLogger(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visitSource("HeisentestJsonLogger.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "DEFAULT_QUEUE_CAPACITY", "I", null, 10);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "HEISENTEST_LOGGER_TAG", "Ljava/lang/String;", null, "HeisentestLogger");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "blockingQueue", "Ljava/util/concurrent/BlockingQueue;", new String[] { "Ljava/util/concurrent/BlockingQueue", "<", "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_VOLATILE, "currentlyLogging", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "fileWriter", "Ljava/io/FileWriter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "gson", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "outputDirectory", "Ljava/io/File;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "outputFile", "Ljava/io/File;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "stringWriter", "Ljava/io/StringWriter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "currentlyLogging", "Z", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/Gson;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/Gson;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "gson", "Lcom/google/gson/Gson;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/concurrent/ArrayBlockingQueue;");
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/concurrent/ArrayBlockingQueue;", "<init>", "VI", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "blockingQueue", "Ljava/util/concurrent/BlockingQueue;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/File;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 5 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/os/Environment;", "getExternalStorageState", "Ljava/lang/String;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "mounted");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "MEDIA NOT MOUNTED!");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/File;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "/heisentest");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputDirectory", "Ljava/io/File;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputDirectory", "Ljava/io/File;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "mkdirs", "Z", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/File;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputDirectory", "Ljava/io/File;", 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, ".json");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/io/File;Ljava/lang/String;", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputFile", "Ljava/io/File;", 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/FileWriter;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputFile", "Ljava/io/File;", 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileWriter;", "<init>", "VLjava/io/File;Z", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "fileWriter", "Ljava/io/FileWriter;", 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "stringWriter", "Ljava/io/StringWriter;", 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/stream/JsonWriter;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "stringWriter", "Ljava/io/StringWriter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "<init>", "VLjava/io/Writer;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "  ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "setIndent", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Failed to create output outputDirectory");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "beginLogging", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Trying to begin log...");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "i", "ILjava/lang/String;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "currentlyLogging", "Z", 1, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Failed to begin logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "cleanUpLogQueue", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Trying to end log...");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "close", "V", new int[] { 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "fileWriter", "Ljava/io/FileWriter;", 3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "stringWriter", "Ljava/io/StringWriter;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "stringWriter", "Ljava/io/StringWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "setLength", "VI", new int[] { 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "fileWriter", "Ljava/io/FileWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "flush", "V", new int[] { 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "fileWriter", "Ljava/io/FileWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "close", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Ended log.");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Heisentest output directory: %s");
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputDirectory", "Ljava/io/File;", 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "getAbsolutePath", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 7, 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "i", "ILjava/lang/String;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Printing final output:");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "v", "ILjava/lang/String;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/BufferedReader;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/io/FileReader;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "outputFile", "Ljava/io/File;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileReader;", "<init>", "VLjava/io/File;", new int[] { 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/BufferedReader;", "<init>", "VLjava/io/Reader;", new int[] { 0, 3 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/BufferedReader;", "readLine", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "HeisentestLogger");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "v", "ILjava/lang/String;Ljava/lang/String;", new int[] { 3, 2 });
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Failed to end logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 3, 4, 1 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l4);
		Label l6 = new Label();
		mv.visitTryCatchBlock(l4, l6, l2, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/BufferedReader;", "close", "V", new int[] { 0 });
		mv.visitLabel(l6);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "endLogging", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Received request to end logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "currentlyLogging", "Z", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "flush", "VLcom/heisentest/skeletonandroidapp/logging/LogEvent;", null, null);
		mv.visitCode();
		mv.visitMaxs(16, 0);
		mv.visitVarInsn(INSN_CONST_4, 8, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 9, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 10, "Flushing event");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "v", "ILjava/lang/String;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 10, "class");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "getCalleeClassName", "Ljava/lang/String;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 10, "method");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "getCalleeMethodName", "Ljava/lang/String;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "getParameters", "[Ljava/lang/Object;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitArrayLengthInsn(9, 7);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l3, 9, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 10, "parameters");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitArrayLengthInsn(9, 7);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l5, 5, 9);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "getParameterNames", "[Ljava/lang/String;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 10, 10, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 6, 7, 5);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "writeSerializedObjectWithFallback", "VLjava/lang/Object;Ljava/lang/String;", new int[] { 6, 9 });
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l6);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 8);
		Label l8 = new Label();
		mv.visitLabel(l8);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "getCallee", "Ljava/lang/Object;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredFields", "[Ljava/lang/reflect/Field;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayLengthInsn(9, 4);
		mv.visitJumpInsn(INSN_IF_LEZ, l9, 9, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 10, "fields");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 9 });
		mv.visitArrayLengthInsn(9, 4);
		Label l10 = new Label();
		mv.visitLabel(l10);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l11, 8, 9);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 4, 8);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l12, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitVarInsn(INSN_CONST_16, 13, 46);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "lastIndexOf", "II", new int[] { 12, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 12);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 12, 12, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;I", new int[] { 11, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 10, 11 });
		mv.visitVarInsn(INSN_CONST_4, 10, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "setAccessible", "VZ", new int[] { 2, 10 });
		mv.visitLabel(l1);
		Label l13 = new Label();
		Label l14 = new Label();
		mv.visitTryCatchBlock(l1, l13, l14, "Ljava/lang/IllegalAccessException;");
		mv.visitTryCatchBlock(l1, l13, l2, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l15 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l15, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "writeSerializedObjectWithFallback", "VLjava/lang/Object;Ljava/lang/String;", new int[] { 3, 10 });
		mv.visitLabel(l13);
		mv.visitTryCatchBlock(l13, l12, l2, "Ljava/io/IOException;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitLabel(l12);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 8, 8, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l15);
		Label l16 = new Label();
		mv.visitTryCatchBlock(l15, l16, l14, "Ljava/lang/IllegalAccessException;");
		mv.visitTryCatchBlock(l15, l16, l2, "Ljava/io/IOException;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitLabel(l16);
		mv.visitJumpInsn(INSN_GOTO, l13, 0, 0);
		mv.visitLabel(l14);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l17 = new Label();
		mv.visitLabel(l17);
		Label l18 = new Label();
		mv.visitTryCatchBlock(l17, l18, l2, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 10, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 11, "Field '%s' could not be accessed");
		mv.visitVarInsn(INSN_CONST_4, 12, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 12, 0, 12, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 14);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 14, 12, 13);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 11, 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 10, 11, 1 });
		mv.visitJumpInsn(INSN_GOTO, l13, 0, 0);
		mv.visitLabel(l11);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		mv.visitLabel(l9);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "flush", "V", new int[] { 8 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "fileWriter", "Ljava/io/FileWriter;", 8, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "stringWriter", "Ljava/io/StringWriter;", 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 8, 9 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "stringWriter", "Ljava/io/StringWriter;", 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "setLength", "VI", new int[] { 8, 9 });
		mv.visitLabel(l18);
		mv.visitJumpInsn(INSN_GOTO_16, l8, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "log", "VLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Logging static event");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "<init>", "VLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 2, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "queueLogEvent", "VLcom/heisentest/skeletonandroidapp/logging/LogEvent;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "log", "VLjava/lang/String;[Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "currentlyLogging", "Z", 0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Requested log instance event but finished logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "v", "ILjava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Logging instance event");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "v", "ILjava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "<init>", "VLjava/lang/String;[Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 2, 3, 4, 5 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "queueLogEvent", "VLcom/heisentest/skeletonandroidapp/logging/LogEvent;", new int[] { 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "queueLogEvent", "VLcom/heisentest/skeletonandroidapp/logging/LogEvent;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/InterruptedException;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "blockingQueue", "Ljava/util/concurrent/BlockingQueue;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/BlockingQueue;", "put", "VLjava/lang/Object;", new int[] { 1, 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Interrupted while putting log event into queue");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "writeSerializedObjectWithFallback", "VLjava/lang/Object;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "gson", "Lcom/google/gson/Gson;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 2, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "gson", "Lcom/google/gson/Gson;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJson", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", new int[] { 2, 1, 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Failed to convert object '%s' to JSON");
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 7, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "jsonWriter", "Lcom/google/gson/stream/JsonWriter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 7 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "beginLogging", "V", new int[] { 6 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "currentlyLogging", "Z", 2, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "blockingQueue", "Ljava/util/concurrent/BlockingQueue;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/BlockingQueue;", "isEmpty", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 2, 0);
		mv.visitLabel(l1);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l1, l3, l4, "Ljava/lang/InterruptedException;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "blockingQueue", "Ljava/util/concurrent/BlockingQueue;", 2, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 3, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/concurrent/TimeUnit;", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/BlockingQueue;", "poll", "Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;", new int[] { 2, 3, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;");
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "flush", "VLcom/heisentest/skeletonandroidapp/logging/LogEvent;", new int[] { 1 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Interrupted while retrieving event from queue");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "cleanUpLogQueue", "V", new int[] { 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpHeisentestLogger(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/heisentest/skeletonandroidapp/HeisentestLogger;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/heisentest/skeletonandroidapp/HeisentestLogger;", null, "Ljava/lang/Object;", null);
	cv.visitSource("HeisentestLogger.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "log", "VLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitVarInsn(INSN_CONST_4, 8, 2);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "");
		mv.visitArrayLengthInsn(4, 11);
		mv.visitVarInsn(INSN_MOVE, 2, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 11, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 6, ", ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "concat", "Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/text/TextUtils;", "isEmpty", "ZLjava/lang/CharSequence;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 2, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 44);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "lastIndexOf", "II", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 1, 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/text/TextUtils;", "isEmpty", "ZLjava/lang/CharSequence;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Class -  %s, Method - %s");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 8, "[Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 9, 5, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 10, 5, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 2, 3 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l4);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Class -  %s, Method - %s, Parameters - %s");
		mv.visitVarInsn(INSN_CONST_4, 5, 3);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 9, 5, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 10, 5, 7);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpHeisentestXmlLogger(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", null, "Ljava/lang/Object;", null);
	cv.visitSource("HeisentestXmlLogger.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "DEFAULT_OUTPUT_LOCATION", "Ljava/lang/String;", null, "/heisentestoutput");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "HEISENTEST_LOGGER_TAG", "Ljava/lang/String;", null, "HeisentestLogger");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "HEISENTEST_NAMESPACE", "Ljava/lang/String;", null, "heisentest");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "NO_NAMESPACE", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "fileWriter", "Ljava/io/FileWriter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "outputFile", "Ljava/io/File;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "serializer", "Lorg/xmlpull/v1/XmlSerializer;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "stringWriter", "Ljava/io/StringWriter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "beginLogging", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Trying to begin log...");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "i", "ILjava/lang/String;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "http://xmlpull.org/v1/doc/features.html#indent-output");
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "setFeature", "VLjava/lang/String;Z", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "UTF-8");
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "startDocument", "VLjava/lang/String;Ljava/lang/Boolean;", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "heisentest");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "log");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "startTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "version");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "0.0.1");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "attribute", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2, 3, 4 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Failed to begin logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "endLogging", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Trying to end log...");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 4, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "heisentest");
		mv.visitStringInsn(INSN_CONST_STRING, 6, "log");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "endTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 5, 6 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "endDocument", "V", new int[] { 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "flush", "V", new int[] { 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "fileWriter", "Ljava/io/FileWriter;", 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "stringWriter", "Ljava/io/StringWriter;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 4, 5 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "stringWriter", "Ljava/io/StringWriter;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "setLength", "VI", new int[] { 4, 5 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "fileWriter", "Ljava/io/FileWriter;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "flush", "V", new int[] { 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "fileWriter", "Ljava/io/FileWriter;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "close", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Ended log.");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Setting output outputFile (at '%s') readable...");
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 6, 0, 6, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "outputFile", "Ljava/io/File;", 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "getAbsolutePath", "Ljava/lang/String;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 8, 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "outputFile", "Ljava/io/File;", 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "setReadable", "ZZZ", new int[] { 4, 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Failed to make output outputDirectory readable!");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitLabel(l3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Successfully made output outputDirectory readable. Printing final output:");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/BufferedReader;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/io/FileReader;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "outputFile", "Ljava/io/File;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileReader;", "<init>", "VLjava/io/File;", new int[] { 4, 5 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/BufferedReader;", "<init>", "VLjava/io/Reader;", new int[] { 0, 4 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/BufferedReader;", "readLine", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "i", "ILjava/lang/String;Ljava/lang/String;", new int[] { 4, 2 });
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Failed to end logging");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 4, 5, 1 });
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l5);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l5, l7, l2, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/BufferedReader;", "close", "V", new int[] { 0 });
		mv.visitLabel(l7);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "init", "VLjava/io/File;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/os/Environment;", "getExternalStorageState", "Ljava/lang/String;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "mounted");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "MEDIA NOT MOUNTED!");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Xml;", "newSerializer", "Lorg/xmlpull/v1/XmlSerializer;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/File;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "/heisentest");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "mkdirs", "Z", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Heisentest output directory: %s");
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "getAbsolutePath", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "d", "ILjava/lang/String;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/File;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, ".xml");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/io/File;Ljava/lang/String;", new int[] { 2, 1, 3 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "outputFile", "Ljava/io/File;", 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/FileWriter;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "outputFile", "Ljava/io/File;", 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileWriter;", "<init>", "VLjava/io/File;Z", new int[] { 2, 3, 4 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "fileWriter", "Ljava/io/FileWriter;", 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "stringWriter", "Ljava/io/StringWriter;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "stringWriter", "Ljava/io/StringWriter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "setOutput", "VLjava/io/Writer;", new int[] { 2, 3 });
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "HeisentestLogger");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Failed to create output outputDirectory");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Landroid/util/Log;", "e", "ILjava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "log", "VLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "event");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "startTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 2, 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "class");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "startTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 2, 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "name");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "attribute", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 2, 3, 4, 6 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "method");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "startTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 2, 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "name");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "attribute", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 2, 3, 4, 7 });
		mv.visitArrayLengthInsn(2, 8);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l3, 2, 0);
		mv.visitArrayLengthInsn(2, 8);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_IF_GE, l3, 1, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 8, 1);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 4, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "parameter");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "startTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 3, 4, 5 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "text", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 4, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "parameter");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "endTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 3, 4, 5 });
		mv.visitLabel(l5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "method");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "endTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "class");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "endTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "NO_NAMESPACE", "Ljava/lang/String;", 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "event");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "endTag", "Lorg/xmlpull/v1/XmlSerializer;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "serializer", "Lorg/xmlpull/v1/XmlSerializer;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/xmlpull/v1/XmlSerializer;", "flush", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "fileWriter", "Ljava/io/FileWriter;", 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "stringWriter", "Ljava/io/StringWriter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileWriter;", "append", "Ljava/io/Writer;Ljava/lang/CharSequence;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/HeisentestXmlLogger;", "stringWriter", "Ljava/io/StringWriter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "setLength", "VI", new int[] { 1, 2 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMainActivity(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/heisentest/skeletonandroidapp/MainActivity;", null, "Landroid/app/Activity;", null);
	cv.visit(0, ACC_PUBLIC, "Lcom/heisentest/skeletonandroidapp/MainActivity;", null, "Landroid/app/Activity;", null);
	cv.visitSource("MainActivity.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Landroid/app/Activity;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/MainActivity;", "aMethodThatInstantiatesOurLogger", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/MainActivity;", "aStaticMethod", "V", new int[] {  });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/MainActivity;", "anInstanceMethod", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "aMethodThatInstantiatesOurLogger", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/File;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "path");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "method_name");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "<init>", "VLjava/io/File;Ljava/lang/String;", new int[] { 0, 2, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Thread;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Thread;", "<init>", "VLjava/lang/Runnable;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Thread;", "start", "V", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "aStaticMethod", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "method name");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "class name");
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "a parameter");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "log", "VLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "anInstanceMethod", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 1, "[Ljava/lang/String;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "string 1");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "string 2");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "method name");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "a parameter");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/heisentest/skeletonandroidapp/HeisentestJsonLogger;", "log", "VLjava/lang/String;[Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 0, 5, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLogEvent(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", null, "Ljava/lang/Object;", null);
	cv.visitSource("LogEvent.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "callee", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "calleeClassName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "calleeMethodName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "parameterNames", "[Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "parameters", "[Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "<init>", "VLjava/lang/String;[Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 3, 0, 0, 4 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "calleeClassName", "Ljava/lang/String;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;[Ljava/lang/String;Ljava/lang/Object;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "calleeClassName", "Ljava/lang/String;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "calleeMethodName", "Ljava/lang/String;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "parameterNames", "[Ljava/lang/String;", 3, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "callee", "Ljava/lang/Object;", 4, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "parameters", "[Ljava/lang/Object;", 5, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getCallee", "Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "callee", "Ljava/lang/Object;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getCalleeClassName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "callee", "Ljava/lang/Object;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "callee", "Ljava/lang/Object;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "calleeClassName", "Ljava/lang/String;", 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getCalleeMethodName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "calleeMethodName", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getParameterNames", "[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "parameterNames", "[Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getParameters", "[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/heisentest/skeletonandroidapp/logging/LogEvent;", "parameters", "[Ljava/lang/Object;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSplatterIgnore(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/heisentest/splatter/sdk/SplatterIgnore;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lcom/heisentest/splatter/sdk/SplatterIgnore;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("SplatterIgnore.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpActiveTestSuite$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Ljunit/extensions/ActiveTestSuite$1;", null, "Ljava/lang/Thread;", null);
	cv.visit(0, 0, "Ljunit/extensions/ActiveTestSuite$1;", null, "Ljava/lang/Thread;", null);
	cv.visitSource("ActiveTestSuite.java", null);
	cv.visitOuterClass("Ljunit/extensions/ActiveTestSuite;", "runTest", "VLjunit/framework/Test;Ljunit/framework/TestResult;");
	cv.visitInnerClass(null, "Ljunit/extensions/ActiveTestSuite;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Ljunit/extensions/ActiveTestSuite;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$result", "Ljunit/framework/TestResult;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$test", "Ljunit/framework/Test;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjunit/extensions/ActiveTestSuite;Ljunit/framework/Test;Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "this$0", "Ljunit/extensions/ActiveTestSuite;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "val$test", "Ljunit/framework/Test;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "val$result", "Ljunit/framework/TestResult;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Thread;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "val$test", "Ljunit/framework/Test;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "val$result", "Ljunit/framework/TestResult;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "run", "VLjunit/framework/TestResult;", new int[] { 0, 1 });
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "this$0", "Ljunit/extensions/ActiveTestSuite;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/ActiveTestSuite;", "runFinished", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/ActiveTestSuite$1;", "this$0", "Ljunit/extensions/ActiveTestSuite;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/ActiveTestSuite;", "runFinished", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Ljunit/extensions/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Ljunit/extensions/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpAssert(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/Assert;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/Assert;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Assert.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VBB", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;BB", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VCC", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;CC", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VDDD", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_MOVE_WIDE, 1, 7);
		mv.visitVarInsn(INSN_MOVE_WIDE, 3, 9);
		mv.visitVarInsn(INSN_MOVE_WIDE, 5, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;DDD", new int[] { 0, 1, 2, 3, 4, 5, 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VFFF", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;FFF", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VII", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;II", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VJJ", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;JJ", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;BB", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Byte;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Byte;", "<init>", "VB", new int[] { 0, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Byte;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Byte;", "<init>", "VB", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;CC", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Character;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Character;", "<init>", "VC", new int[] { 0, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Character;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Character;", "<init>", "VC", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;DDD", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "compare", "IDD", new int[] { 3, 4, 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitOperationInsn(INSN_SUB_DOUBLE, 0, 3, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "abs", "DD", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_CMPG_DOUBLE, 0, 0, 7, 0);
		mv.visitJumpInsn(INSN_IF_LEZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Double;", "<init>", "VD", new int[] { 0, 3, 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Double;", "<init>", "VD", new int[] { 1, 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;FFF", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "compare", "IFF", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitOperationInsn(INSN_SUB_FLOAT, 0, 3, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "abs", "FF", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_CMPG_FLOAT, 0, 0, 5, 0);
		mv.visitJumpInsn(INSN_IF_LEZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Float;", "<init>", "VF", new int[] { 0, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Float;", "<init>", "VF", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;II", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Integer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Integer;", "<init>", "VI", new int[] { 0, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Integer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Integer;", "<init>", "VI", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;JJ", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Long;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Long;", "<init>", "VJ", new int[] { 0, 3, 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Long;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Long;", "<init>", "VJ", new int[] { 1, 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 4, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 1, 0);
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljunit/framework/ComparisonFailure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonFailure;", "<init>", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 0, 3, 4 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;SS", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Short;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Short;", "<init>", "VS", new int[] { 0, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Short;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Short;", "<init>", "VS", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;ZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VSS", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;SS", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;ZZ", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertFalse", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertFalse", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertFalse", "VLjava/lang/String;Z", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotNull", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotSame", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failSame", "VLjava/lang/String;", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNull", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Expected: <null> but was: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertSame", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertTrue", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertTrue", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "fail", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "fail", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/AssertionFailedError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/AssertionFailedError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/AssertionFailedError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/AssertionFailedError;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "expected same:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "> was not:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "VLjava/lang/String;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failSame", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "expected not same");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "VLjava/lang/String;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_LEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "expected:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "> but was:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAssertionFailedError(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/AssertionFailedError;", null, "Ljava/lang/AssertionError;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/AssertionFailedError;", null, "Ljava/lang/AssertionError;", null);
	cv.visitSource("AssertionFailedError.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/AssertionFailedError;", "defaultString", "Ljava/lang/String;Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "defaultString", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComparisonCompactor(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/ComparisonCompactor;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/ComparisonCompactor;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ComparisonCompactor.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "DELTA_END", "Ljava/lang/String;", null, "]");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "DELTA_START", "Ljava/lang/String;", null, "[");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "ELLIPSIS", "Ljava/lang/String;", null, "...");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fActual", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fContextLength", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fExpected", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fPrefix", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fSuffix", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VILjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/framework/ComparisonCompactor;", "fContextLength", "I", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "areStringsEqual", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "compactString", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "[");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fSuffix", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 6, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 1, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "computeCommonPrefix", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fSuffix", "I", 1, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l1, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "computeCommonSuffix", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "computeCommonPrefix", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 0, 5);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fContextLength", "I", 2, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l0, 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "...");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 5);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fContextLength", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "computeCommonSuffix", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fSuffix", "I", 2, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 1, 1, 2, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fContextLength", "I", 2, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "min", "III", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fSuffix", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 2, 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fSuffix", "I", 3, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 1, 1, 3, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fContextLength", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l0, 1, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "...");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findCommonPrefix", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "min", "III", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 1, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 1, 2);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 1, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 1, 4);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findCommonSuffix", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 2, 0, -1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 2, 0, -1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 2, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l1, 0, 2);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/ComparisonCompactor;", "fPrefix", "I", 2, 4);
		mv.visitJumpInsn(INSN_IF_LT, l1, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 2, 3);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 2, 2, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/framework/ComparisonCompactor;", "fSuffix", "I", 2, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, -1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compact", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "areStringsEqual", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 5, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "findCommonPrefix", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "findCommonSuffix", "V", new int[] { 4 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "compactString", "Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "compactString", "Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 5, 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4TestAdapterCache(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/JUnit4TestAdapterCache;", new String[] { "Ljava/util/HashMap", "<", "Lorg/junit/runner/Description;", "Ljunit/framework/Test;", ">;" }, "Ljava/util/HashMap;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/JUnit4TestAdapterCache;", new String[] { "Ljava/util/HashMap", "<", "Lorg/junit/runner/Description;", "Ljunit/framework/Test;", ">;" }, "Ljava/util/HashMap;", null);
	cv.visitSource("JUnit4TestAdapterCache.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "fInstance", "Ljunit/framework/JUnit4TestAdapterCache;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/JUnit4TestAdapterCache;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestAdapterCache;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache;", "fInstance", "Ljunit/framework/JUnit4TestAdapterCache;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getDefault", "Ljunit/framework/JUnit4TestAdapterCache;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache;", "fInstance", "Ljunit/framework/JUnit4TestAdapterCache;", 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isSuite", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "createTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "containsKey", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "createTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2, 0 });
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/Test;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "asTestList", "Ljava/util/List;Lorg/junit/runner/Description;", new String[] { "(", "Lorg/junit/runner/Description;", ")", "Ljava/util/List", "<", "Ljunit/framework/Test;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isTest", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljunit/framework/Test;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "createTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isTest", "Z", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljunit/framework/JUnit4TestCaseFacade;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestCaseFacade;", "<init>", "VLorg/junit/runner/Description;", new int[] { 2, 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getDisplayName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getNotifier", "Lorg/junit/runner/notification/RunNotifier;Ljunit/framework/TestResult;Ljunit/framework/JUnit4TestAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljunit/framework/JUnit4TestAdapterCache$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "<init>", "VLjunit/framework/JUnit4TestAdapterCache;Ljunit/framework/TestResult;", new int[] { 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "addListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpProtectable(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/framework/Protectable;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/framework/Protectable;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Protectable.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "protect", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTest(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/framework/Test;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/framework/Test;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Test.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "countTestCases", "I", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestFailure(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/TestFailure;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/TestFailure;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestFailure.java", null);
	{
		fv = cv.visitField(ACC_PROTECTED, "fFailedTest", "Ljunit/framework/Test;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PROTECTED, "fThrownException", "Ljava/lang/Throwable;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestFailure;", "fFailedTest", "Ljunit/framework/Test;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestFailure;", "fThrownException", "Ljava/lang/Throwable;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "exceptionMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestFailure;", "thrownException", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "failedTest", "Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestFailure;", "fFailedTest", "Ljunit/framework/Test;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isFailure", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestFailure;", "thrownException", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljunit/framework/AssertionFailedError;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "thrownException", "Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestFailure;", "fThrownException", "Ljava/lang/Throwable;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuffer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuffer;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestFailure;", "fFailedTest", "Ljunit/framework/Test;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ": ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestFailure;", "fThrownException", "Ljava/lang/Throwable;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "append", "Ljava/lang/StringBuffer;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "trace", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/PrintWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintWriter;", "<init>", "VLjava/io/Writer;", new int[] { 2, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestFailure;", "thrownException", "Ljava/lang/Throwable;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "printStackTrace", "VLjava/io/PrintWriter;", new int[] { 3, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestListener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/framework/TestListener;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/framework/TestListener;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestListener.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "endTest", "VLjunit/framework/Test;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "startTest", "VLjunit/framework/Test;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestResult(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/TestResult;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/TestResult;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestResult.java", null);
	{
		fv = cv.visitField(ACC_PROTECTED, "fErrors", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljunit/framework/TestFailure;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PROTECTED, "fFailures", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljunit/framework/TestFailure;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PROTECTED, "fListeners", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljunit/framework/TestListener;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PROTECTED, "fRunTests", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fStop", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestResult;", "fFailures", "Ljava/util/List;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestResult;", "fErrors", "Ljava/util/List;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestResult;", "fListeners", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/framework/TestResult;", "fRunTests", "I", 1, 2);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Ljunit/framework/TestResult;", "fStop", "Z", 1, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_DECLARED_SYNCHRONIZED, "cloneListeners", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljunit/framework/TestListener;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fListeners", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 4);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fErrors", "Ljava/util/List;", 2, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljunit/framework/TestFailure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestFailure;", "<init>", "VLjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 3, 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "cloneListeners", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/TestListener;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/TestListener;", "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 0, 5, 6 });
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 4);
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 4);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fFailures", "Ljava/util/List;", 2, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljunit/framework/TestFailure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestFailure;", "<init>", "VLjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 3, 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "cloneListeners", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/TestListener;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/TestListener;", "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", new int[] { 0, 5, 6 });
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 4);
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "addListener", "VLjunit/framework/TestListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fListeners", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "cloneListeners", "Ljava/util/List;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/TestListener;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/TestListener;", "endTest", "VLjunit/framework/Test;", new int[] { 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "errorCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "errors", "Ljava/util/Enumeration;", new String[] { "()", "Ljava/util/Enumeration", "<", "Ljunit/framework/TestFailure;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "enumeration", "Ljava/util/Enumeration;Ljava/util/Collection;", new int[] { 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "failureCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fFailures", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "failures", "Ljava/util/Enumeration;", new String[] { "()", "Ljava/util/Enumeration", "<", "Ljunit/framework/TestFailure;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fFailures", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "enumeration", "Ljava/util/Enumeration;Ljava/util/Collection;", new int[] { 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "removeListener", "VLjunit/framework/TestListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult;", "fListeners", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "remove", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "run", "VLjunit/framework/TestCase;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "startTest", "VLjunit/framework/Test;", new int[] { 1, 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestResult$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult$1;", "<init>", "VLjunit/framework/TestResult;Ljunit/framework/TestCase;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "runProtected", "VLjunit/framework/Test;Ljunit/framework/Protectable;", new int[] { 1, 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "endTest", "VLjunit/framework/Test;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "runCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/TestResult;", "fRunTests", "I", 0, 1);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runProtected", "VLjunit/framework/Test;Ljunit/framework/Protectable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljunit/framework/AssertionFailedError;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/ThreadDeath;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Protectable;", "protect", "V", new int[] { 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "shouldStop", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Ljunit/framework/TestResult;", "fStop", "Z", 0, 1);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "startTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "countTestCases", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 4);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/framework/TestResult;", "fRunTests", "I", 3, 4);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 3, 3, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/framework/TestResult;", "fRunTests", "I", 3, 4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 4);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "cloneListeners", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljunit/framework/TestListener;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/TestListener;", "startTest", "VLjunit/framework/Test;", new int[] { 1, 5 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		Label l5 = new Label();
		mv.visitLabel(l5);
		Label l6 = new Label();
		mv.visitTryCatchBlock(l5, l6, l2, null);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 4);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "stop", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Ljunit/framework/TestResult;", "fStop", "Z", 0, 1);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "wasSuccessful", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "failureCount", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "errorCount", "I", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Ljunit/framework/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Ljunit/framework/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpTestRunListener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/runner/TestRunListener;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Ljunit/runner/TestRunListener;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestRunListener.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STATUS_ERROR", "I", null, 1);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "STATUS_FAILURE", "I", null, 2);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testEnded", "VLjava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testFailed", "VILjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testRunEnded", "VJ", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testRunStarted", "VLjava/lang/String;I", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testRunStopped", "VJ", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testStarted", "VLjava/lang/String;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpVersion(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/runner/Version;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/runner/Version;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Version.java", null);
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "id", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "4.11");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "V[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "out", "Ljava/io/PrintStream;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/Version;", "id", "Ljava/lang/String;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Ljunit/runner/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Ljunit/runner/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumppackageinfo4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Ljunit/textui/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Ljunit/textui/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpAfter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/After;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/After;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("After.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAfterClass(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/AfterClass;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/AfterClass;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("AfterClass.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAssert2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/Assert;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/Assert;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Assert.java", null);
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[B[B", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[C[C", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[D[DD", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/InexactComparisonCriteria;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/InexactComparisonCriteria;", "<init>", "VD", new int[] { 0, 4, 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/InexactComparisonCriteria;", "arrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[F[FF", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/InexactComparisonCriteria;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/InexactComparisonCriteria;", "<init>", "VF", new int[] { 0, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/InexactComparisonCriteria;", "arrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[I[I", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[J[J", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[Ljava/lang/Object;[Ljava/lang/Object;", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "VLjava/lang/String;[S[S", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[B[B", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[B[B", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[C[C", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[C[C", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[D[DD", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[D[DD", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[F[FF", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[F[FF", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[I[I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[I[I", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[J[J", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[J[J", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[Ljava/lang/Object;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertArrayEquals", "V[S[S", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[S[S", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VDD", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/String;DD", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VDDD", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_MOVE_WIDE, 1, 7);
		mv.visitVarInsn(INSN_MOVE_WIDE, 3, 9);
		mv.visitVarInsn(INSN_MOVE_WIDE, 5, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/String;DDD", new int[] { 0, 1, 2, 3, 4, 5, 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VFFF", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/String;FFF", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VJJ", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/String;JJ", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;DD", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Use assertEquals(expected, actual, delta) to compare floating-point numbers");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;DDD", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lorg/junit/Assert;", "doubleIsDifferent", "ZDDD", new int[] { 3, 4, 5, 6, 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Double;", "<init>", "VD", new int[] { 0, 3, 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Double;", "<init>", "VD", new int[] { 1, 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;FFF", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "compare", "IFF", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitOperationInsn(INSN_SUB_FLOAT, 0, 3, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "abs", "FF", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_CMPG_FLOAT, 0, 0, 5, 0);
		mv.visitJumpInsn(INSN_IF_LEZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Float;", "<init>", "VF", new int[] { 0, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Float;", "<init>", "VF", new int[] { 1, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;JJ", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "equalsRegardingNull", "ZLjava/lang/Object;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 3, 0, "Ljava/lang/String;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 4, 0, "Ljava/lang/String;");
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/ComparisonFailure;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/String;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/String;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure;", "<init>", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 0, 3, 4 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;[Ljava/lang/Object;[Ljava/lang/Object;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "VLjava/lang/String;[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "V[Ljava/lang/Object;[Ljava/lang/Object;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertArrayEquals", "V[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertFalse", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertFalse", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertFalse", "VLjava/lang/String;Z", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotEquals", "VDDD", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_MOVE_WIDE, 1, 7);
		mv.visitVarInsn(INSN_MOVE_WIDE, 3, 9);
		mv.visitVarInsn(INSN_MOVE_WIDE, 5, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lorg/junit/Assert;", "assertNotEquals", "VLjava/lang/String;DDD", new int[] { 0, 1, 2, 3, 4, 5, 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotEquals", "VJJ", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertNotEquals", "VLjava/lang/String;JJ", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotEquals", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotEquals", "VLjava/lang/String;DDD", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lorg/junit/Assert;", "doubleIsDifferent", "ZDDD", new int[] { 2, 3, 4, 5, 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Double;", "<init>", "VD", new int[] { 0, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failEquals", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 1, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotEquals", "VLjava/lang/String;JJ", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "equalsRegardingNull", "ZLjava/lang/Object;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failEquals", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotNull", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotSame", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failSame", "VLjava/lang/String;", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNull", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failNotNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertSame", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "failNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(TT;", "Lorg/hamcrest/Matcher", "<-TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/String;", "TT;", "Lorg/hamcrest/Matcher", "<-TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/MatcherAssert;", "assertThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertTrue", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertTrue", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "doubleIsDifferent", "ZDDD", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "compare", "IDD", new int[] { 3, 4, 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitOperationInsn(INSN_SUB_DOUBLE, 1, 3, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "abs", "DD", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitOperationInsn(INSN_CMPG_DOUBLE, 1, 1, 7, 0);
		mv.visitJumpInsn(INSN_IF_LEZ, l1, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "equalsRegardingNull", "ZLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "isEquals", "ZLjava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "fail", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "fail", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "failEquals", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Values should be different. ");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ". ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Actual: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "failNotNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "expected null, but was:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "failNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "expected same:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "> was not:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "failSame", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "expected not same");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 5, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "expected: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "formatClassAndValue", "Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " but was: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "formatClassAndValue", "Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;", new int[] { 7, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "expected:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "> but was:<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "formatClassAndValue", "Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "null");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "internalArrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/ExactComparisonCriteria;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ExactComparisonCriteria;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/ExactComparisonCriteria;", "arrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "isEquals", "ZLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAssume(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/Assume;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/Assume;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Assume.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeFalse", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assume;", "assumeTrue", "VLjava/lang/String;Z", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeFalse", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assume;", "assumeTrue", "VZ", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeNoException", "VLjava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "nullValue", "Lorg/hamcrest/Matcher;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assume;", "assumeThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeNoException", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "nullValue", "Lorg/hamcrest/Matcher;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assume;", "assumeThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "assumeNotNull", "V[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "notNullValue", "Lorg/hamcrest/Matcher;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "everyItem", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assume;", "assumeThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(TT;", "Lorg/hamcrest/Matcher", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "matches", "ZLjava/lang/Object;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/AssumptionViolatedException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/String;", "TT;", "Lorg/hamcrest/Matcher", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "matches", "ZLjava/lang/Object;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/AssumptionViolatedException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1, 2, 3 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeTrue", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/AssumptionViolatedException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assumeTrue", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "is", "Lorg/hamcrest/Matcher;Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assume;", "assumeThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpBefore(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Before;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Before;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Before.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpBeforeClass(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/BeforeClass;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/BeforeClass;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("BeforeClass.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpClassRule(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/ClassRule;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/ClassRule;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("ClassRule.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComparisonFailure$ComparisonCompactor(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", null, "Ljava/lang/Object;", null);
	cv.visit(0, 0, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ComparisonFailure.java", null);
	cv.visitInnerClass("Lorg/junit/ComparisonFailure$ComparisonCompactor;", "Lorg/junit/ComparisonFailure;", "ComparisonCompactor", ACC_PRIVATE + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "DELTA_END", "Ljava/lang/String;", null, "]");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "DELTA_START", "Ljava/lang/String;", null, "[");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "ELLIPSIS", "Ljava/lang/String;", null, "...");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fActual", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fContextLength", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fExpected", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fPrefix", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fSuffix", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VILjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fContextLength", "I", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "Ljava/lang/String;Lorg/junit/ComparisonFailure$ComparisonCompactor;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "compact", "Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "areStringsEqual", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "compact", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "areStringsEqual", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 5, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "findCommonPrefix", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "findCommonSuffix", "V", new int[] { 4 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "compactString", "Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "compactString", "Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 5, 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "compactString", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "[");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fSuffix", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 6, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 1, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "computeCommonPrefix", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fSuffix", "I", 1, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l1, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "computeCommonSuffix", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "computeCommonPrefix", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 0, 5);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fContextLength", "I", 2, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l0, 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "...");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 5);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 3, 5);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fContextLength", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "max", "III", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "computeCommonSuffix", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fSuffix", "I", 2, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 1, 1, 2, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fContextLength", "I", 2, 5);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 1, 1, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "min", "III", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fSuffix", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 2, 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fSuffix", "I", 3, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 1, 1, 3, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fContextLength", "I", 4, 5);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 3, 3, 4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l0, 1, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "...");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findCommonPrefix", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Math;", "min", "III", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 1, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 1, 4);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 1, 2);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 1, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 1, 4);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findCommonSuffix", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 2, 0, -1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 2, 0, -1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 2, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l1, 0, 2);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fPrefix", "I", 2, 4);
		mv.visitJumpInsn(INSN_IF_LT, l1, 1, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fActual", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 2, 3);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_SUB_INT_2ADDR, 2, 2, 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "fSuffix", "I", 2, 4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, -1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComparisonFailure(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/ComparisonFailure;", null, "Ljava/lang/AssertionError;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/ComparisonFailure;", null, "Ljava/lang/AssertionError;", null);
	cv.visitSource("ComparisonFailure.java", null);
	cv.visitMemberClass("Lorg/junit/ComparisonFailure$ComparisonCompactor;", "Lorg/junit/ComparisonFailure;", "ComparisonCompactor");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "MAX_CONTEXT_LENGTH", "I", null, 20);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fActual", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fExpected", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/ComparisonFailure;", "fExpected", "Ljava/lang/String;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/ComparisonFailure;", "fActual", "Ljava/lang/String;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getActual", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure;", "fActual", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getExpected", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure;", "fExpected", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/ComparisonFailure$ComparisonCompactor;");
		mv.visitVarInsn(INSN_CONST_16, 1, 20);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/ComparisonFailure;", "fActual", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "<init>", "VILjava/lang/String;Ljava/lang/String;", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljava/lang/AssertionError;", "getMessage", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/ComparisonFailure$ComparisonCompactor;", "access$000", "Ljava/lang/String;Lorg/junit/ComparisonFailure$ComparisonCompactor;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFixMethodOrder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/FixMethodOrder;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/FixMethodOrder;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("FixMethodOrder.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "TYPE");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Lorg/junit/runners/MethodSorters;", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visitEnum("value", "Lorg/junit/runners/MethodSorters;", "DEFAULT");
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpIgnore(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Ignore;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Ignore;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Ignore.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "TYPE");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Ljava/lang/String;", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("value", "");
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRule(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Rule;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Rule;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Rule.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTest$None(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/Test$None;", null, "Ljava/lang/Throwable;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/Test$None;", null, "Ljava/lang/Throwable;", null);
	cv.visitSource("Test.java", null);
	cv.visitInnerClass("Lorg/junit/Test$None;", "Lorg/junit/Test;", "None", ACC_PUBLIC + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Throwable;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTest2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Test;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/Test;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Test.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitMemberClass("Lorg/junit/Test$None;", "Lorg/junit/Test;", "None");
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "expected", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<+", "Ljava/lang/Throwable;", ">;" }, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visitClass("expected", "Lorg/junit/Test$None;");
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "timeout", "J", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("timeout", 0L);
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCategories$ExcludeCategory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/categories/Categories$ExcludeCategory;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/categories/Categories$ExcludeCategory;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Categories.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	cv.visitInnerClass("Lorg/junit/experimental/categories/Categories$ExcludeCategory;", "Lorg/junit/experimental/categories/Categories;", "ExcludeCategory", ACC_PUBLIC + ACC_STATIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCategories$IncludeCategory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/categories/Categories$IncludeCategory;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/categories/Categories$IncludeCategory;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Categories.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	cv.visitInnerClass("Lorg/junit/experimental/categories/Categories$IncludeCategory;", "Lorg/junit/experimental/categories/Categories;", "IncludeCategory", ACC_PUBLIC + ACC_STATIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCategory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/categories/Category;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/categories/Category;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Category.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "[Ljava/lang/Class;", new String[] { "()[", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCouldNotReadCoreException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/max/CouldNotReadCoreException;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/max/CouldNotReadCoreException;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("CouldNotReadCoreException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMaxCore(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/max/MaxCore;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/max/MaxCore;", null, "Ljava/lang/Object;", null);
	cv.visitSource("MaxCore.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "MALFORMED_JUNIT_3_TEST_CLASS_PREFIX", "Ljava/lang/String;", null, "malformed JUnit 3 test class: ");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fHistory", "Lorg/junit/experimental/max/MaxHistory;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/max/MaxHistory;", "forFolder", "Lorg/junit/experimental/max/MaxHistory;Ljava/io/File;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxCore;", "fHistory", "Lorg/junit/experimental/max/MaxHistory;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "buildRunner", "Lorg/junit/runner/Runner;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "TestSuite with 0 tests");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Suite;", "emptySuite", "Lorg/junit/runner/Runner;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "malformed JUnit 3 test class: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "startsWith", "ZLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/internal/runners/JUnit38ClassRunner;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "getMalformedTestClass", "Ljava/lang/Class;Lorg/junit/runner/Description;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "<init>", "VLjunit/framework/Test;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getTestClass", "Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Can't build a runner from description [");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getMethodName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "aClass", "Lorg/junit/runner/Request;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "method", "Lorg/junit/runner/Request;Ljava/lang/Class;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "constructLeafRequest", "Lorg/junit/runner/Request;Ljava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/runner/Description;", ">;)", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "buildRunner", "Lorg/junit/runner/Runner;Lorg/junit/runner/Description;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/experimental/max/MaxCore$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore$1;", "<init>", "VLorg/junit/experimental/max/MaxCore;Ljava/util/List;", new int[] { 3, 4, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findLeaves", "Ljava/util/List;Lorg/junit/runner/Request;", new String[] { "(", "Lorg/junit/runner/Request;", ")", "Ljava/util/List", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "findLeaves", "VLorg/junit/runner/Description;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 1, 2, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findLeaves", "VLorg/junit/runner/Description;Lorg/junit/runner/Description;Ljava/util/List;", new String[] { "(", "Lorg/junit/runner/Description;", "Lorg/junit/runner/Description;", "Ljava/util/List", "<", "Lorg/junit/runner/Description;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "isEmpty", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "warning(junit.framework.TestSuite$1)");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "malformed JUnit 3 test class: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 7, 2 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 7, 6 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "findLeaves", "VLorg/junit/runner/Description;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 4, 6, 0, 7 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "forFolder", "Lorg/junit/experimental/max/MaxCore;Ljava/lang/String;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/File;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/max/MaxCore;", "storedLocally", "Lorg/junit/experimental/max/MaxCore;Ljava/io/File;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getMalformedTestClass", "Ljava/lang/Class;Lorg/junit/runner/Description;", new String[] { "(", "Lorg/junit/runner/Description;", ")", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/ClassNotFoundException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "malformed JUnit 3 test class: ");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "replace", "Ljava/lang/String;Ljava/lang/CharSequence;Ljava/lang/CharSequence;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Class;", "forName", "Ljava/lang/Class;Ljava/lang/String;", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "storedLocally", "Lorg/junit/experimental/max/MaxCore;Ljava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/max/MaxCore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "<init>", "VLjava/io/File;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Lorg/junit/runner/Result;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Result;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "aClass", "Lorg/junit/runner/Request;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/JUnitCore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/JUnitCore;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;Lorg/junit/runner/JUnitCore;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;Lorg/junit/runner/JUnitCore;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxCore;", "fHistory", "Lorg/junit/experimental/max/MaxHistory;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "listener", "Lorg/junit/runner/notification/RunListener;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "addListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 3, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxCore;", "sortRequest", "Lorg/junit/runner/Request;Lorg/junit/runner/Request;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Runner;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sortRequest", "Lorg/junit/runner/Request;Lorg/junit/runner/Request;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 3, 0, "Lorg/junit/internal/requests/SortingRequest;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "findLeaves", "Ljava/util/List;Lorg/junit/runner/Request;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxCore;", "fHistory", "Lorg/junit/experimental/max/MaxHistory;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "testComparator", "Ljava/util/Comparator;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "sort", "VLjava/util/List;Ljava/util/Comparator;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "constructLeafRequest", "Lorg/junit/runner/Request;Ljava/util/List;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sortedLeavesForTest", "Ljava/util/List;Lorg/junit/runner/Request;", new String[] { "(", "Lorg/junit/runner/Request;", ")", "Ljava/util/List", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxCore;", "sortRequest", "Lorg/junit/runner/Request;Lorg/junit/runner/Request;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore;", "findLeaves", "Ljava/util/List;Lorg/junit/runner/Request;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMaxHistory$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lorg/junit/experimental/max/MaxHistory$1;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lorg/junit/experimental/max/MaxHistory$1;", null, "Ljava/lang/Object;", null);
	cv.visitSource("MaxHistory.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/max/MaxHistory$1;", "Lorg/junit/experimental/max/MaxHistory;", null, ACC_STATIC + ACC_SYNTHETIC);
	cv.visitEnd();
}

public static void dumpMaxHistory$TestComparator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, 0, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("MaxHistory.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/max/MaxHistory$TestComparator;", "Lorg/junit/experimental/max/MaxHistory;", "TestComparator", ACC_PRIVATE);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/experimental/max/MaxHistory;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/max/MaxHistory;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/max/MaxHistory;Lorg/junit/experimental/max/MaxHistory$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "<init>", "VLorg/junit/experimental/max/MaxHistory;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getFailure", "Ljava/lang/Long;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "getFailureTimestamp", "Ljava/lang/Long;Lorg/junit/runner/Description;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runner/Description;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "isNewTest", "ZLorg/junit/runner/Description;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, -1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "isNewTest", "ZLorg/junit/runner/Description;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "getFailure", "Ljava/lang/Long;Lorg/junit/runner/Description;", new int[] { 3, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "getFailure", "Ljava/lang/Long;Lorg/junit/runner/Description;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Long;", "compareTo", "ILjava/lang/Long;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "getTestDuration", "Ljava/lang/Long;Lorg/junit/runner/Description;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "getTestDuration", "Ljava/lang/Long;Lorg/junit/runner/Description;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Long;", "compareTo", "ILjava/lang/Long;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMaxHistory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/max/MaxHistory;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/max/MaxHistory;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visitSource("MaxHistory.java", null);
	cv.visitMemberClass("Lorg/junit/experimental/max/MaxHistory$1;", "Lorg/junit/experimental/max/MaxHistory;", "1");
	cv.visitMemberClass("Lorg/junit/experimental/max/MaxHistory$TestComparator;", "Lorg/junit/experimental/max/MaxHistory;", "TestComparator");
	cv.visitMemberClass("Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "Lorg/junit/experimental/max/MaxHistory;", "RememberingListener");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fDurations", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/String;", "Ljava/lang/Long;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fFailureTimestamps", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/String;", "Ljava/lang/Long;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fHistoryStore", "Ljava/io/File;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fDurations", "Ljava/util/Map;", 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fFailureTimestamps", "Ljava/util/Map;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fHistoryStore", "Ljava/io/File;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "VLorg/junit/experimental/max/MaxHistory;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory;", "save", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "forFolder", "Lorg/junit/experimental/max/MaxHistory;Ljava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "exists", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, "Lorg/junit/experimental/max/CouldNotReadCoreException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/max/MaxHistory;", "readHistory", "Lorg/junit/experimental/max/MaxHistory;Ljava/io/File;", new int[] { 2 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/CouldNotReadCoreException;", "printStackTrace", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "delete", "Z", new int[] { 2 });
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/max/MaxHistory;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory;", "<init>", "VLjava/io/File;", new int[] { 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "readHistory", "Lorg/junit/experimental/max/MaxHistory;Ljava/io/File;", null, new String[] { "Lorg/junit/experimental/max/CouldNotReadCoreException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/FileInputStream;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileInputStream;", "<init>", "VLjava/io/File;", new int[] { 1, 4 });
		mv.visitLabel(l1);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l1, l3, l4, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/ObjectInputStream;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/ObjectInputStream;", "<init>", "VLjava/io/InputStream;", new int[] { 2, 1 });
		mv.visitLabel(l3);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l3, l5, l6, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/ObjectInputStream;", "readObject", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/experimental/max/MaxHistory;");
		mv.visitLabel(l5);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l5, l7, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/ObjectInputStream;", "close", "V", new int[] { 2 });
		mv.visitLabel(l7);
		Label l8 = new Label();
		mv.visitTryCatchBlock(l7, l8, l2, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileInputStream;", "close", "V", new int[] { 1 });
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitTryCatchBlock(l9, l4, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/ObjectInputStream;", "close", "V", new int[] { 2 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitTryCatchBlock(l10, l2, l2, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileInputStream;", "close", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/experimental/max/CouldNotReadCoreException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/CouldNotReadCoreException;", "<init>", "VLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "save", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/ObjectOutputStream;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/FileOutputStream;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fHistoryStore", "Ljava/io/File;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileOutputStream;", "<init>", "VLjava/io/File;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/ObjectOutputStream;", "<init>", "VLjava/io/OutputStream;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/ObjectOutputStream;", "writeObject", "VLjava/lang/Object;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/ObjectOutputStream;", "close", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getFailureTimestamp", "Ljava/lang/Long;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fFailureTimestamps", "Ljava/util/Map;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Long;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getTestDuration", "Ljava/lang/Long;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fDurations", "Ljava/util/Map;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Long;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "isNewTest", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fDurations", "Ljava/util/Map;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "containsKey", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "listener", "Lorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "<init>", "VLorg/junit/experimental/max/MaxHistory;Lorg/junit/experimental/max/MaxHistory$1;", new int[] { 0, 2, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "putTestDuration", "VLorg/junit/runner/Description;J", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fDurations", "Ljava/util/Map;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "putTestFailureTimestamp", "VLorg/junit/runner/Description;J", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory;", "fFailureTimestamps", "Ljava/util/Map;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testComparator", "Ljava/util/Comparator;", new String[] { "()", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/max/MaxHistory$TestComparator;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory$TestComparator;", "<init>", "VLorg/junit/experimental/max/MaxHistory;Lorg/junit/experimental/max/MaxHistory$1;", new int[] { 0, 2, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFailureList(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/results/FailureList;", null, "Ljava/lang/Object;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/results/FailureList;", null, "Ljava/lang/Object;", null);
	cv.visitSource("FailureList.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "failures", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runner/notification/Failure;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/runner/notification/Failure;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/results/FailureList;", "failures", "Ljava/util/List;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "result", "Lorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lorg/junit/runner/Result;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Result;", "<init>", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "createListener", "Lorg/junit/runner/notification/RunListener;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/FailureList;", "failures", "Ljava/util/List;", 5, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runner/notification/Failure;");
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 3, 1 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 6, "I can't believe this happened");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpPrintableResult(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/results/PrintableResult;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/results/PrintableResult;", null, "Ljava/lang/Object;", null);
	cv.visitSource("PrintableResult.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "result", "Lorg/junit/runner/Result;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/runner/notification/Failure;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/results/FailureList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/results/FailureList;", "<init>", "VLjava/util/List;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/results/FailureList;", "result", "Lorg/junit/runner/Result;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/results/PrintableResult;", "<init>", "VLorg/junit/runner/Result;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/results/PrintableResult;", "result", "Lorg/junit/runner/Result;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "testResult", "Lorg/junit/experimental/results/PrintableResult;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/experimental/results/PrintableResult;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "aClass", "Lorg/junit/runner/Request;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/results/PrintableResult;", "testResult", "Lorg/junit/experimental/results/PrintableResult;Lorg/junit/runner/Request;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "testResult", "Lorg/junit/experimental/results/PrintableResult;Lorg/junit/runner/Request;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/results/PrintableResult;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/JUnitCore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/JUnitCore;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/results/PrintableResult;", "<init>", "VLorg/junit/runner/Result;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "failureCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/PrintableResult;", "result", "Lorg/junit/runner/Result;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getFailures", "Ljava/util/List;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/ByteArrayOutputStream;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/ByteArrayOutputStream;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/TextListener;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/PrintStream;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintStream;", "<init>", "VLjava/io/OutputStream;", new int[] { 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "<init>", "VLjava/io/PrintStream;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/PrintableResult;", "result", "Lorg/junit/runner/Result;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/TextListener;", "testRunFinished", "VLorg/junit/runner/Result;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/ByteArrayOutputStream;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResultMatchers$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/experimental/results/ResultMatchers$1;", new String[] { "Lorg/hamcrest/TypeSafeMatcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/experimental/results/ResultMatchers$1;", new String[] { "Lorg/hamcrest/TypeSafeMatcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visitSource("ResultMatchers.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/results/ResultMatchers;", "failureCountIs", "Lorg/hamcrest/Matcher;I");
	cv.visitInnerClass(null, "Lorg/junit/experimental/results/ResultMatchers;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$count", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/experimental/results/ResultMatchers$1;", "val$count", "I", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/TypeSafeMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "has ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/experimental/results/ResultMatchers$1;", "val$count", "I", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, " failures");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "matchesSafely", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/experimental/results/PrintableResult;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/results/ResultMatchers$1;", "matchesSafely", "ZLorg/junit/experimental/results/PrintableResult;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "matchesSafely", "ZLorg/junit/experimental/results/PrintableResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/results/PrintableResult;", "failureCount", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/experimental/results/ResultMatchers$1;", "val$count", "I", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResultMatchers$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/experimental/results/ResultMatchers$2;", new String[] { "Lorg/hamcrest/BaseMatcher", "<", "Ljava/lang/Object;", ">;" }, "Lorg/hamcrest/BaseMatcher;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/experimental/results/ResultMatchers$2;", new String[] { "Lorg/hamcrest/BaseMatcher", "<", "Ljava/lang/Object;", ">;" }, "Lorg/hamcrest/BaseMatcher;", null);
	cv.visitSource("ResultMatchers.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/results/ResultMatchers;", "hasSingleFailureContaining", "Lorg/hamcrest/Matcher;Ljava/lang/String;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/results/ResultMatchers;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$string", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/results/ResultMatchers$2;", "val$string", "Ljava/lang/String;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/BaseMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "has single failure containing ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/ResultMatchers$2;", "val$string", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "matches", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/ResultMatchers$2;", "val$string", "Ljava/lang/String;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "contains", "ZLjava/lang/CharSequence;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/results/ResultMatchers;", "failureCountIs", "Lorg/hamcrest/Matcher;I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "matches", "ZLjava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResultMatchers$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/experimental/results/ResultMatchers$3;", new String[] { "Lorg/hamcrest/BaseMatcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, "Lorg/hamcrest/BaseMatcher;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/experimental/results/ResultMatchers$3;", new String[] { "Lorg/hamcrest/BaseMatcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, "Lorg/hamcrest/BaseMatcher;", null);
	cv.visitSource("ResultMatchers.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/results/ResultMatchers;", "hasFailureContaining", "Lorg/hamcrest/Matcher;Ljava/lang/String;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/results/ResultMatchers;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$string", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/results/ResultMatchers$3;", "val$string", "Ljava/lang/String;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/BaseMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "has failure containing ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/ResultMatchers$3;", "val$string", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "matches", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/results/ResultMatchers$3;", "val$string", "Ljava/lang/String;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "contains", "ZLjava/lang/CharSequence;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResultMatchers(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/results/ResultMatchers;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/results/ResultMatchers;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ResultMatchers.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failureCountIs", "Lorg/hamcrest/Matcher;I", new String[] { "(I)", "Lorg/hamcrest/Matcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/results/ResultMatchers$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/results/ResultMatchers$1;", "<init>", "VI", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "hasFailureContaining", "Lorg/hamcrest/Matcher;Ljava/lang/String;", new String[] { "(", "Ljava/lang/String;", ")", "Lorg/hamcrest/Matcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/results/ResultMatchers$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/results/ResultMatchers$3;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "hasSingleFailureContaining", "Lorg/hamcrest/Matcher;Ljava/lang/String;", new String[] { "(", "Ljava/lang/String;", ")", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Object;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/results/ResultMatchers$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/results/ResultMatchers$2;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isSuccessful", "Lorg/hamcrest/Matcher;", new String[] { "()", "Lorg/hamcrest/Matcher", "<", "Lorg/junit/experimental/results/PrintableResult;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/results/ResultMatchers;", "failureCountIs", "Lorg/hamcrest/Matcher;I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpDataPoint(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/DataPoint;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/DataPoint;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("DataPoint.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpDataPoints(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/DataPoints;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/DataPoints;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("DataPoints.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterSignature(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/ParameterSignature;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/ParameterSignature;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ParameterSignature.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "annotations", "[Ljava/lang/annotation/Annotation;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "type", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;[Ljava/lang/annotation/Annotation;", new String[] { "(", "Ljava/lang/Class", "<*>;[", "Ljava/lang/annotation/Annotation;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/ParameterSignature;", "type", "Ljava/lang/Class;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/ParameterSignature;", "annotations", "[Ljava/lang/annotation/Annotation;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "findDeepAnnotation", "Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Ljava/lang/Class;I", new String[] { "<T::", "Ljava/lang/annotation/Annotation;", ">([", "Ljava/lang/annotation/Annotation;", "Ljava/lang/Class", "<TT;>;I)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 11, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 9);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInstance", "ZLjava/lang/Object;", new int[] { 10, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 10, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Ljava/lang/annotation/Annotation;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/annotation/Annotation;", "annotationType", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 7, 11, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/ParameterSignature;", "findDeepAnnotation", "Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Ljava/lang/Class;I", new int[] { 8, 6, 10, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 10, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Ljava/lang/annotation/Annotation;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "signatures", "Ljava/util/ArrayList;Ljava/lang/reflect/Method;", new String[] { "(", "Ljava/lang/reflect/Method;", ")", "Ljava/util/ArrayList", "<", "Lorg/junit/experimental/theories/ParameterSignature;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterAnnotations", "[[Ljava/lang/annotation/Annotation;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/ParameterSignature;", "signatures", "Ljava/util/ArrayList;[Ljava/lang/Class;[[Ljava/lang/annotation/Annotation;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "signatures", "Ljava/util/ArrayList;[Ljava/lang/Class;[[Ljava/lang/annotation/Annotation;", new String[] { "([", "Ljava/lang/Class", "<*>;[[", "Ljava/lang/annotation/Annotation;", ")", "Ljava/util/ArrayList", "<", "Lorg/junit/experimental/theories/ParameterSignature;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(2, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/experimental/theories/ParameterSignature;");
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 5, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/ParameterSignature;", "<init>", "VLjava/lang/Class;[Ljava/lang/annotation/Annotation;", new int[] { 2, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "signatures", "Ljava/util/List;Ljava/lang/reflect/Constructor;", new String[] { "(", "Ljava/lang/reflect/Constructor", "<*>;)", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/ParameterSignature;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "getParameterAnnotations", "[[Ljava/lang/annotation/Annotation;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/ParameterSignature;", "signatures", "Ljava/util/ArrayList;[Ljava/lang/Class;[[Ljava/lang/annotation/Annotation;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "canAcceptArrayType", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isArray", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getComponentType", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "canAcceptType", "ZLjava/lang/Class;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "canAcceptType", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/ParameterSignature;", "type", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "findDeepAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new String[] { "<T::", "Ljava/lang/annotation/Annotation;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/ParameterSignature;", "annotations", "[Ljava/lang/annotation/Annotation;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/ParameterSignature;", "findDeepAnnotation", "Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;Ljava/lang/Class;I", new int[] { 2, 0, 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new String[] { "<T::", "Ljava/lang/annotation/Annotation;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "getAnnotations", "Ljava/util/List;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInstance", "ZLjava/lang/Object;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/annotation/Annotation;");
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotations", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/annotation/Annotation;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/ParameterSignature;", "annotations", "[Ljava/lang/annotation/Annotation;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getType", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/ParameterSignature;", "type", "Ljava/lang/Class;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hasAnnotation", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterSupplier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/experimental/theories/ParameterSupplier;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/experimental/theories/ParameterSupplier;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ParameterSupplier.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getValueSources", "Ljava/util/List;Lorg/junit/experimental/theories/ParameterSignature;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", ")", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParametersSuppliedBy(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/ParametersSuppliedBy;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/ParametersSuppliedBy;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("ParametersSuppliedBy.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<+", "Lorg/junit/experimental/theories/ParameterSupplier;", ">;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpPotentialAssignment$CouldNotGenerateValueException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("PotentialAssignment.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;", "Lorg/junit/experimental/theories/PotentialAssignment;", "CouldNotGenerateValueException", ACC_PUBLIC + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpPotentialAssignment(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/experimental/theories/PotentialAssignment;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/experimental/theories/PotentialAssignment;", null, "Ljava/lang/Object;", null);
	cv.visitSource("PotentialAssignment.java", null);
	cv.visitMemberClass("Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;", "Lorg/junit/experimental/theories/PotentialAssignment;", "CouldNotGenerateValueException");
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "forValue", "Lorg/junit/experimental/theories/PotentialAssignment;Ljava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/theories/PotentialAssignment$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/PotentialAssignment$1;", "<init>", "VLjava/lang/Object;Ljava/lang/String;", new int[] { 0, 2, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getDescription", "Ljava/lang/String;", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getValue", "Ljava/lang/Object;", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTheory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/Theory;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/Theory;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Theory.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "nullsAccepted", "Z", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("nullsAccepted", true);
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAllMembersSupplier$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$1;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$1;", null, "Ljava/lang/Object;", null);
	cv.visitSource("AllMembersSupplier.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/theories/internal/AllMembersSupplier$1;", "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", null, ACC_STATIC + ACC_SYNTHETIC);
	cv.visitEnd();
}

public static void dumpAssignments(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/internal/Assignments;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/internal/Assignments;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Assignments.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fAssigned", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fClass", "Lorg/junit/runners/model/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fUnassigned", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/experimental/theories/ParameterSignature;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;Ljava/util/List;Lorg/junit/runners/model/TestClass;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/ParameterSignature;", ">;", "Lorg/junit/runners/model/TestClass;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fUnassigned", "Ljava/util/List;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fClass", "Lorg/junit/runners/model/TestClass;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "allUnassigned", "Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/reflect/Method;Lorg/junit/runners/model/TestClass;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/ParameterSignature;", "signatures", "Ljava/util/List;Ljava/lang/reflect/Constructor;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/ParameterSignature;", "signatures", "Ljava/util/ArrayList;Ljava/lang/reflect/Method;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/theories/internal/Assignments;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/Assignments;", "<init>", "VLjava/util/List;Ljava/util/List;Lorg/junit/runners/model/TestClass;", new int[] { 1, 2, 0, 4 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getConstructorParameterCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fClass", "Lorg/junit/runners/model/TestClass;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/ParameterSignature;", "signatures", "Ljava/util/List;Ljava/lang/reflect/Constructor;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "assignNext", "Lorg/junit/experimental/theories/internal/Assignments;Lorg/junit/experimental/theories/PotentialAssignment;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 6 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/theories/internal/Assignments;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fUnassigned", "Ljava/util/List;", 2, 5);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fUnassigned", "Ljava/util/List;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "subList", "Ljava/util/List;II", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fClass", "Lorg/junit/runners/model/TestClass;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/Assignments;", "<init>", "VLjava/util/List;Ljava/util/List;Lorg/junit/runners/model/TestClass;", new int[] { 1, 0, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getActualValues", "[Ljava/lang/Object;IIZ", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitOperationInsn(INSN_SUB_INT, 3, 6, 5, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 3, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_MOVE, 0, 5);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/experimental/theories/PotentialAssignment;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/PotentialAssignment;", "getValue", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 1, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;", "<init>", "V", new int[] { 3 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_SUB_INT, 3, 0, 5, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 2, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAllArguments", "[Ljava/lang/Object;Z", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getActualValues", "[Ljava/lang/Object;IIZ", new int[] { 2, 0, 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotatedSupplier", "Lorg/junit/experimental/theories/ParameterSupplier;Lorg/junit/experimental/theories/ParameterSignature;", null, new String[] { "Ljava/lang/InstantiationException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/experimental/theories/ParametersSuppliedBy;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "findDeepAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/experimental/theories/ParametersSuppliedBy;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/experimental/theories/ParametersSuppliedBy;", "value", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "newInstance", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/experimental/theories/ParameterSupplier;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getArgumentStrings", "[Ljava/lang/Object;Z", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(2, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/experimental/theories/PotentialAssignment;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/PotentialAssignment;", "getDescription", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 1, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getConstructorArguments", "[Ljava/lang/Object;Z", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/Assignments;", "getConstructorParameterCount", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getActualValues", "[Ljava/lang/Object;IIZ", new int[] { 2, 0, 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMethodArguments", "[Ljava/lang/Object;Z", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/Assignments;", "getConstructorParameterCount", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fAssigned", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getActualValues", "[Ljava/lang/Object;IIZ", new int[] { 2, 0, 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getSupplier", "Lorg/junit/experimental/theories/ParameterSupplier;Lorg/junit/experimental/theories/ParameterSignature;", null, new String[] { "Ljava/lang/InstantiationException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getAnnotatedSupplier", "Lorg/junit/experimental/theories/ParameterSupplier;Lorg/junit/experimental/theories/ParameterSignature;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fClass", "Lorg/junit/runners/model/TestClass;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "<init>", "VLorg/junit/runners/model/TestClass;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isComplete", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fUnassigned", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextUnassigned", "Lorg/junit/experimental/theories/ParameterSignature;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/Assignments;", "fUnassigned", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/experimental/theories/ParameterSignature;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "potentialsForNextUnassigned", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;" }, new String[] { "Ljava/lang/InstantiationException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "nextUnassigned", "Lorg/junit/experimental/theories/ParameterSignature;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getSupplier", "Lorg/junit/experimental/theories/ParameterSupplier;Lorg/junit/experimental/theories/ParameterSignature;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSupplier;", "getValueSources", "Ljava/util/List;Lorg/junit/experimental/theories/ParameterSignature;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterizedAssertionError(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", null, "Ljava/lang/RuntimeException;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", null, "Ljava/lang/RuntimeException;", null);
	cv.visitSource("ParameterizedAssertionError.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "%s(%s)");
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 3, ", ");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", "join", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 3, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 4, 0, 5 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "join", "Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;", new String[] { "(", "Ljava/lang/String;", "Ljava/util/Collection", "<", "Ljava/lang/Object;", ">;)", "Ljava/lang/String;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuffer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuffer;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Collection;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", "stringValueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "append", "Ljava/lang/StringBuffer;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "append", "Ljava/lang/StringBuffer;Ljava/lang/String;", new int[] { 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "join", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", "join", "Ljava/lang/String;Ljava/lang/String;Ljava/util/Collection;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "stringValueOf", "Ljava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "[toString failed]");
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestedOn(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/suppliers/TestedOn;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/experimental/theories/suppliers/TestedOn;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("TestedOn.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Lorg/junit/experimental/theories/ParametersSuppliedBy;", true);
		av0.visitClass("value", "Lorg/junit/experimental/theories/suppliers/TestedOnSupplier;");
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "ints", "[I", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpArrayComparisonFailure(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/ArrayComparisonFailure;", null, "Ljava/lang/AssertionError;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/ArrayComparisonFailure;", null, "Ljava/lang/AssertionError;", null);
	cv.visitSource("ArrayComparisonFailure.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fCause", "Ljava/lang/AssertionError;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fIndices", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Integer;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMessage", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/AssertionError;I", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fIndices", "Ljava/util/List;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fMessage", "Ljava/lang/String;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fCause", "Ljava/lang/AssertionError;", 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/ArrayComparisonFailure;", "addDimension", "VI", new int[] { 1, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addDimension", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fIndices", "Ljava/util/List;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "VILjava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fMessage", "Ljava/lang/String;", 3, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fMessage", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "arrays first differed at element ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fIndices", "Ljava/util/List;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/Integer;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Integer;", "intValue", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "[");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 0, 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "; ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/ArrayComparisonFailure;", "fCause", "Ljava/lang/AssertionError;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/AssertionError;", "getMessage", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/ArrayComparisonFailure;", "getMessage", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAssumptionViolatedException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/AssumptionViolatedException;", null, "Ljava/lang/RuntimeException;", new String[] { "Lorg/hamcrest/SelfDescribing;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/AssumptionViolatedException;", null, "Ljava/lang/RuntimeException;", new String[] { "Lorg/hamcrest/SelfDescribing;" });
	cv.visitSource("AssumptionViolatedException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 2L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fAssumption", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMatcher", "Lorg/hamcrest/Matcher;", new String[] { "Lorg/hamcrest/Matcher", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fValue", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fValueMatcher", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "(", "Ljava/lang/Object;", "Lorg/hamcrest/Matcher", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/String;ZLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 2, 0, 1, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/String;ZLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 2, 3, 0, 1, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "(", "Ljava/lang/String;", "Ljava/lang/Object;", "Lorg/hamcrest/Matcher", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/String;ZLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 1, 2, 0, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/AssumptionViolatedException;", "<init>", "VLjava/lang/String;ZLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 2, 3, 0, 4, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;ZLjava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "(", "Ljava/lang/String;", "Z", "Ljava/lang/Object;", "Lorg/hamcrest/Matcher", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Ljava/lang/Throwable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Throwable;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fAssumption", "Ljava/lang/String;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fValue", "Ljava/lang/Object;", 4, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fMatcher", "Lorg/hamcrest/Matcher;", 5, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/AssumptionViolatedException;", "fValueMatcher", "Z", 3, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fAssumption", "Ljava/lang/String;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fAssumption", "Ljava/lang/String;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/AssumptionViolatedException;", "fValueMatcher", "Z", 0, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fAssumption", "Ljava/lang/String;", 0, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, ": ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitLabel(l2);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "got: ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fValue", "Ljava/lang/Object;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendValue", "Lorg/hamcrest/Description;Ljava/lang/Object;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, ", expected: ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/AssumptionViolatedException;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendDescriptionOf", "Lorg/hamcrest/Description;Lorg/hamcrest/SelfDescribing;", new int[] { 2, 0 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/StringDescription;", "asString", "Ljava/lang/String;Lorg/hamcrest/SelfDescribing;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComparisonCriteria(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/internal/ComparisonCriteria;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/internal/ComparisonCriteria;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ComparisonCriteria.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "assertArraysAreSameLength", "ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "expected array was null");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "actual array was null");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "getLength", "ILjava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "getLength", "ILjava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "array lengths differed, expected.length=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " actual.length=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isArray", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isArray", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "arrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, new String[] { "Lorg/junit/internal/ArrayComparisonFailure;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 10, 11);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 9, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "");
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ComparisonCriteria;", "assertArraysAreSameLength", "ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/String;", new int[] { 8, 10, 11, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_IF_GE, l1, 5, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "get", "Ljava/lang/Object;Ljava/lang/Object;I", new int[] { 10, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "get", "Ljava/lang/Object;Ljava/lang/Object;I", new int[] { 11, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ComparisonCriteria;", "isArray", "ZLjava/lang/Object;", new int[] { 8, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ComparisonCriteria;", "isArray", "ZLjava/lang/Object;", new int[] { 8, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 6, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l6, l7, l8, "Lorg/junit/internal/ArrayComparisonFailure;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/ComparisonCriteria;", "arrayEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 8, 9, 2, 0 });
		mv.visitLabel(l7);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, ": ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/ArrayComparisonFailure;", "addDimension", "VI", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l5);
		Label l9 = new Label();
		Label l10 = new Label();
		mv.visitTryCatchBlock(l5, l9, l10, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/ComparisonCriteria;", "assertElementsEqual", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 8, 2, 0 });
		mv.visitLabel(l9);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l10);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lorg/junit/internal/ArrayComparisonFailure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ArrayComparisonFailure;", "<init>", "VLjava/lang/String;Ljava/lang/AssertionError;I", new int[] { 6, 4, 1, 5 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "assertElementsEqual", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnitSystem(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/internal/JUnitSystem;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/internal/JUnitSystem;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JUnitSystem.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "out", "Ljava/io/PrintStream;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodSorter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/internal/MethodSorter$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, ACC_FINAL, "Lorg/junit/internal/MethodSorter$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("MethodSorter.java", null);
	cv.visitInnerClass("Lorg/junit/internal/MethodSorter$1;", "Lorg/junit/internal/MethodSorter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/Method;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/MethodSorter$1;", "compare", "ILjava/lang/reflect/Method;Ljava/lang/reflect/Method;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILjava/lang/reflect/Method;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "hashCode", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "hashCode", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, -1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/MethodSorter;", "NAME_ASCENDING", "Ljava/util/Comparator;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Comparator;", "compare", "ILjava/lang/Object;Ljava/lang/Object;", new int[] { 2, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodSorter$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/internal/MethodSorter$2;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, ACC_FINAL, "Lorg/junit/internal/MethodSorter$2;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("MethodSorter.java", null);
	cv.visitInnerClass("Lorg/junit/internal/MethodSorter$2;", "Lorg/junit/internal/MethodSorter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/Method;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/MethodSorter$2;", "compare", "ILjava/lang/reflect/Method;Ljava/lang/reflect/Method;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILjava/lang/reflect/Method;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "compareTo", "ILjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "compareTo", "ILjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodSorter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/MethodSorter;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/MethodSorter;", null, "Ljava/lang/Object;", null);
	cv.visitSource("MethodSorter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC, "DEFAULT", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC, "NAME_ASCENDING", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/MethodSorter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/MethodSorter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/MethodSorter;", "DEFAULT", "Ljava/util/Comparator;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/MethodSorter$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/MethodSorter$2;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/MethodSorter;", "NAME_ASCENDING", "Ljava/util/Comparator;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getDeclaredMethods", "[Ljava/lang/reflect/Method;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)[", "Ljava/lang/reflect/Method;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/FixMethodOrder;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/FixMethodOrder;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/MethodSorter;", "getSorter", "Ljava/util/Comparator;Lorg/junit/FixMethodOrder;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredMethods", "[Ljava/lang/reflect/Method;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "sort", "V[Ljava/lang/Object;Ljava/util/Comparator;", new int[] { 1, 0 });
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "getSorter", "Ljava/util/Comparator;Lorg/junit/FixMethodOrder;", new String[] { "(", "Lorg/junit/FixMethodOrder;", ")", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/MethodSorter;", "DEFAULT", "Ljava/util/Comparator;", 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/FixMethodOrder;", "value", "Lorg/junit/runners/MethodSorters;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/MethodSorters;", "getComparator", "Ljava/util/Comparator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpStacktracePrintingMatcher(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">", "Lorg/hamcrest/TypeSafeMatcher", "<TT;>;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">", "Lorg/hamcrest/TypeSafeMatcher", "<TT;>;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visitSource("StacktracePrintingMatcher.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fThrowableMatcher", "Lorg/hamcrest/Matcher;", new String[] { "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/TypeSafeMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "fThrowableMatcher", "Lorg/hamcrest/Matcher;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isException", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Exception;", ">(", "Lorg/hamcrest/Matcher", "<TT;>;)", "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		{
			av0 = mv.visitAnnotation("Lorg/hamcrest/Factory;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "<init>", "VLorg/hamcrest/Matcher;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isThrowable", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">(", "Lorg/hamcrest/Matcher", "<TT;>;)", "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		{
			av0 = mv.visitAnnotation("Lorg/hamcrest/Factory;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "<init>", "VLorg/hamcrest/Matcher;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "readStacktrace", "Ljava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/PrintWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintWriter;", "<init>", "VLjava/io/Writer;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "printStackTrace", "VLjava/io/PrintWriter;", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "describeMismatchSafely", "VLjava/lang/Object;Lorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "describeMismatchSafely", "VLjava/lang/Throwable;Lorg/hamcrest/Description;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "describeMismatchSafely", "VLjava/lang/Throwable;Lorg/hamcrest/Description;", new String[] { "(TT;", "Lorg/hamcrest/Description;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "fThrowableMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "describeMismatch", "VLjava/lang/Object;Lorg/hamcrest/Description;", new int[] { 0, 2, 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "\nStacktrace was: ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "readStacktrace", "Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "fThrowableMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "describeTo", "VLorg/hamcrest/Description;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "matchesSafely", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "matchesSafely", "ZLjava/lang/Throwable;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "matchesSafely", "ZLjava/lang/Throwable;", new String[] { "(TT;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "fThrowableMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "matches", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpThrowableCauseMatcher(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">", "Lorg/hamcrest/TypeSafeMatcher", "<TT;>;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">", "Lorg/hamcrest/TypeSafeMatcher", "<TT;>;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visitSource("ThrowableCauseMatcher.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMatcher", "Lorg/hamcrest/Matcher;", new String[] { "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/TypeSafeMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "hasCause", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">(", "Lorg/hamcrest/Matcher", "<TT;>;)", "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		{
			av0 = mv.visitAnnotation("Lorg/hamcrest/Factory;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "<init>", "VLorg/hamcrest/Matcher;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "describeMismatchSafely", "VLjava/lang/Object;Lorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "describeMismatchSafely", "VLjava/lang/Throwable;Lorg/hamcrest/Description;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "describeMismatchSafely", "VLjava/lang/Throwable;Lorg/hamcrest/Description;", new String[] { "(TT;", "Lorg/hamcrest/Description;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "cause ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 4, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getCause", "Ljava/lang/Throwable;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "describeMismatch", "VLjava/lang/Object;Lorg/hamcrest/Description;", new int[] { 0, 1, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "exception with cause ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendDescriptionOf", "Lorg/hamcrest/Description;Lorg/hamcrest/SelfDescribing;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "matchesSafely", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "matchesSafely", "ZLjava/lang/Throwable;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "matchesSafely", "ZLjava/lang/Throwable;", new String[] { "(TT;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getCause", "Ljava/lang/Throwable;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "matches", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpThrowableMessageMatcher(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">", "Lorg/hamcrest/TypeSafeMatcher", "<TT;>;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">", "Lorg/hamcrest/TypeSafeMatcher", "<TT;>;" }, "Lorg/hamcrest/TypeSafeMatcher;", null);
	cv.visitSource("ThrowableMessageMatcher.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMatcher", "Lorg/hamcrest/Matcher;", new String[] { "Lorg/hamcrest/Matcher", "<", "Ljava/lang/String;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/String;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/TypeSafeMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "hasMessage", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">(", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/String;", ">;)", "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		{
			av0 = mv.visitAnnotation("Lorg/hamcrest/Factory;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "<init>", "VLorg/hamcrest/Matcher;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "describeMismatchSafely", "VLjava/lang/Object;Lorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "describeMismatchSafely", "VLjava/lang/Throwable;Lorg/hamcrest/Description;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "describeMismatchSafely", "VLjava/lang/Throwable;Lorg/hamcrest/Description;", new String[] { "(TT;", "Lorg/hamcrest/Description;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "message ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 4, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "describeMismatch", "VLjava/lang/Object;Lorg/hamcrest/Description;", new int[] { 0, 1, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describeTo", "VLorg/hamcrest/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "exception with message ");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendText", "Lorg/hamcrest/Description;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Description;", "appendDescriptionOf", "Lorg/hamcrest/Description;Lorg/hamcrest/SelfDescribing;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "matchesSafely", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "matchesSafely", "ZLjava/lang/Throwable;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "matchesSafely", "ZLjava/lang/Throwable;", new String[] { "(TT;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "fMatcher", "Lorg/hamcrest/Matcher;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/hamcrest/Matcher;", "matches", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeSafeMatcher(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/internal/matchers/TypeSafeMatcher;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lorg/hamcrest/BaseMatcher", "<TT;>;" }, "Lorg/hamcrest/BaseMatcher;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/internal/matchers/TypeSafeMatcher;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lorg/hamcrest/BaseMatcher", "<TT;>;" }, "Lorg/hamcrest/BaseMatcher;", null);
	cv.visitSource("TypeSafeMatcher.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "expectedType", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/BaseMatcher;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/matchers/TypeSafeMatcher;", "findExpectedType", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/matchers/TypeSafeMatcher;", "expectedType", "Ljava/lang/Class;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/hamcrest/BaseMatcher;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/matchers/TypeSafeMatcher;", "expectedType", "Ljava/lang/Class;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "findExpectedType", "Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Ljava/lang/Object;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l1, 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/MethodSorter;", "getDeclaredMethods", "[Ljava/lang/reflect/Method;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/matchers/TypeSafeMatcher;", "isMatchesSafelyMethod", "ZLjava/lang/reflect/Method;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 5, 5, 6);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitLabel(l4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSuperclass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Error;");
		mv.visitStringInsn(INSN_CONST_STRING, 6, "Cannot determine correct type for matchesSafely() method.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Error;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "isMatchesSafelyMethod", "ZLjava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "matchesSafely");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitArrayLengthInsn(1, 1);
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "isSynthetic", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "matches", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/matchers/TypeSafeMatcher;", "expectedType", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInstance", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/matchers/TypeSafeMatcher;", "matchesSafely", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "matchesSafely", "ZLjava/lang/Object;", new String[] { "(TT;)Z" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo5(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/internal/requests/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/internal/requests/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpClassRoadie(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/ClassRoadie;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/ClassRoadie;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ClassRoadie.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fDescription", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fRunnable", "Ljava/lang/Runnable;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestClass", "Lorg/junit/internal/runners/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/internal/runners/TestClass;Lorg/junit/runner/Description;Ljava/lang/Runnable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fDescription", "Lorg/junit/runner/Description;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fRunnable", "Ljava/lang/Runnable;", 4, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runAfters", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAfters", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Method;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/reflect/InvocationTargetException;");
		Label l5 = new Label();
		mv.visitTryCatchBlock(l2, l3, l5, "Ljava/lang/Throwable;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 4, 5 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/ClassRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/ClassRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 2 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runBefores", "V", null, new String[] { "Lorg/junit/internal/runners/FailedBefore;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/reflect/InvocationTargetException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getBefores", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Method;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 4, 5 });
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTryCatchBlock(l7, l3, l3, "Lorg/junit/internal/AssumptionViolatedException;");
		mv.visitTryCatchBlock(l7, l3, l4, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lorg/junit/internal/runners/FailedBefore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/FailedBefore;", "<init>", "V", new int[] { 4 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/ClassRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lorg/junit/internal/runners/FailedBefore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/FailedBefore;", "<init>", "V", new int[] { 4 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "addFailure", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fDescription", "Lorg/junit/runner/Description;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 1, 2, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runProtected", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/runners/FailedBefore;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ClassRoadie;", "runBefores", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/ClassRoadie;", "runUnprotected", "V", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ClassRoadie;", "runAfters", "V", new int[] { 1 });
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ClassRoadie;", "runAfters", "V", new int[] { 1 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ClassRoadie;", "runAfters", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runUnprotected", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ClassRoadie;", "fRunnable", "Ljava/lang/Runnable;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Runnable;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFailedBefore(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/FailedBefore;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, 0, "Lorg/junit/internal/runners/FailedBefore;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("FailedBefore.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpInitializationError(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/InitializationError;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/InitializationError;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("InitializationError.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fErrors", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/Throwable;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 2, 4 });
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/InitializationError;", "<init>", "V[Ljava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/InitializationError;", "fErrors", "Ljava/util/List;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT + ACC_CONSTRUCTOR, "<init>", "V[Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/InitializationError;", "<init>", "VLjava/util/List;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getCauses", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/InitializationError;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit38ClassRunner$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lorg/junit/internal/runners/JUnit38ClassRunner$1;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lorg/junit/internal/runners/JUnit38ClassRunner$1;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JUnit38ClassRunner.java", null);
	cv.visitInnerClass("Lorg/junit/internal/runners/JUnit38ClassRunner$1;", "Lorg/junit/internal/runners/JUnit38ClassRunner;", null, ACC_STATIC + ACC_SYNTHETIC);
	cv.visitEnd();
}

public static void dumpJUnit4ClassRunner$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visit(0, 0, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visitSource("JUnit4ClassRunner.java", null);
	cv.visitOuterClass("Lorg/junit/internal/runners/JUnit4ClassRunner;", "run", "VLorg/junit/runner/notification/RunNotifier;");
	cv.visitInnerClass(null, "Lorg/junit/internal/runners/JUnit4ClassRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/JUnit4ClassRunner;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "runMethods", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4ClassRunner$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, 0, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("JUnit4ClassRunner.java", null);
	cv.visitOuterClass("Lorg/junit/internal/runners/JUnit4ClassRunner;", "sort", "VLorg/junit/runner/manipulation/Sorter;");
	cv.visitInnerClass(null, "Lorg/junit/internal/runners/JUnit4ClassRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$sorter", "Lorg/junit/runner/manipulation/Sorter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/JUnit4ClassRunner;Lorg/junit/runner/manipulation/Sorter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "val$sorter", "Lorg/junit/runner/manipulation/Sorter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/reflect/Method;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "compare", "ILjava/lang/reflect/Method;Ljava/lang/reflect/Method;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILjava/lang/reflect/Method;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "val$sorter", "Lorg/junit/runner/manipulation/Sorter;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "methodDescription", "Lorg/junit/runner/Description;Ljava/lang/reflect/Method;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "this$0", "Lorg/junit/internal/runners/JUnit4ClassRunner;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "methodDescription", "Lorg/junit/runner/Description;Ljava/lang/reflect/Method;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter;", "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodRoadie$1$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/MethodRoadie$1$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/concurrent/Callable", "<", "Ljava/lang/Object;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/concurrent/Callable;" });
	cv.visit(0, 0, "Lorg/junit/internal/runners/MethodRoadie$1$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/concurrent/Callable", "<", "Ljava/lang/Object;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/concurrent/Callable;" });
	cv.visitSource("MethodRoadie.java", null);
	cv.visitOuterClass("Lorg/junit/internal/runners/MethodRoadie$1;", "run", "V");
	cv.visitInnerClass(null, "Lorg/junit/internal/runners/MethodRoadie$1;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$1", "Lorg/junit/internal/runners/MethodRoadie$1;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/MethodRoadie$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$1$1;", "this$1", "Lorg/junit/internal/runners/MethodRoadie$1;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "call", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$1$1;", "this$1", "Lorg/junit/internal/runners/MethodRoadie$1;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$1;", "this$0", "Lorg/junit/internal/runners/MethodRoadie;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "runTestMethod", "V", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodRoadie$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/MethodRoadie$1;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visit(0, 0, "Lorg/junit/internal/runners/MethodRoadie$1;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visitSource("MethodRoadie.java", null);
	cv.visitOuterClass("Lorg/junit/internal/runners/MethodRoadie;", "runWithTimeout", "VJ");
	cv.visitInnerClass(null, "Lorg/junit/internal/runners/MethodRoadie;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/internal/runners/MethodRoadie;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$timeout", "J", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/MethodRoadie;J", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$1;", "this$0", "Lorg/junit/internal/runners/MethodRoadie;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lorg/junit/internal/runners/MethodRoadie$1;", "val$timeout", "J", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/concurrent/Executors;", "newSingleThreadExecutor", "Ljava/util/concurrent/ExecutorService;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/MethodRoadie$1$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie$1$1;", "<init>", "VLorg/junit/internal/runners/MethodRoadie$1;", new int[] { 0, 12 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "submit", "Ljava/util/concurrent/Future;Ljava/util/concurrent/Callable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "shutdown", "V", new int[] { 3 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/util/concurrent/TimeoutException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Exception;");
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/internal/runners/MethodRoadie$1;", "val$timeout", "J", 5, 12);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/concurrent/TimeUnit;", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;", 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "awaitTermination", "ZJLjava/util/concurrent/TimeUnit;", new int[] { 3, 5, 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "shutdownNow", "Ljava/util/List;", new int[] { 3 });
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 5, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/concurrent/TimeUnit;", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;", 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/Future;", "get", "Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;", new int[] { 2, 5, 6, 7 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$1;", "this$0", "Lorg/junit/internal/runners/MethodRoadie;", 5, 12);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 7, "test timed out after %d milliseconds");
		mv.visitVarInsn(INSN_CONST_4, 8, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 8, 0, 8, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/internal/runners/MethodRoadie$1;", "val$timeout", "J", 10, 12);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 10, 8, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 5, 6 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$1;", "this$0", "Lorg/junit/internal/runners/MethodRoadie;", 5, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 5, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodRoadie$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/MethodRoadie$2;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visit(0, 0, "Lorg/junit/internal/runners/MethodRoadie$2;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visitSource("MethodRoadie.java", null);
	cv.visitOuterClass("Lorg/junit/internal/runners/MethodRoadie;", "runTest", "V");
	cv.visitInnerClass(null, "Lorg/junit/internal/runners/MethodRoadie;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/internal/runners/MethodRoadie;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/MethodRoadie;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$2;", "this$0", "Lorg/junit/internal/runners/MethodRoadie;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie$2;", "this$0", "Lorg/junit/internal/runners/MethodRoadie;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "runTestMethod", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodRoadie(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/MethodRoadie;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/MethodRoadie;", null, "Ljava/lang/Object;", null);
	cv.visitSource("MethodRoadie.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fDescription", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTest", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Object;Lorg/junit/internal/runners/TestMethod;Lorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTest", "Ljava/lang/Object;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fDescription", "Lorg/junit/runner/Description;", 4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runAfters", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getAfters", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Method;");
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/reflect/InvocationTargetException;");
		Label l5 = new Label();
		mv.visitTryCatchBlock(l2, l3, l5, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTest", "Ljava/lang/Object;", 4, 6);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 4, 5 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 2 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runBefores", "V", null, new String[] { "Lorg/junit/internal/runners/FailedBefore;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/reflect/InvocationTargetException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getBefores", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Method;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTest", "Ljava/lang/Object;", 4, 6);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 4, 5 });
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTryCatchBlock(l7, l3, l3, "Lorg/junit/internal/AssumptionViolatedException;");
		mv.visitTryCatchBlock(l7, l3, l4, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lorg/junit/internal/runners/FailedBefore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/FailedBefore;", "<init>", "V", new int[] { 4 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lorg/junit/internal/runners/FailedBefore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/FailedBefore;", "<init>", "V", new int[] { 4 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runWithTimeout", "VJ", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/MethodRoadie$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie$1;", "<init>", "VLorg/junit/internal/runners/MethodRoadie;J", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "runBeforesThenTestThenAfters", "VLjava/lang/Runnable;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "addFailure", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fDescription", "Lorg/junit/runner/Description;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 1, 2, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "isIgnored", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fDescription", "Lorg/junit/runner/Description;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestIgnored", "VLorg/junit/runner/Description;", new int[] { 2, 3 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fDescription", "Lorg/junit/runner/Description;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestStarted", "VLorg/junit/runner/Description;", new int[] { 2, 3 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getTimeout", "J", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 2, 0);
		mv.visitOperationInsn(INSN_CMP_LONG, 2, 0, 2, 0);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l5, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie;", "runWithTimeout", "VJ", new int[] { 5, 0, 1 });
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fDescription", "Lorg/junit/runner/Description;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		Label l6 = new Label();
		mv.visitTryCatchBlock(l5, l6, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "runTest", "V", new int[] { 5 });
		mv.visitLabel(l6);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 3, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fDescription", "Lorg/junit/runner/Description;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runBeforesThenTestThenAfters", "VLjava/lang/Runnable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/runners/FailedBefore;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Exception;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie;", "runBefores", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Runnable;", "run", "V", new int[] { 4 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie;", "runAfters", "V", new int[] { 3 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie;", "runAfters", "V", new int[] { 3 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitTryCatchBlock(l6, l4, l4, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "test should never throw an exception to this level");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie;", "runAfters", "V", new int[] { 3 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runTest", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/MethodRoadie$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie$2;", "<init>", "VLorg/junit/internal/runners/MethodRoadie;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "runBeforesThenTestThenAfters", "VLjava/lang/Runnable;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runTestMethod", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/reflect/InvocationTargetException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTest", "Ljava/lang/Object;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "invoke", "VLjava/lang/Object;", new int[] { 3, 4 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "expectsException", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Expected exception: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getExpectedException", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 0, 0, "Lorg/junit/internal/AssumptionViolatedException;");
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "expectsException", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "isUnexpected", "ZLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Unexpected exception, expected<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodRoadie;", "fTestMethod", "Lorg/junit/internal/runners/TestMethod;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getExpectedException", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "> but was<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 3, 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "addFailure", "VLjava/lang/Throwable;", new int[] { 6, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodValidator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/MethodValidator;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/MethodValidator;", null, "Ljava/lang/Object;", null);
	cv.visitSource("MethodValidator.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fErrors", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestClass", "Lorg/junit/internal/runners/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateTestMethods", "VLjava/lang/Class;Z", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;Z)V" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 4, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 4, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 4, 10);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 10, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "should");
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 4, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "() ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " be static");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getDeclaringClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getModifiers", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 4, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getDeclaringClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " should be public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 4, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " should be public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getReturnType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Void;", "TYPE", "Ljava/lang/Class;", 5, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l7, 4, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 4, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " should be void");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayLengthInsn(4, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 4, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " should have no parameters");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitJumpInsn(INSN_GOTO_16, l0, 0, 0);
		mv.visitLabel(l3);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "should not");
		mv.visitJumpInsn(INSN_GOTO_16, l4, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "assertValid", "V", null, new String[] { "Lorg/junit/internal/runners/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/InitializationError;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/InitializationError;", "<init>", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validateInstanceMethods", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/After;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodValidator;", "validateTestMethods", "VLjava/lang/Class;Z", new int[] { 4, 1, 2 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Before;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodValidator;", "validateTestMethods", "VLjava/lang/Class;Z", new int[] { 4, 1, 2 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodValidator;", "validateTestMethods", "VLjava/lang/Class;Z", new int[] { 4, 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 1, 4);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 1, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "No runnable methods");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validateMethodsForDefaultRunner", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodValidator;", "validateNoArgConstructor", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodValidator;", "validateStaticMethods", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodValidator;", "validateInstanceMethods", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validateNoArgConstructor", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Exception;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/MethodValidator;", "fErrors", "Ljava/util/List;", 1, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Test class should have public zero-argument constructor");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validateStaticMethods", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/BeforeClass;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodValidator;", "validateTestMethods", "VLjava/lang/Class;Z", new int[] { 2, 0, 1 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/AfterClass;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodValidator;", "validateTestMethods", "VLjava/lang/Class;Z", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestClass(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/TestClass;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/TestClass;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestClass.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/TestClass;", "fClass", "Ljava/lang/Class;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getSuperClasses", "Ljava/util/List;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/util/List", "<", "Ljava/lang/Class", "<*>;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "add", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSuperclass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isShadowed", "ZLjava/lang/reflect/Method;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayLengthInsn(2, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayLengthInsn(3, 3);
		mv.visitJumpInsn(INSN_IF_NE, l1, 2, 3);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayLengthInsn(2, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isShadowed", "ZLjava/lang/reflect/Method;Ljava/util/List;", new String[] { "(", "Ljava/lang/reflect/Method;", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/TestClass;", "isShadowed", "ZLjava/lang/reflect/Method;Ljava/lang/reflect/Method;", new int[] { 3, 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runsTopToBottom", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Before;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/BeforeClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getAfters", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/AfterClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 8 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestClass;", "fClass", "Ljava/lang/Class;", 9, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/TestClass;", "getSuperClasses", "Ljava/util/List;Ljava/lang/Class;", new int[] { 10, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/MethodSorter;", "getDeclaredMethods", "[Ljava/lang/reflect/Method;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		mv.visitArrayLengthInsn(6, 1);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitJumpInsn(INSN_IF_GE, l0, 5, 6);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/TestClass;", "isShadowed", "ZLjava/lang/reflect/Method;Ljava/util/List;", new int[] { 10, 3, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 8, 3 });
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/TestClass;", "runsTopToBottom", "ZLjava/lang/Class;", new int[] { 10, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "reverse", "VLjava/util/List;", new int[] { 8 });
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 8);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getBefores", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/BeforeClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getConstructor", "Ljava/lang/reflect/Constructor;", new String[] { "()", "Ljava/lang/reflect/Constructor", "<*>;" }, new String[] { "Ljava/lang/SecurityException;", "Ljava/lang/NoSuchMethodException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestClass;", "fClass", "Ljava/lang/Class;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructor", "Ljava/lang/reflect/Constructor;[Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getJavaClass", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTestMethods", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestMethod(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/TestMethod;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/TestMethod;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestMethod.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMethod", "Ljava/lang/reflect/Method;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestClass", "Lorg/junit/internal/runners/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Method;Lorg/junit/internal/runners/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "expectsException", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getExpectedException", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getAfters", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 0, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/After;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getBefores", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 0, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Before;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getExpectedException", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<+", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/Test;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/Test;", "expected", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Test$None;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 1, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/Test;", "expected", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTimeout", "J", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fMethod", "Ljava/lang/reflect/Method;", 3, 5);
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/Test;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_WIDE, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/Test;", "timeout", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "invoke", "VLjava/lang/Object;", null, new String[] { "Ljava/lang/IllegalArgumentException;", "Ljava/lang/IllegalAccessException;", "Ljava/lang/reflect/InvocationTargetException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 3, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isIgnored", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/TestMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Ignore;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "isUnexpected", "ZLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestMethod;", "getExpectedException", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpEachTestNotifier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/model/EachTestNotifier;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/model/EachTestNotifier;", null, "Ljava/lang/Object;", null);
	cv.visitSource("EachTestNotifier.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fDescription", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fDescription", "Lorg/junit/runner/Description;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addMultipleFailureException", "VLorg/junit/runners/model/MultipleFailureException;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/MultipleFailureException;", "getFailures", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "addFailure", "VLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addFailedAssumption", "VLorg/junit/internal/AssumptionViolatedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fDescription", "Lorg/junit/runner/Description;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 1, 2, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestAssumptionFailed", "VLorg/junit/runner/notification/Failure;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addFailure", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Lorg/junit/runners/model/MultipleFailureException;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lorg/junit/runners/model/MultipleFailureException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "addMultipleFailureException", "VLorg/junit/runners/model/MultipleFailureException;", new int[] { 3, 4 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fDescription", "Lorg/junit/runner/Description;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 1, 2, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestFinished", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fDescription", "Lorg/junit/runner/Description;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestIgnored", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fDescription", "Lorg/junit/runner/Description;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestIgnored", "VLorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestStarted", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fDescription", "Lorg/junit/runner/Description;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestStarted", "VLorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpReflectiveCallable(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/internal/runners/model/ReflectiveCallable;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/internal/runners/model/ReflectiveCallable;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ReflectiveCallable.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/reflect/InvocationTargetException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/ReflectiveCallable;", "runReflectiveCall", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "runReflectiveCall", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo6(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/internal/runners/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/internal/runners/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpRuleFieldValidator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL + ACC_ENUM, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", new String[] { "Ljava/lang/Enum", "<", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL + ACC_ENUM, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", new String[] { "Ljava/lang/Enum", "<", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visitSource("RuleFieldValidator.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$VALUES", "[Lorg/junit/internal/runners/rules/RuleFieldValidator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "CLASS_RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "CLASS_RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fAnnotation", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMethods", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fStaticMembers", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(14, 0);
		mv.visitVarInsn(INSN_CONST_4, 13, 3);
		mv.visitVarInsn(INSN_CONST_4, 12, 2);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "CLASS_RULE_VALIDATOR");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/ClassRule;");
		mv.visitVarInsn(INSN_MOVE, 4, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "<init>", "VLjava/lang/String;ILjava/lang/Class;ZZ", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "CLASS_RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "RULE_VALIDATOR");
		mv.visitTypeInsn(INSN_CONST_CLASS, 6, 0, 0, "Lorg/junit/Rule;");
		mv.visitVarInsn(INSN_MOVE, 7, 2);
		mv.visitVarInsn(INSN_MOVE, 8, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "<init>", "VLjava/lang/String;ILjava/lang/Class;ZZ", new int[] { 3, 4, 5, 6, 7, 8 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitStringInsn(INSN_CONST_STRING, 7, "CLASS_RULE_METHOD_VALIDATOR");
		mv.visitTypeInsn(INSN_CONST_CLASS, 9, 0, 0, "Lorg/junit/ClassRule;");
		mv.visitVarInsn(INSN_MOVE, 8, 12);
		mv.visitVarInsn(INSN_MOVE, 10, 5);
		mv.visitVarInsn(INSN_MOVE, 11, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "<init>", "VLjava/lang/String;ILjava/lang/Class;ZZ", new int[] { 6, 7, 8, 9, 10, 11 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "CLASS_RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitStringInsn(INSN_CONST_STRING, 7, "RULE_METHOD_VALIDATOR");
		mv.visitTypeInsn(INSN_CONST_CLASS, 9, 0, 0, "Lorg/junit/Rule;");
		mv.visitVarInsn(INSN_MOVE, 8, 13);
		mv.visitVarInsn(INSN_MOVE, 10, 5);
		mv.visitVarInsn(INSN_MOVE, 11, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "<init>", "VLjava/lang/String;ILjava/lang/Class;ZZ", new int[] { 6, 7, 8, 9, 10, 11 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 6, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 4);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "CLASS_RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "CLASS_RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 12);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 13);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "$VALUES", "[Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;ILjava/lang/Class;ZZ", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;ZZ)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Enum;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fAnnotation", "Ljava/lang/Class;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fStaticMembers", "Z", 5, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fMethods", "Z", 4, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addError", "VLjava/util/List;Lorg/junit/runners/model/FrameworkMember;Ljava/lang/String;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;", "Lorg/junit/runners/model/FrameworkMember", "<*>;", "Ljava/lang/String;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "The @");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fAnnotation", "Ljava/lang/Class;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " '");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "' ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isMethodRule", "ZLorg/junit/runners/model/FrameworkMember;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMember", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/rules/MethodRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "getType", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isTestRule", "ZLorg/junit/runners/model/FrameworkMember;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMember", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "getType", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateMember", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMember", "<*>;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validateStatic", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validatePublic", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validateTestRuleOrMethodRule", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validatePublic", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMember", "<*>;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "isPublic", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "must be public.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "addError", "VLjava/util/List;Lorg/junit/runners/model/FrameworkMember;Ljava/lang/String;", new int[] { 1, 3, 2, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateStatic", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMember", "<*>;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fStaticMembers", "Z", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "isStatic", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "must be static.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "addError", "VLjava/util/List;Lorg/junit/runners/model/FrameworkMember;Ljava/lang/String;", new int[] { 1, 3, 2, 0 });
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fStaticMembers", "Z", 0, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "isStatic", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "must not be static.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "addError", "VLjava/util/List;Lorg/junit/runners/model/FrameworkMember;Ljava/lang/String;", new int[] { 1, 3, 2, 0 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateTestRuleOrMethodRule", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMember", "<*>;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "isMethodRule", "ZLorg/junit/runners/model/FrameworkMember;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "isTestRule", "ZLorg/junit/runners/model/FrameworkMember;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fMethods", "Z", 0, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "must return an implementation of MethodRule or TestRule.");
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "addError", "VLjava/util/List;Lorg/junit/runners/model/FrameworkMember;Ljava/lang/String;", new int[] { 1, 3, 2, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "must implement MethodRule or TestRule.");
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "Lorg/junit/internal/runners/rules/RuleFieldValidator;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Enum;", "valueOf", "Ljava/lang/Enum;Ljava/lang/Class;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "[Lorg/junit/internal/runners/rules/RuleFieldValidator;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "$VALUES", "[Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Lorg/junit/internal/runners/rules/RuleFieldValidator;", "clone", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Lorg/junit/internal/runners/rules/RuleFieldValidator;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validate", "VLorg/junit/runners/model/TestClass;Ljava/util/List;", new String[] { "(", "Lorg/junit/runners/model/TestClass;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fMethods", "Z", 3, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fAnnotation", "Ljava/lang/Class;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 5, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMember;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validateMember", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/List;", new int[] { 4, 0, 6 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "fAnnotation", "Ljava/lang/Class;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedFields", "Ljava/util/List;Ljava/lang/Class;", new int[] { 5, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFailOnTimeout$StatementThread(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, "Ljava/lang/Thread;", null);
	cv.visit(0, 0, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, "Ljava/lang/Thread;", null);
	cv.visitSource("FailOnTimeout.java", null);
	cv.visitInnerClass("Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "Lorg/junit/internal/runners/statements/FailOnTimeout;", "StatementThread", ACC_PRIVATE + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE, "fExceptionThrownByOriginalStatement", "Ljava/lang/Throwable;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fFinished", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fRecordedStackTrace", "[Ljava/lang/StackTraceElement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fStatement", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Thread;", "<init>", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fFinished", "Z", 0, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fExceptionThrownByOriginalStatement", "Ljava/lang/Throwable;", 1, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fRecordedStackTrace", "[Ljava/lang/StackTraceElement;", 1, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fStatement", "Lorg/junit/runners/model/Statement;", 3, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "ZLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fFinished", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "Ljava/lang/Throwable;Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fExceptionThrownByOriginalStatement", "Ljava/lang/Throwable;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRecordedStackTrace", "[Ljava/lang/StackTraceElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fRecordedStackTrace", "[Ljava/lang/StackTraceElement;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "recordStackTrace", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "getStackTrace", "[Ljava/lang/StackTraceElement;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fRecordedStackTrace", "[Ljava/lang/StackTraceElement;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/InterruptedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fStatement", "Lorg/junit/runners/model/Statement;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fFinished", "Z", 1, 2);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "fExceptionThrownByOriginalStatement", "Ljava/lang/Throwable;", 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnitMatchers(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/matchers/JUnitMatchers;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/matchers/JUnitMatchers;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JUnitMatchers.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "both", "Lorg/hamcrest/core/CombinableMatcher$CombinableBothMatcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lorg/hamcrest/Matcher", "<-TT;>;)", "Lorg/hamcrest/core/CombinableMatcher$CombinableBothMatcher", "<TT;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "both", "Lorg/hamcrest/core/CombinableMatcher$CombinableBothMatcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "containsString", "Lorg/hamcrest/Matcher;Ljava/lang/String;", new String[] { "(", "Ljava/lang/String;", ")", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/String;", ">;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "containsString", "Lorg/hamcrest/Matcher;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "either", "Lorg/hamcrest/core/CombinableMatcher$CombinableEitherMatcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lorg/hamcrest/Matcher", "<-TT;>;)", "Lorg/hamcrest/core/CombinableMatcher$CombinableEitherMatcher", "<TT;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "either", "Lorg/hamcrest/core/CombinableMatcher$CombinableEitherMatcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "everyItem", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lorg/hamcrest/Matcher", "<TT;>;)", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Iterable", "<TT;>;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "everyItem", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "hasItem", "Lorg/hamcrest/Matcher;Ljava/lang/Object;", new String[] { "<T:", "Ljava/lang/Object;", ">(TT;)", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Iterable", "<-TT;>;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "hasItem", "Lorg/hamcrest/Matcher;Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "hasItem", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lorg/hamcrest/Matcher", "<-TT;>;)", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Iterable", "<-TT;>;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "hasItem", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "hasItems", "Lorg/hamcrest/Matcher;[Ljava/lang/Object;", new String[] { "<T:", "Ljava/lang/Object;", ">([TT;)", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Iterable", "<TT;>;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "hasItems", "Lorg/hamcrest/Matcher;[Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "hasItems", "Lorg/hamcrest/Matcher;[Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">([", "Lorg/hamcrest/Matcher", "<-TT;>;)", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Iterable", "<TT;>;>;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "hasItems", "Lorg/hamcrest/Matcher;[Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isException", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Exception;", ">(", "Lorg/hamcrest/Matcher", "<TT;>;)", "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "isException", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "isThrowable", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Throwable;", ">(", "Lorg/hamcrest/Matcher", "<TT;>;)", "Lorg/hamcrest/Matcher", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/matchers/StacktracePrintingMatcher;", "isThrowable", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo7(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/matchers/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/matchers/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumppackageinfo8(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpErrorCollector$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/ErrorCollector$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/concurrent/Callable", "<", "Ljava/lang/Object;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/concurrent/Callable;" });
	cv.visit(0, 0, "Lorg/junit/rules/ErrorCollector$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/concurrent/Callable", "<", "Ljava/lang/Object;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/concurrent/Callable;" });
	cv.visitSource("ErrorCollector.java", null);
	cv.visitOuterClass("Lorg/junit/rules/ErrorCollector;", "checkThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;");
	cv.visitInnerClass(null, "Lorg/junit/rules/ErrorCollector;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/rules/ErrorCollector;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$matcher", "Lorg/hamcrest/Matcher;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$reason", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$value", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/rules/ErrorCollector;Ljava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "this$0", "Lorg/junit/rules/ErrorCollector;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$reason", "Ljava/lang/String;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$value", "Ljava/lang/Object;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$matcher", "Lorg/hamcrest/Matcher;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "call", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$reason", "Ljava/lang/String;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$value", "Ljava/lang/Object;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$matcher", "Lorg/hamcrest/Matcher;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ErrorCollector$1;", "val$value", "Ljava/lang/Object;", 0, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExpectedExceptionMatcherBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", null, "Ljava/lang/Object;", null);
	cv.visit(0, 0, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", null, "Ljava/lang/Object;", null);
	cv.visitSource("ExpectedExceptionMatcherBuilder.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMatchers", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/hamcrest/Matcher", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "fMatchers", "Ljava/util/List;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "allOfTheMatchers", "Lorg/hamcrest/Matcher;", new String[] { "()", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "fMatchers", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "fMatchers", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/hamcrest/Matcher;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "cast", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "castedMatchers", "Ljava/util/List;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "allOf", "Lorg/hamcrest/Matcher;Ljava/lang/Iterable;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "cast", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<*>;)", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "castedMatchers", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/hamcrest/Matcher", "<-", "Ljava/lang/Throwable;", ">;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "fMatchers", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "add", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "fMatchers", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "build", "Lorg/hamcrest/Matcher;", new String[] { "()", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "allOfTheMatchers", "Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/matchers/JUnitMatchers;", "isThrowable", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "expectsThrowable", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "fMatchers", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMethodRule(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/rules/MethodRule;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/rules/MethodRule;", null, "Ljava/lang/Object;", null);
	cv.visitSource("MethodRule.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestRule(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/rules/TestRule;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/rules/TestRule;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestRule.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComputer(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/Computer;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/Computer;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Computer.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "serial", "Lorg/junit/runner/Computer;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Computer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Computer;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getRunner", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/RunnerBuilder;", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getSuite", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/RunnerBuilder;", "[", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/Suite;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/Computer$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Computer$1;", "<init>", "VLorg/junit/runner/Computer;Lorg/junit/runners/model/RunnerBuilder;", new int[] { 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;", new int[] { 0, 1, 4 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpDescribable(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runner/Describable;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runner/Describable;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Describable.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpDescription(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/Description;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/Description;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visitSource("Description.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "EMPTY", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "METHOD_AND_CLASS_NAME_PATTERN", "Ljava/util/regex/Pattern;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "TEST_MECHANISM", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fChildren", "Ljava/util/ArrayList;", new String[] { "Ljava/util/ArrayList", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fDisplayName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fUniqueId", "Ljava/io/Serializable;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "(.*)\\((.*)\\)");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/regex/Pattern;", "compile", "Ljava/util/regex/Pattern;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runner/Description;", "METHOD_AND_CLASS_NAME_PATTERN", "Ljava/util/regex/Pattern;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "No Tests");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 3, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 4, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runner/Description;", "EMPTY", "Lorg/junit/runner/Description;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Test mechanism");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 3, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 4, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runner/Description;", "TEST_MECHANISM", "Lorg/junit/runner/Description;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_TRANSIENT + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/String;Ljava/io/Serializable;[Ljava/lang/annotation/Annotation;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/String;", "Ljava/io/Serializable;", "[", "Ljava/lang/annotation/Annotation;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Description;", "fChildren", "Ljava/util/ArrayList;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "The display name must not be empty.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "The unique id must not be null.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 3, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Description;", "fDisplayName", "Ljava/lang/String;", 4, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Description;", "fUniqueId", "Ljava/io/Serializable;", 5, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Description;", "fAnnotations", "[Ljava/lang/annotation/Annotation;", 6, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_TRANSIENT + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/String;", "[", "Ljava/lang/annotation/Annotation;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;Ljava/io/Serializable;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Description;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 3, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;Ljava/io/Serializable;[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;Ljava/io/Serializable;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2, 3, 4 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/String;", ")", "Lorg/junit/runner/Description;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "formatDisplayName", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 3, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/String;", "[", "Ljava/lang/annotation/Annotation;", ")", "Lorg/junit/runner/Description;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "formatDisplayName", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 2, 1, 4 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/String;Ljava/lang/String;Ljava/io/Serializable;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "formatDisplayName", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 5, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;Ljava/io/Serializable;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2, 6, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "formatDisplayName", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 4, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2, 5 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "formatDisplayName", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "%s(%s)");
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "methodAndClassNamePatternGroupOrDefault", "Ljava/lang/String;ILjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runner/Description;", "METHOD_AND_CLASS_NAME_PATTERN", "Ljava/util/regex/Pattern;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/regex/Pattern;", "matcher", "Ljava/util/regex/Matcher;Ljava/lang/CharSequence;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/regex/Matcher;", "matches", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/regex/Matcher;", "group", "Ljava/lang/String;I", new int[] { 0, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addChild", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "childlessCopy", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fDisplayName", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fAnnotations", "[Ljava/lang/annotation/Annotation;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "<init>", "VLjava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 4, 0, "Lorg/junit/runner/Description;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fUniqueId", "Ljava/io/Serializable;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fUniqueId", "Ljava/io/Serializable;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new String[] { "<T::", "Ljava/lang/annotation/Annotation;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fAnnotations", "[Ljava/lang/annotation/Annotation;", 0, 5);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/annotation/Annotation;", "annotationType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 4, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/annotation/Annotation;");
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotations", "Ljava/util/Collection;", new String[] { "()", "Ljava/util/Collection", "<", "Ljava/lang/annotation/Annotation;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fAnnotations", "[Ljava/lang/annotation/Annotation;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getChildren", "Ljava/util/ArrayList;", new String[] { "()", "Ljava/util/ArrayList", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fChildren", "Ljava/util/ArrayList;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getClassName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "methodAndClassNamePatternGroupOrDefault", "Ljava/lang/String;ILjava/lang/String;", new int[] { 2, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDisplayName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fDisplayName", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMethodName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Description;", "methodAndClassNamePatternGroupOrDefault", "Ljava/lang/String;ILjava/lang/String;", new int[] { 2, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTestClass", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 3, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 2, 5);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getClassName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/ClassNotFoundException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getClassLoader", "Ljava/lang/ClassLoader;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Class;", "forName", "Ljava/lang/Class;Ljava/lang/String;ZLjava/lang/ClassLoader;", new int[] { 1, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 3, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fTestClass", "Ljava/lang/Class;", 2, 5);
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Description;", "fUniqueId", "Ljava/io/Serializable;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isEmpty", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runner/Description;", "EMPTY", "Lorg/junit/runner/Description;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "equals", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isSuite", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isTest", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isTest", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isTest", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "testCount", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 2, 2, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getDisplayName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnitCore(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/JUnitCore;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/JUnitCore;", null, "Ljava/lang/Object;", null);
	cv.visitSource("JUnitCore.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "defaultComputer", "Lorg/junit/runner/Computer;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Computer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Computer;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "main", "V[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/RealSystem;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/RealSystem;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/JUnitCore;", "runMainAndExit", "VLorg/junit/internal/JUnitSystem;[Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "runClasses", "Lorg/junit/runner/Result;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runner/Computer;", "[", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Result;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/JUnitCore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/JUnitCore;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "runClasses", "Lorg/junit/runner/Result;[Ljava/lang/Class;", new String[] { "([", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Result;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/JUnitCore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/JUnitCore;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/JUnitCore;", "defaultComputer", "Lorg/junit/runner/Computer;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_TRANSIENT, "runMain", "Lorg/junit/runner/Result;Lorg/junit/internal/JUnitSystem;[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(17, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/internal/JUnitSystem;", "out", "Ljava/io/PrintStream;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 12, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 12 });
		mv.visitStringInsn(INSN_CONST_STRING, 13, "JUnit version ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 12, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/Version;", "id", "Ljava/lang/String;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 13);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 12, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 11, 12 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 9, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 9 });
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 16);
		mv.visitArrayLengthInsn(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 6, 7);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 0, 6);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/ClassNotFoundException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Class;", "forName", "Ljava/lang/Class;Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 11 });
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/internal/JUnitSystem;", "out", "Ljava/io/PrintStream;", new int[] { 15 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 12, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 12 });
		mv.visitStringInsn(INSN_CONST_STRING, 13, "Could not find class: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 12, 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 12, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 11, 12 });
		mv.visitVarInsn(INSN_CONST_4, 11, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 11, 0, 11, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 4, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 5, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 9, 5 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Lorg/junit/internal/TextListener;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "<init>", "VLorg/junit/internal/JUnitSystem;", new int[] { 8, 15 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "addListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 14, 8 });
		mv.visitVarInsn(INSN_CONST_4, 11, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 11, 0, 11, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "toArray", "[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 11, 0, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;[Ljava/lang/Class;", new int[] { 14, 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 11);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 11, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getFailures", "Ljava/util/List;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 11, 4 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 10);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_TRANSIENT, "runMainAndExit", "VLorg/junit/internal/JUnitSystem;[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/JUnitCore;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/JUnitCore;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/JUnitCore;", "runMain", "Lorg/junit/runner/Result;Lorg/junit/internal/JUnitSystem;[Ljava/lang/String;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "wasSuccessful", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "exit", "VI", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addListener", "VLorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "addListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getVersion", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/Version;", "id", "Ljava/lang/String;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "removeListener", "VLorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "removeListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Lorg/junit/runner/Result;Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/JUnit38ClassRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "<init>", "VLjunit/framework/Test;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Runner;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runner/Computer;", "[", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Result;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "classes", "Lorg/junit/runner/Request;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Runner;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/Result;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Result;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "createListener", "Lorg/junit/runner/notification/RunListener;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "addFirstListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 2, 0 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestRunStarted", "VLorg/junit/runner/Description;", new int[] { 2, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "run", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 5, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/JUnitCore;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestRunFinished", "VLorg/junit/runner/Result;", new int[] { 2, 1 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "removeListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "removeListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "run", "Lorg/junit/runner/Result;[Ljava/lang/Class;", new String[] { "([", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Result;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/JUnitCore;", "defaultComputer", "Lorg/junit/runner/Computer;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "classes", "Lorg/junit/runner/Request;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/JUnitCore;", "run", "Lorg/junit/runner/Result;Lorg/junit/runner/Request;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRequest(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runner/Request;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runner/Request;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Request.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "aClass", "Lorg/junit/runner/Request;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/requests/ClassRequest;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/requests/ClassRequest;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "classWithoutSuiteMethod", "Lorg/junit/runner/Request;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/requests/ClassRequest;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/requests/ClassRequest;", "<init>", "VLjava/lang/Class;Z", new int[] { 0, 2, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "classes", "Lorg/junit/runner/Request;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runner/Computer;", "[", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/runners/model/InitializationError;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;");
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "<init>", "VZ", new int[] { 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Computer;", "getSuite", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;", new int[] { 5, 0, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "runner", "Lorg/junit/runner/Request;Lorg/junit/runner/Runner;", new int[] { 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Bug in saff's brain: Suite constructor, called as above, should always complete");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_TRANSIENT, "classes", "Lorg/junit/runner/Request;[Ljava/lang/Class;", new String[] { "([", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/JUnitCore;", "defaultComputer", "Lorg/junit/runner/Computer;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "classes", "Lorg/junit/runner/Request;Lorg/junit/runner/Computer;[Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "errorReport", "Lorg/junit/runner/Request;Ljava/lang/Class;Ljava/lang/Throwable;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/Throwable;", ")", "Lorg/junit/runner/Request;" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/ErrorReportingRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "<init>", "VLjava/lang/Class;Ljava/lang/Throwable;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "runner", "Lorg/junit/runner/Request;Lorg/junit/runner/Runner;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "method", "Lorg/junit/runner/Request;Ljava/lang/Class;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/String;", ")", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "aClass", "Lorg/junit/runner/Request;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "filterWith", "Lorg/junit/runner/Request;Lorg/junit/runner/Description;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "runner", "Lorg/junit/runner/Request;Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Request$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Request$1;", "<init>", "VLorg/junit/runner/Runner;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "filterWith", "Lorg/junit/runner/Request;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/manipulation/Filter;", "matchMethodDescription", "Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/Description;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "filterWith", "Lorg/junit/runner/Request;Lorg/junit/runner/manipulation/Filter;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "filterWith", "Lorg/junit/runner/Request;Lorg/junit/runner/manipulation/Filter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/requests/FilterRequest;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/requests/FilterRequest;", "<init>", "VLorg/junit/runner/Request;Lorg/junit/runner/manipulation/Filter;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getRunner", "Lorg/junit/runner/Runner;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sortWith", "Lorg/junit/runner/Request;Ljava/util/Comparator;", new String[] { "(", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;)", "Lorg/junit/runner/Request;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/requests/SortingRequest;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/requests/SortingRequest;", "<init>", "VLorg/junit/runner/Request;Ljava/util/Comparator;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResult$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_SYNTHETIC, "Lorg/junit/runner/Result$1;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_SYNTHETIC, "Lorg/junit/runner/Result$1;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Result.java", null);
	cv.visitInnerClass("Lorg/junit/runner/Result$1;", "Lorg/junit/runner/Result;", null, ACC_STATIC + ACC_SYNTHETIC);
	cv.visitEnd();
}

public static void dumpResult(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/Result;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/Result;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visitSource("Result.java", null);
	cv.visitMemberClass("Lorg/junit/runner/Result$1;", "Lorg/junit/runner/Result;", "1");
	cv.visitMemberClass("Lorg/junit/runner/Result$Listener;", "Lorg/junit/runner/Result;", "Listener");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fCount", "Ljava/util/concurrent/atomic/AtomicInteger;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fFailures", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runner/notification/Failure;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fIgnoreCount", "Ljava/util/concurrent/atomic/AtomicInteger;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fRunTime", "J", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fStartTime", "J", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/concurrent/atomic/AtomicInteger;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/concurrent/atomic/AtomicInteger;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Result;", "fCount", "Ljava/util/concurrent/atomic/AtomicInteger;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/concurrent/atomic/AtomicInteger;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/concurrent/atomic/AtomicInteger;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Result;", "fIgnoreCount", "Ljava/util/concurrent/atomic/AtomicInteger;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "synchronizedList", "Ljava/util/List;Ljava/util/List;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Result;", "fFailures", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lorg/junit/runner/Result;", "fRunTime", "J", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "JLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/runner/Result;", "fStartTime", "J", 0, 2);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$002", "JLorg/junit/runner/Result;J", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lorg/junit/runner/Result;", "fStartTime", "J", 1, 0);
		mv.visitIntInsn(INSN_RETURN_WIDE, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$114", "JLorg/junit/runner/Result;J", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/runner/Result;", "fRunTime", "J", 0, 2);
		mv.visitOperationInsn(INSN_ADD_LONG_2ADDR, 0, 0, 3, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lorg/junit/runner/Result;", "fRunTime", "J", 0, 2);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$200", "Ljava/util/concurrent/atomic/AtomicInteger;Lorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fCount", "Ljava/util/concurrent/atomic/AtomicInteger;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$300", "Ljava/util/List;Lorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fFailures", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$400", "Ljava/util/concurrent/atomic/AtomicInteger;Lorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fIgnoreCount", "Ljava/util/concurrent/atomic/AtomicInteger;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "createListener", "Lorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/Result$Listener;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Result$Listener;", "<init>", "VLorg/junit/runner/Result;Lorg/junit/runner/Result$1;", new int[] { 0, 2, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getFailureCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fFailures", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getFailures", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runner/notification/Failure;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fFailures", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getIgnoreCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fIgnoreCount", "Ljava/util/concurrent/atomic/AtomicInteger;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/concurrent/atomic/AtomicInteger;", "get", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result;", "fCount", "Ljava/util/concurrent/atomic/AtomicInteger;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/concurrent/atomic/AtomicInteger;", "get", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunTime", "J", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/runner/Result;", "fRunTime", "J", 0, 2);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "wasSuccessful", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getFailureCount", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunWith(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runner/RunWith;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runner/RunWith;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("RunWith.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Inherited;", true);
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "TYPE");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<+", "Lorg/junit/runner/Runner;", ">;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFilter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runner/manipulation/Filter;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runner/manipulation/Filter;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Filter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC, "ALL", "Lorg/junit/runner/manipulation/Filter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/manipulation/Filter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runner/manipulation/Filter;", "ALL", "Lorg/junit/runner/manipulation/Filter;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "matchMethodDescription", "Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/manipulation/Filter$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter$2;", "<init>", "VLorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "VLjava/lang/Object;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 3, 0, "Lorg/junit/runner/manipulation/Filterable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/manipulation/Filterable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/manipulation/Filterable;", "filter", "VLorg/junit/runner/manipulation/Filter;", new int[] { 0, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "describe", "Ljava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "intersect", "Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 3, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runner/manipulation/Filter;", "ALL", "Lorg/junit/runner/manipulation/Filter;", 1, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 3, 1);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/manipulation/Filter$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter$3;", "<init>", "VLorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;", new int[] { 1, 2, 0, 3 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "shouldRun", "ZLorg/junit/runner/Description;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFilterable(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runner/manipulation/Filterable;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runner/manipulation/Filterable;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Filterable.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "filter", "VLorg/junit/runner/manipulation/Filter;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpNoTestsRemainException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/manipulation/NoTestsRemainException;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/manipulation/NoTestsRemainException;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("NoTestsRemainException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSortable(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runner/manipulation/Sortable;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runner/manipulation/Sortable;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Sortable.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "sort", "VLorg/junit/runner/manipulation/Sorter;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSorter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/runner/manipulation/Sorter$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, ACC_FINAL, "Lorg/junit/runner/manipulation/Sorter$1;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("Sorter.java", null);
	cv.visitInnerClass("Lorg/junit/runner/manipulation/Sorter$1;", "Lorg/junit/runner/manipulation/Sorter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runner/Description;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter$1;", "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSorter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/manipulation/Sorter;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/manipulation/Sorter;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("Sorter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC, "NULL", "Lorg/junit/runner/manipulation/Sorter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fComparator", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/manipulation/Sorter;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/manipulation/Sorter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Sorter$1;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Sorter;", "<init>", "VLjava/util/Comparator;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runner/manipulation/Sorter;", "NULL", "Lorg/junit/runner/manipulation/Sorter;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/Comparator;", new String[] { "(", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/manipulation/Sorter;", "fComparator", "Ljava/util/Comparator;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 3, 0, "Lorg/junit/runner/manipulation/Sortable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/manipulation/Sortable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/manipulation/Sortable;", "sort", "VLorg/junit/runner/manipulation/Sorter;", new int[] { 0, 2 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runner/Description;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter;", "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Sorter;", "fComparator", "Ljava/util/Comparator;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Comparator;", "compare", "ILjava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo9(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/runner/manipulation/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/runner/manipulation/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpFailure(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/notification/Failure;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/notification/Failure;", null, "Ljava/lang/Object;", new String[] { "Ljava/io/Serializable;" });
	cv.visitSource("Failure.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fDescription", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fThrownException", "Ljava/lang/Throwable;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/Failure;", "fThrownException", "Ljava/lang/Throwable;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/Failure;", "fDescription", "Lorg/junit/runner/Description;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/Failure;", "fDescription", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getException", "Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/Failure;", "fThrownException", "Ljava/lang/Throwable;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getException", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTestHeader", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/Failure;", "fDescription", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getDisplayName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTrace", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/PrintWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintWriter;", "<init>", "VLjava/io/Writer;", new int[] { 2, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getException", "Ljava/lang/Throwable;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "printStackTrace", "VLjava/io/PrintWriter;", new int[] { 3, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuffer;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuffer;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getTestHeader", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ": ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/Failure;", "fThrownException", "Ljava/lang/Throwable;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "append", "Ljava/lang/StringBuffer;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunListener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/notification/RunListener;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/notification/RunListener;", null, "Ljava/lang/Object;", null);
	cv.visitSource("RunListener.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testAssumptionFailure", "VLorg/junit/runner/notification/Failure;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFailure", "VLorg/junit/runner/notification/Failure;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFinished", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testIgnored", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testRunFinished", "VLorg/junit/runner/Result;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testRunStarted", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testStarted", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$SafeNotifier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_ABSTRACT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_ABSTRACT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null, "Ljava/lang/Object;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitInnerClass("Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "Lorg/junit/runner/notification/RunNotifier;", "SafeNotifier", ACC_PRIVATE + ACC_ABSTRACT);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fCurrentListeners", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runner/notification/RunListener;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/notification/RunNotifier;", "access$000", "Ljava/util/List;Lorg/junit/runner/notification/RunNotifier;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/runner/notification/RunListener;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "fCurrentListeners", "Ljava/util/List;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/notification/RunNotifier;", "access$000", "Ljava/util/List;Lorg/junit/runner/notification/RunNotifier;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 6);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 4 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "fCurrentListeners", "Ljava/util/List;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 5, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		Label l6 = new Label();
		Label l7 = new Label();
		mv.visitTryCatchBlock(l5, l6, l7, "Ljava/lang/Exception;");
		mv.visitTryCatchBlock(l5, l6, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runner/notification/RunListener;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "notifyListener", "VLorg/junit/runner/notification/RunListener;", new int[] { 8, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 3 });
		mv.visitLabel(l6);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitTryCatchBlock(l8, l9, l2, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runner/Description;", "TEST_MECHANISM", "Lorg/junit/runner/Description;", 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 5, 7, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 5 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 5);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 6);
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l4);
		Label l10 = new Label();
		mv.visitTryCatchBlock(l4, l10, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/notification/RunNotifier;", "access$100", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;Ljava/util/List;", new int[] { 5, 4, 2 });
		mv.visitIntInsn(INSN_MONITOR_EXIT, 6);
		mv.visitLabel(l10);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/notification/RunNotifier;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/notification/RunNotifier;", null, "Ljava/lang/Object;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitMemberClass("Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "Lorg/junit/runner/notification/RunNotifier;", "SafeNotifier");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fListeners", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runner/notification/RunListener;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_VOLATILE, "fPleaseStop", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "synchronizedList", "Ljava/util/List;Ljava/util/List;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier;", "fListeners", "Ljava/util/List;", 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/runner/notification/RunNotifier;", "fPleaseStop", "Z", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "Ljava/util/List;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier;", "fListeners", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailures", "VLjava/util/List;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "fireTestFailures", "VLjava/util/List;Ljava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/runner/notification/RunListener;", ">;", "Ljava/util/List", "<", "Lorg/junit/runner/notification/Failure;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$4;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$4;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;Ljava/util/List;", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$4;", "run", "V", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addFirstListener", "VLorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier;", "fListeners", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "VILjava/lang/Object;", new int[] { 0, 1, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addListener", "VLorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier;", "fListeners", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestAssumptionFailed", "VLorg/junit/runner/notification/Failure;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$5;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$5;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/notification/Failure;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$5;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestFailure", "VLorg/junit/runner/notification/Failure;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier;", "fListeners", "Ljava/util/List;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Lorg/junit/runner/notification/Failure;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailures", "VLjava/util/List;Ljava/util/List;", new int[] { 3, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestFinished", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$7;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$7;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$7;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestIgnored", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$6;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$6;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$6;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestRunFinished", "VLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$2;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Result;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$2;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestRunStarted", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$1;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$1;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "fireTestStarted", "VLorg/junit/runner/Description;", null, new String[] { "Lorg/junit/runner/notification/StoppedByUserException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/runner/notification/RunNotifier;", "fPleaseStop", "Z", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/StoppedByUserException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/StoppedByUserException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/RunNotifier$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$3;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier$3;", "run", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "pleaseStop", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/runner/notification/RunNotifier;", "fPleaseStop", "Z", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "removeListener", "VLorg/junit/runner/notification/RunListener;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier;", "fListeners", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "remove", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpStoppedByUserException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runner/notification/StoppedByUserException;", null, "Ljava/lang/RuntimeException;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runner/notification/StoppedByUserException;", null, "Ljava/lang/RuntimeException;", null);
	cv.visitSource("StoppedByUserException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo10(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/runner/notification/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/runner/notification/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumppackageinfo11(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/runner/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/runner/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpMethodSorters(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL + ACC_ENUM, "Lorg/junit/runners/MethodSorters;", new String[] { "Ljava/lang/Enum", "<", "Lorg/junit/runners/MethodSorters;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL + ACC_ENUM, "Lorg/junit/runners/MethodSorters;", new String[] { "Ljava/lang/Enum", "<", "Lorg/junit/runners/MethodSorters;", ">;" }, "Ljava/lang/Enum;", null);
	cv.visitSource("MethodSorters.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$VALUES", "[Lorg/junit/runners/MethodSorters;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "DEFAULT", "Lorg/junit/runners/MethodSorters;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "JVM", "Lorg/junit/runners/MethodSorters;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "NAME_ASCENDING", "Lorg/junit/runners/MethodSorters;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fComparator", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 2);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/MethodSorters;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "NAME_ASCENDING");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/MethodSorter;", "NAME_ASCENDING", "Ljava/util/Comparator;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/MethodSorters;", "<init>", "VLjava/lang/String;ILjava/util/Comparator;", new int[] { 0, 1, 3, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runners/MethodSorters;", "NAME_ASCENDING", "Lorg/junit/runners/MethodSorters;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/MethodSorters;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "JVM");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/MethodSorters;", "<init>", "VLjava/lang/String;ILjava/util/Comparator;", new int[] { 0, 1, 4, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runners/MethodSorters;", "JVM", "Lorg/junit/runners/MethodSorters;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/MethodSorters;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "DEFAULT");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/MethodSorter;", "DEFAULT", "Ljava/util/Comparator;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/MethodSorters;", "<init>", "VLjava/lang/String;ILjava/util/Comparator;", new int[] { 0, 1, 5, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runners/MethodSorters;", "DEFAULT", "Lorg/junit/runners/MethodSorters;", 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 3);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Lorg/junit/runners/MethodSorters;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runners/MethodSorters;", "NAME_ASCENDING", "Lorg/junit/runners/MethodSorters;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runners/MethodSorters;", "JVM", "Lorg/junit/runners/MethodSorters;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runners/MethodSorters;", "DEFAULT", "Lorg/junit/runners/MethodSorters;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 5);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runners/MethodSorters;", "$VALUES", "[Lorg/junit/runners/MethodSorters;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;ILjava/util/Comparator;", new String[] { "(", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Enum;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/MethodSorters;", "fComparator", "Ljava/util/Comparator;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "Lorg/junit/runners/MethodSorters;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/runners/MethodSorters;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Enum;", "valueOf", "Ljava/lang/Enum;Ljava/lang/Class;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/MethodSorters;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "[Lorg/junit/runners/MethodSorters;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runners/MethodSorters;", "$VALUES", "[Lorg/junit/runners/MethodSorters;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Lorg/junit/runners/MethodSorters;", "clone", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Lorg/junit/runners/MethodSorters;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getComparator", "Ljava/util/Comparator;", new String[] { "()", "Ljava/util/Comparator", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/MethodSorters;", "fComparator", "Ljava/util/Comparator;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterized$Parameter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runners/Parameterized$Parameter;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runners/Parameterized$Parameter;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Parameterized.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "FIELD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitInnerClass("Lorg/junit/runners/Parameterized$Parameter;", "Lorg/junit/runners/Parameterized;", "Parameter", ACC_PUBLIC + ACC_STATIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "I", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("value", 0);
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterized$Parameters(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runners/Parameterized$Parameters;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runners/Parameterized$Parameters;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Parameterized.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "METHOD");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitInnerClass("Lorg/junit/runners/Parameterized$Parameters;", "Lorg/junit/runners/Parameterized;", "Parameters", ACC_PUBLIC + ACC_STATIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "name", "Ljava/lang/String;", null, null);
		{
			av0 = mv.visitAnnotationDefault();
			av0.visit("name", "{index}");
			av0.visitEnd();
		}
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParentRunner$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/ParentRunner$3;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visit(0, 0, "Lorg/junit/runners/ParentRunner$3;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/Runnable;" });
	cv.visitSource("ParentRunner.java", null);
	cv.visitOuterClass("Lorg/junit/runners/ParentRunner;", "runChildren", "VLorg/junit/runner/notification/RunNotifier;");
	cv.visitInnerClass(null, "Lorg/junit/runners/ParentRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/ParentRunner;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$each", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/ParentRunner;Ljava/lang/Object;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$3;", "this$0", "Lorg/junit/runners/ParentRunner;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$3;", "val$each", "Ljava/lang/Object;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$3;", "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$3;", "this$0", "Lorg/junit/runners/ParentRunner;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$3;", "val$each", "Ljava/lang/Object;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$3;", "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "runChild", "VLjava/lang/Object;Lorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParentRunner$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/ParentRunner$4;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visit(0, 0, "Lorg/junit/runners/ParentRunner$4;", new String[] { "Ljava/lang/Object;", "Ljava/util/Comparator", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Ljava/util/Comparator;" });
	cv.visitSource("ParentRunner.java", null);
	cv.visitOuterClass("Lorg/junit/runners/ParentRunner;", "comparator", "Ljava/util/Comparator;");
	cv.visitInnerClass(null, "Lorg/junit/runners/ParentRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/ParentRunner;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/ParentRunner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$4;", "this$0", "Lorg/junit/runners/ParentRunner;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "compare", "ILjava/lang/Object;Ljava/lang/Object;", new String[] { "(TT;TT;)I" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$4;", "this$0", "Lorg/junit/runners/ParentRunner;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/ParentRunner;", "access$100", "Lorg/junit/runner/manipulation/Sorter;Lorg/junit/runners/ParentRunner;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$4;", "this$0", "Lorg/junit/runners/ParentRunner;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$4;", "this$0", "Lorg/junit/runners/ParentRunner;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter;", "compare", "ILorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSuite$SuiteClasses(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runners/Suite$SuiteClasses;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION, "Lorg/junit/runners/Suite$SuiteClasses;", null, "Ljava/lang/Object;", new String[] { "Ljava/lang/annotation/Annotation;" });
	cv.visitSource("Suite.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Inherited;", true);
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Retention;", true);
		av0.visitEnum("value", "Ljava/lang/annotation/RetentionPolicy;", "RUNTIME");
		av0.visitEnd();
	}
	{
	av0 = cv.visitAnnotation("Ljava/lang/annotation/Target;", true);
		{
			AnnotationVisitor av1 = av0.visitArray("value");
			av1.visitEnum(null, "Ljava/lang/annotation/ElementType;", "TYPE");
			av1.visitEnd();
		}
		av0.visitEnd();
	}
	cv.visitInnerClass("Lorg/junit/runners/Suite$SuiteClasses;", "Lorg/junit/runners/Suite;", "SuiteClasses", ACC_PUBLIC + ACC_STATIC + ACC_INTERFACE + ACC_ABSTRACT + ACC_ANNOTATION);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "value", "[Ljava/lang/Class;", new String[] { "()[", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFrameworkMember(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/model/FrameworkMember;", new String[] { "<T:", "Lorg/junit/runners/model/FrameworkMember", "<TT;>;>", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/model/FrameworkMember;", new String[] { "<T:", "Lorg/junit/runners/model/FrameworkMember", "<TT;>;>", "Ljava/lang/Object;" }, "Ljava/lang/Object;", null);
	cv.visitSource("FrameworkMember.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_ABSTRACT, "getAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getName", "Ljava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getType", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "isPublic", "Z", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "isShadowedBy", "ZLjava/util/List;", new String[] { "(", "Ljava/util/List", "<TT;>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMember;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "isShadowedBy", "ZLorg/junit/runners/model/FrameworkMember;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_ABSTRACT, "isShadowedBy", "ZLorg/junit/runners/model/FrameworkMember;", new String[] { "(TT;)Z" }, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "isStatic", "Z", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpInitializationError2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/model/InitializationError;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/model/InitializationError;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("InitializationError.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fErrors", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/Throwable;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/util/List;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/InitializationError;", "fErrors", "Ljava/util/List;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getCauses", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/InitializationError;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMultipleFailureException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/model/MultipleFailureException;", null, "Ljava/lang/Exception;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/model/MultipleFailureException;", null, "Ljava/lang/Exception;", null);
	cv.visitSource("MultipleFailureException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fErrors", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VLjava/util/Collection;", new int[] { 0, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/MultipleFailureException;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEmpty", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Throwable;");
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/model/MultipleFailureException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/model/MultipleFailureException;", "<init>", "VLjava/util/List;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getFailures", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/MultipleFailureException;", "fErrors", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "unmodifiableList", "Ljava/util/List;Ljava/util/List;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "There were %d errors:");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 7, "[Ljava/lang/Object;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/MultipleFailureException;", "fErrors", "Ljava/util/List;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/MultipleFailureException;", "fErrors", "Ljava/util/List;", 3, 8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Throwable;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\n  %s(%s)");
		mv.visitVarInsn(INSN_CONST_4, 4, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getMessage", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpNoGenericTypeParametersValidator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", null, "Ljava/lang/Object;", null);
	cv.visit(0, 0, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", null, "Ljava/lang/Object;", null);
	cv.visitSource("NoGenericTypeParametersValidator.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMethod", "Ljava/lang/reflect/Method;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "fMethod", "Ljava/lang/reflect/Method;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateNoTypeParameterOnGenericArrayType", "VLjava/lang/reflect/GenericArrayType;Ljava/util/List;", new String[] { "(", "Ljava/lang/reflect/GenericArrayType;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/GenericArrayType;", "getGenericComponentType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnType", "VLjava/lang/reflect/Type;Ljava/util/List;", new int[] { 1, 0, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateNoTypeParameterOnParameterizedType", "VLjava/lang/reflect/ParameterizedType;Ljava/util/List;", new String[] { "(", "Ljava/lang/reflect/ParameterizedType;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnType", "VLjava/lang/reflect/Type;Ljava/util/List;", new int[] { 4, 1, 6 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateNoTypeParameterOnType", "VLjava/lang/reflect/Type;Ljava/util/List;", new String[] { "(", "Ljava/lang/reflect/Type;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Ljava/lang/reflect/TypeVariable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "fMethod", "Ljava/lang/reflect/Method;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "() contains unresolved type variable ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 5, 0 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnParameterizedType", "VLjava/lang/reflect/ParameterizedType;Ljava/util/List;", new int[] { 3, 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Ljava/lang/reflect/WildcardType;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/WildcardType;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnWildcardType", "VLjava/lang/reflect/WildcardType;Ljava/util/List;", new int[] { 3, 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/reflect/GenericArrayType;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnGenericArrayType", "VLjava/lang/reflect/GenericArrayType;Ljava/util/List;", new int[] { 3, 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateNoTypeParameterOnWildcardType", "VLjava/lang/reflect/WildcardType;Ljava/util/List;", new String[] { "(", "Ljava/lang/reflect/WildcardType;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getUpperBounds", "[Ljava/lang/reflect/Type;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnType", "VLjava/lang/reflect/Type;Ljava/util/List;", new int[] { 4, 1, 6 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/WildcardType;", "getLowerBounds", "[Ljava/lang/reflect/Type;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnType", "VLjava/lang/reflect/Type;Ljava/util/List;", new int[] { 4, 1, 6 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "validate", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "fMethod", "Ljava/lang/reflect/Method;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getGenericParameterTypes", "[Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validateNoTypeParameterOnType", "VLjava/lang/reflect/Type;Ljava/util/List;", new int[] { 5, 1, 6 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunnerBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/model/RunnerBuilder;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/model/RunnerBuilder;", null, "Ljava/lang/Object;", null);
	cv.visitSource("RunnerBuilder.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "parents", "Ljava/util/Set;", new String[] { "Ljava/util/Set", "<", "Ljava/lang/Class", "<*>;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/HashSet;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashSet;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/RunnerBuilder;", "parents", "Ljava/util/Set;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runners", "Ljava/util/List;[Ljava/lang/Class;", new String[] { "([", "Ljava/lang/Class", "<*>;)", "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 7);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "safeRunnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new int[] { 6, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "add", "ZLjava/lang/Object;", new int[] { 5, 1 });
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "addParent", "Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/lang/Class", "<*>;" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/RunnerBuilder;", "parents", "Ljava/util/Set;", 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "add", "ZLjava/lang/Object;", new int[] { 0, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "class '%s' (possibly indirectly) contains itself as a SuiteClass");
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "removeParent", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/RunnerBuilder;", "parents", "Ljava/util/Set;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "remove", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runners", "Ljava/util/List;Ljava/lang/Class;Ljava/util/List;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/util/List", "<", "Ljava/lang/Class", "<*>;>;)", "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "toArray", "[Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "runners", "Ljava/util/List;Ljava/lang/Class;[Ljava/lang/Class;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runners", "Ljava/util/List;Ljava/lang/Class;[Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;[", "Ljava/lang/Class", "<*>;)", "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "addParent", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 1, 2 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "runners", "Ljava/util/List;[Ljava/lang/Class;", new int[] { 1, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "removeParent", "VLjava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "removeParent", "VLjava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "safeRunnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/ErrorReportingRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "<init>", "VLjava/lang/Class;Ljava/lang/Throwable;", new int[] { 1, 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunnerScheduler(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runners/model/RunnerScheduler;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_INTERFACE + ACC_ABSTRACT, "Lorg/junit/runners/model/RunnerScheduler;", null, "Ljava/lang/Object;", null);
	cv.visitSource("RunnerScheduler.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "finished", "V", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "schedule", "VLjava/lang/Runnable;", null, null);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpStatement(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/model/Statement;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/model/Statement;", null, "Ljava/lang/Object;", null);
	cv.visitSource("Statement.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestClass2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/model/TestClass;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/model/TestClass;", null, "Ljava/lang/Object;", null);
	cv.visitSource("TestClass.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fFieldsForAnnotations", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkField;", ">;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fMethodsForAnnotations", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 9 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 7 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/TestClass;", "fMethodsForAnnotations", "Ljava/util/Map;", 7, 9);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 7 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/TestClass;", "fFieldsForAnnotations", "Ljava/util/Map;", 7, 9);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 10, 9);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructors", "[Ljava/lang/reflect/Constructor;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitArrayLengthInsn(7, 7);
		mv.visitVarInsn(INSN_CONST_4, 8, 1);
		mv.visitJumpInsn(INSN_IF_LE, l0, 7, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitStringInsn(INSN_CONST_STRING, 8, "Test class can only have one constructor");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_THROW, 7);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "getSuperClasses", "Ljava/util/List;Ljava/lang/Class;", new int[] { 9, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/MethodSorter;", "getDeclaredMethods", "[Ljava/lang/reflect/Method;Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l4, 5, 6);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 0, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "<init>", "VLjava/lang/reflect/Method;", new int[] { 7, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fMethodsForAnnotations", "Ljava/util/Map;", 8, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "addToAnnotationLists", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/Map;", new int[] { 9, 7, 8 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredFields", "[Ljava/lang/reflect/Field;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitJumpInsn(INSN_IF_GE, l1, 5, 6);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 0, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Lorg/junit/runners/model/FrameworkField;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkField;", "<init>", "VLjava/lang/reflect/Field;", new int[] { 7, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fFieldsForAnnotations", "Ljava/util/Map;", 8, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "addToAnnotationLists", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/Map;", new int[] { 9, 7, 8 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addToAnnotationLists", "VLorg/junit/runners/model/FrameworkMember;Ljava/util/Map;", new String[] { "<T:", "Lorg/junit/runners/model/FrameworkMember", "<TT;>;>(TT;", "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/util/List", "<TT;>;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/annotation/Annotation;", "annotationType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMembers", "Ljava/util/List;Ljava/util/Map;Ljava/lang/Class;", new int[] { 7, 9, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMember;", "isShadowedBy", "ZLjava/util/List;", new int[] { 8, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 6, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "runsTopToBottom", "ZLjava/lang/Class;", new int[] { 7, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 6, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "VILjava/lang/Object;", new int[] { 4, 6, 8 });
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 8 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getAnnotatedMembers", "Ljava/util/List;Ljava/util/Map;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/util/Map", "<", "Ljava/lang/Class", "<*>;", "Ljava/util/List", "<TT;>;>;", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)", "Ljava/util/List", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "containsKey", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 3, 0 });
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/List;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getSuperClasses", "Ljava/util/List;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/util/List", "<", "Ljava/lang/Class", "<*>;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "add", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSuperclass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runsTopToBottom", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Before;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/BeforeClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotatedFieldValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Object;", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;", "Ljava/lang/Class", "<TT;>;)", "Ljava/util/List", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedFields", "Ljava/util/List;Ljava/lang/Class;", new int[] { 7, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkField;");
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/IllegalAccessException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInstance", "ZLjava/lang/Object;", new int[] { 10, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 10, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 6, "How did getFields return a field we couldn't access?");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 5, 6, 0 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotatedFields", "Ljava/util/List;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkField;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fFieldsForAnnotations", "Ljava/util/Map;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMembers", "Ljava/util/List;Ljava/util/Map;Ljava/lang/Class;", new int[] { 1, 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotatedMethodValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Object;", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;", "Ljava/lang/Class", "<TT;>;)", "Ljava/util/List", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 8, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/Throwable;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 9, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInstance", "ZLjava/lang/Object;", new int[] { 11, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "cast", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 11, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Exception in ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 5, 6, 0 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;)", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fMethodsForAnnotations", "Ljava/util/Map;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMembers", "Ljava/util/List;Ljava/util/Map;Ljava/lang/Class;", new int[] { 1, 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/annotation/Annotation;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getJavaClass", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "null");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new String[] { "()", "Ljava/lang/reflect/Constructor", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructors", "[Ljava/lang/reflect/Constructor;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 1, 1);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 3, 3, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VJJ", new int[] { 1, 2, 3, 4 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isANonStaticInnerClass", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isMemberClass", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/TestClass;", "fClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getModifiers", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumppackageinfo12(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_INTERFACE, "Lorg/junit/runners/package-info;", null, "Ljava/lang/Object;", null);
	cv.visit(0, ACC_INTERFACE, "Lorg/junit/runners/package-info;", null, "Ljava/lang/Object;", null);
	cv.visitSource("package-info.java", null);
	cv.visitEnd();
}

public static void dumpDefaultDateTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/DefaultDateTypeAdapter;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/JsonSerializer", "<", "Ljava/util/Date;", ">;", "Lcom/google/gson/JsonDeserializer", "<", "Ljava/util/Date;", ">;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/JsonSerializer;", "Lcom/google/gson/JsonDeserializer;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/DefaultDateTypeAdapter;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/JsonSerializer", "<", "Ljava/util/Date;", ">;", "Lcom/google/gson/JsonDeserializer", "<", "Ljava/util/Date;", ">;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/JsonSerializer;", "Lcom/google/gson/JsonDeserializer;" });
	cv.visitSource("DefaultDateTypeAdapter.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "enUsFormat", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "iso8601Format", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "localFormat", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateTimeInstance", "Ljava/text/DateFormat;IILjava/util/Locale;", new int[] { 1, 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateTimeInstance", "Ljava/text/DateFormat;II", new int[] { 1, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "<init>", "VLjava/text/DateFormat;Ljava/text/DateFormat;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateInstance", "Ljava/text/DateFormat;ILjava/util/Locale;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateInstance", "Ljava/text/DateFormat;I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "<init>", "VLjava/text/DateFormat;Ljava/text/DateFormat;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VII", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateTimeInstance", "Ljava/text/DateFormat;IILjava/util/Locale;", new int[] { 3, 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateTimeInstance", "Ljava/text/DateFormat;II", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "<init>", "VLjava/text/DateFormat;Ljava/text/DateFormat;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/text/SimpleDateFormat;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/text/SimpleDateFormat;", "<init>", "VLjava/lang/String;Ljava/util/Locale;", new int[] { 0, 3, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/text/SimpleDateFormat;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/text/SimpleDateFormat;", "<init>", "VLjava/lang/String;", new int[] { 1, 3 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "<init>", "VLjava/text/DateFormat;Ljava/text/DateFormat;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/text/DateFormat;Ljava/text/DateFormat;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 3 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "enUsFormat", "Ljava/text/DateFormat;", 4, 3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 5, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/text/SimpleDateFormat;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "yyyy-MM-dd'T'HH:mm:ss'Z'");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/text/SimpleDateFormat;", "<init>", "VLjava/lang/String;Ljava/util/Locale;", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "iso8601Format", "Ljava/text/DateFormat;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "iso8601Format", "Ljava/text/DateFormat;", 0, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "UTC");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/TimeZone;", "getTimeZone", "Ljava/util/TimeZone;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "setTimeZone", "VLjava/util/TimeZone;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "deserializeToDate", "Ljava/util/Date;Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 2, 4);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/text/ParseException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		Label l5 = new Label();
		mv.visitTryCatchBlock(l4, l5, l3, null);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l6, l7, l8, "Ljava/text/ParseException;");
		mv.visitTryCatchBlock(l6, l7, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "enUsFormat", "Ljava/text/DateFormat;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l9 = new Label();
		mv.visitLabel(l9);
		Label l10 = new Label();
		mv.visitTryCatchBlock(l9, l10, l3, null);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitLabel(l10);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l11 = new Label();
		mv.visitLabel(l11);
		Label l12 = new Label();
		Label l13 = new Label();
		mv.visitTryCatchBlock(l11, l12, l13, "Ljava/text/ParseException;");
		mv.visitTryCatchBlock(l11, l12, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "iso8601Format", "Ljava/text/DateFormat;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l14 = new Label();
		mv.visitLabel(l14);
		Label l15 = new Label();
		mv.visitTryCatchBlock(l14, l15, l3, null);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l13);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 3, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "deserialize", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;", null, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/DefaultDateTypeAdapter;", "deserialize", "Ljava/util/Date;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;", new int[] { 1, 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "deserialize", "Ljava/util/Date;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;", null, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/JsonPrimitive;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonParseException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "The date should be a string value");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "deserializeToDate", "Ljava/util/Date;Lcom/google/gson/JsonElement;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/Date;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 6, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/sql/Timestamp;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 6, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/sql/Timestamp;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Date;", "getTime", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/sql/Timestamp;", "<init>", "VJ", new int[] { 1, 2, 3 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/sql/Date;");
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 6, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/sql/Date;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Date;", "getTime", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/sql/Date;", "<init>", "VJ", new int[] { 1, 2, 3 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " cannot deserialize to ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Date;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/DefaultDateTypeAdapter;", "serialize", "Lcom/google/gson/JsonElement;Ljava/util/Date;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;", new int[] { 1, 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serialize", "Lcom/google/gson/JsonElement;Ljava/util/Date;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 2, 3);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "enUsFormat", "Ljava/text/DateFormat;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "format", "Ljava/lang/String;Ljava/util/Date;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lcom/google/gson/DefaultDateTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitVarInsn(INSN_CONST_16, 1, 40);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/DefaultDateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_16, 2, 41);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingPolicy(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy;", new String[] { "Ljava/lang/Enum", "<", "Lcom/google/gson/FieldNamingPolicy;", ">;", "Lcom/google/gson/FieldNamingStrategy;" }, "Ljava/lang/Enum;", new String[] { "Lcom/google/gson/FieldNamingStrategy;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy;", new String[] { "Ljava/lang/Enum", "<", "Lcom/google/gson/FieldNamingPolicy;", ">;", "Lcom/google/gson/FieldNamingStrategy;" }, "Ljava/lang/Enum;", new String[] { "Lcom/google/gson/FieldNamingStrategy;" });
	cv.visitSource("FieldNamingPolicy.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL + ACC_SYNTHETIC, "$VALUES", "[Lcom/google/gson/FieldNamingPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "IDENTITY", "Lcom/google/gson/FieldNamingPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "LOWER_CASE_WITH_DASHES", "Lcom/google/gson/FieldNamingPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "LOWER_CASE_WITH_UNDERSCORES", "Lcom/google/gson/FieldNamingPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "UPPER_CAMEL_CASE", "Lcom/google/gson/FieldNamingPolicy;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL + ACC_ENUM, "UPPER_CAMEL_CASE_WITH_SPACES", "Lcom/google/gson/FieldNamingPolicy;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 4);
		mv.visitVarInsn(INSN_CONST_4, 5, 3);
		mv.visitVarInsn(INSN_CONST_4, 4, 2);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy$1;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "IDENTITY");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy$1;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "IDENTITY", "Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy$2;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "UPPER_CAMEL_CASE");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy$2;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 3 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "UPPER_CAMEL_CASE", "Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy$3;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "UPPER_CAMEL_CASE_WITH_SPACES");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy$3;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 4 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "UPPER_CAMEL_CASE_WITH_SPACES", "Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy$4;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "LOWER_CASE_WITH_UNDERSCORES");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy$4;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 5 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "LOWER_CASE_WITH_UNDERSCORES", "Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy$5;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "LOWER_CASE_WITH_DASHES");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy$5;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 6 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "LOWER_CASE_WITH_DASHES", "Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 5);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Lcom/google/gson/FieldNamingPolicy;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "IDENTITY", "Lcom/google/gson/FieldNamingPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "UPPER_CAMEL_CASE", "Lcom/google/gson/FieldNamingPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "UPPER_CAMEL_CASE_WITH_SPACES", "Lcom/google/gson/FieldNamingPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "LOWER_CASE_WITH_UNDERSCORES", "Lcom/google/gson/FieldNamingPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "LOWER_CASE_WITH_DASHES", "Lcom/google/gson/FieldNamingPolicy;", 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 0, 6);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "$VALUES", "[Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", new String[] { "()V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Enum;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;ILcom/google/gson/FieldNamingPolicy$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy;", "<init>", "VLjava/lang/String;I", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "upperCaseFirstLetter", "Ljava/lang/String;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$200", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "separateCamelCase", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "modifyString", "Ljava/lang/String;CLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l0, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;I", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;C", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "separateCamelCase", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Character;", "isUpperCase", "ZC", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "length", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 5 });
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 2, 0 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "upperCaseFirstLetter", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, -1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Character;", "isLetter", "ZC", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;C", new int[] { 0, 1 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Character;", "isUpperCase", "ZC", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Character;", "toUpperCase", "CC", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "modifyString", "Ljava/lang/String;CLjava/lang/String;I", new int[] { 4, 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "Lcom/google/gson/FieldNamingPolicy;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Enum;", "valueOf", "Ljava/lang/Enum;Ljava/lang/Class;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/FieldNamingPolicy;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "values", "[Lcom/google/gson/FieldNamingPolicy;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/FieldNamingPolicy;", "$VALUES", "[Lcom/google/gson/FieldNamingPolicy;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "[Lcom/google/gson/FieldNamingPolicy;", "clone", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "[Lcom/google/gson/FieldNamingPolicy;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/Gson$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/JsonDeserializationContext;" });
	cv.visit(0, 0, "Lcom/google/gson/Gson$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/JsonDeserializationContext;" });
	cv.visitSource("Gson.java", null);
	cv.visitInnerClass("Lcom/google/gson/Gson$1;", "Lcom/google/gson/Gson;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson$1;", "this$0", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "deserialize", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/JsonElement;", "Ljava/lang/reflect/Type;", ")TT;" }, new String[] { "Lcom/google/gson/JsonParseException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$1;", "this$0", "Lcom/google/gson/Gson;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "fromJson", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;", new int[] { 0, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/Gson$2;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/JsonSerializationContext;" });
	cv.visit(0, 0, "Lcom/google/gson/Gson$2;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/JsonSerializationContext;" });
	cv.visitSource("Gson.java", null);
	cv.visitInnerClass("Lcom/google/gson/Gson$2;", "Lcom/google/gson/Gson;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson$2;", "this$0", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$2;", "this$0", "Lcom/google/gson/Gson;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$2;", "this$0", "Lcom/google/gson/Gson;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;", new int[] { 0, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/Gson$3;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/Gson$3;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("Gson.java", null);
	cv.visitOuterClass("Lcom/google/gson/Gson;", "doubleAdapter", "Lcom/google/gson/TypeAdapter;Z");
	cv.visitInnerClass(null, "Lcom/google/gson/Gson;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson$3;", "this$0", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Double;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextDouble", "D", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "valueOf", "Ljava/lang/Double;D", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$3;", "read", "Ljava/lang/Double;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "doubleValue", "D", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$3;", "this$0", "Lcom/google/gson/Gson;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/Gson;", "access$000", "VLcom/google/gson/Gson;D", new int[] { 2, 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$3;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/Gson$4;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/Gson$4;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("Gson.java", null);
	cv.visitOuterClass("Lcom/google/gson/Gson;", "floatAdapter", "Lcom/google/gson/TypeAdapter;Z");
	cv.visitInnerClass(null, "Lcom/google/gson/Gson;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson$4;", "this$0", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Float;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextDouble", "D", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_DOUBLE_TO_FLOAT, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "valueOf", "Ljava/lang/Float;F", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$4;", "read", "Ljava/lang/Float;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "floatValue", "F", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$4;", "this$0", "Lcom/google/gson/Gson;", 1, 4);
		mv.visitOperationInsn(INSN_FLOAT_TO_DOUBLE, 2, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/Gson;", "access$000", "VLcom/google/gson/Gson;D", new int[] { 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 5, 6 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$4;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson$5(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/Gson$5;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/Gson$5;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("Gson.java", null);
	cv.visitOuterClass("Lcom/google/gson/Gson;", "longAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/LongSerializationPolicy;");
	cv.visitInnerClass(null, "Lcom/google/gson/Gson;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson$5;", "this$0", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextLong", "J", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$5;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson$5;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpGson$FutureTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/Gson$FutureTypeAdapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/Gson$FutureTypeAdapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("Gson.java", null);
	cv.visitInnerClass("Lcom/google/gson/Gson$FutureTypeAdapter;", "Lcom/google/gson/Gson;", "FutureTypeAdapter", ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE, "delegate", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setDelegate", "VLcom/google/gson/TypeAdapter;", new String[] { "(", "Lcom/google/gson/TypeAdapter", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson$FutureTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonArray(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonArray;", new String[] { "Lcom/google/gson/JsonElement;", "Ljava/lang/Iterable", "<", "Lcom/google/gson/JsonElement;", ">;" }, "Lcom/google/gson/JsonElement;", new String[] { "Ljava/lang/Iterable;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonArray;", new String[] { "Lcom/google/gson/JsonElement;", "Ljava/lang/Iterable", "<", "Lcom/google/gson/JsonElement;", ">;" }, "Lcom/google/gson/JsonElement;", new String[] { "Ljava/lang/Iterable;" });
	cv.visitSource("JsonArray.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "elements", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/JsonElement;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "add", "VLcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 2, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addAll", "VLcom/google/gson/JsonArray;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "deepCopy", "Lcom/google/gson/JsonArray;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonArray;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonArray;", "<init>", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "deepCopy", "Lcom/google/gson/JsonElement;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonArray;", "add", "VLcom/google/gson/JsonElement;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_VOLATILE + ACC_SYNTHETIC, "deepCopy", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonArray;", "deepCopy", "Lcom/google/gson/JsonArray;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 3, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lcom/google/gson/JsonArray;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonArray;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "get", "Lcom/google/gson/JsonElement;I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBigDecimal", "Ljava/math/BigDecimal;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsBigDecimal", "Ljava/math/BigDecimal;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBigInteger", "Ljava/math/BigInteger;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsBigInteger", "Ljava/math/BigInteger;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBoolean", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsBoolean", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsByte", "B", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsByte", "B", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsCharacter", "C", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsCharacter", "C", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsDouble", "D", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsDouble", "D", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsFloat", "F", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsFloat", "F", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsInt", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsInt", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsLong", "J", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsLong", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsNumber", "Ljava/lang/Number;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsNumber", "Ljava/lang/Number;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsShort", "S", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsShort", "S", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "iterator", "Ljava/util/Iterator;", new String[] { "()", "Ljava/util/Iterator", "<", "Lcom/google/gson/JsonElement;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "size", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonArray;", "elements", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonIOException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonIOException;", null, "Lcom/google/gson/JsonParseException;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonIOException;", null, "Lcom/google/gson/JsonParseException;", null);
	cv.visitSource("JsonIOException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonNull(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonNull;", null, "Lcom/google/gson/JsonElement;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonNull;", null, "Lcom/google/gson/JsonElement;", null);
	cv.visitSource("JsonNull.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "INSTANCE", "Lcom/google/gson/JsonNull;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonNull;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonNull;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_VOLATILE + ACC_SYNTHETIC, "deepCopy", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonNull;", "deepCopy", "Lcom/google/gson/JsonNull;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "deepCopy", "Lcom/google/gson/JsonNull;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Lcom/google/gson/JsonNull;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/google/gson/JsonNull;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonObject(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonObject;", null, "Lcom/google/gson/JsonElement;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonObject;", null, "Lcom/google/gson/JsonElement;", null);
	cv.visitSource("JsonObject.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "members", "Lcom/google/gson/internal/LinkedTreeMap;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<", "Ljava/lang/String;", "Lcom/google/gson/JsonElement;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "createJsonElement", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 3, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addProperty", "VLjava/lang/String;Ljava/lang/Boolean;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "createJsonElement", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addProperty", "VLjava/lang/String;Ljava/lang/Character;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "createJsonElement", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addProperty", "VLjava/lang/String;Ljava/lang/Number;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "createJsonElement", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addProperty", "VLjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "createJsonElement", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_VOLATILE + ACC_SYNTHETIC, "deepCopy", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "deepCopy", "Lcom/google/gson/JsonObject;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "deepCopy", "Lcom/google/gson/JsonObject;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonObject;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "<init>", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "entrySet", "Ljava/util/Set;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Map$Entry;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/String;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "deepCopy", "Lcom/google/gson/JsonElement;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 2, 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "entrySet", "Ljava/util/Set;", new String[] { "()", "Ljava/util/Set", "<", "Ljava/util/Map$Entry", "<", "Ljava/lang/String;", "Lcom/google/gson/JsonElement;", ">;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "entrySet", "Ljava/util/Set;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 3, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lcom/google/gson/JsonObject;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonObject;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "get", "Lcom/google/gson/JsonElement;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonArray", "Lcom/google/gson/JsonArray;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonArray;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonObject", "Lcom/google/gson/JsonObject;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonObject;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsJsonPrimitive", "Lcom/google/gson/JsonPrimitive;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "has", "ZLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "containsKey", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "remove", "Lcom/google/gson/JsonElement;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonObject;", "members", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap;", "remove", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonPrimitive(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonPrimitive;", null, "Lcom/google/gson/JsonElement;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonPrimitive;", null, "Lcom/google/gson/JsonElement;", null);
	cv.visitSource("JsonPrimitive.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "PRIMITIVE_TYPES", "[Ljava/lang/Class;", new String[] { "[", "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "value", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_16, 0, 16);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Integer;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Long;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Short;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Float;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Double;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Byte;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 6);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Boolean;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 7);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Character;", "TYPE", "Ljava/lang/Class;", 2, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 8);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Integer;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 9);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Long;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Short;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 11);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Float;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 12);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Double;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 13);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Byte;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 14);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Boolean;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 15);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Character;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/JsonPrimitive;", "PRIMITIVE_TYPES", "[Ljava/lang/Class;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Boolean;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "setValue", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Character;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "setValue", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Number;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "setValue", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "setValue", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonElement;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "setValue", "VLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "isIntegral", "ZLcom/google/gson/JsonPrimitive;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 2, 3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 2, 0, "Ljava/lang/Number;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Number;");
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 0, 0, "Ljava/math/BigInteger;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 0, 0, "Ljava/lang/Long;");
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 0, 0, "Ljava/lang/Integer;");
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 0, 0, "Ljava/lang/Short;");
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 0, 0, "Ljava/lang/Byte;");
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "isPrimitiveOrString", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 6, 7, 0, "Ljava/lang/String;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 6, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 5);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "PRIMITIVE_TYPES", "[Ljava/lang/Class;", 0, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 6, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_VOLATILE + ACC_SYNTHETIC, "deepCopy", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "deepCopy", "Lcom/google/gson/JsonPrimitive;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "deepCopy", "Lcom/google/gson/JsonPrimitive;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 11, 12);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 5);
		mv.visitLabel(l0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 12, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 12 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l3, 7, 8);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 12);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 7, 11);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 7, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 7, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/JsonPrimitive;", "isIntegral", "ZLcom/google/gson/JsonPrimitive;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/JsonPrimitive;", "isIntegral", "ZLcom/google/gson/JsonPrimitive;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "longValue", "J", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "longValue", "J", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 9);
		mv.visitOperationInsn(INSN_CMP_LONG, 7, 7, 9, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 7, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 7, 11);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 7, 7, 0, "Ljava/lang/Number;");
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 7, 4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 7, 7, 0, "Ljava/lang/Number;");
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "doubleValue", "D", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "doubleValue", "D", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitOperationInsn(INSN_CMPL_DOUBLE, 7, 0, 2, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 7, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_MOVE, 6, 5);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_MOVE, 5, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 5, 11);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 6, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBigDecimal", "Ljava/math/BigDecimal;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/math/BigDecimal;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/math/BigDecimal;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/math/BigDecimal;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigDecimal;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBigInteger", "Ljava/math/BigInteger;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/math/BigInteger;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/math/BigInteger;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/math/BigInteger;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigInteger;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsBoolean", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isBoolean", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsBooleanWrapper", "Ljava/lang/Boolean;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Boolean;", "booleanValue", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "parseBoolean", "ZLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "getAsBooleanWrapper", "Ljava/lang/Boolean;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Boolean;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsByte", "B", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "byteValue", "B", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Byte;", "parseByte", "BLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsCharacter", "C", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsDouble", "D", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "doubleValue", "D", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "parseDouble", "DLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsFloat", "F", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "floatValue", "F", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "parseFloat", "FLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsInt", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "intValue", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "parseInt", "ILjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsLong", "J", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "longValue", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "parseLong", "JLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsNumber", "Ljava/lang/Number;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/String;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/LazilyParsedNumber;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/String;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Number;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsShort", "S", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "shortValue", "S", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Short;", "parseShort", "SLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAsString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isBoolean", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsBooleanWrapper", "Ljava/lang/Boolean;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Boolean;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/String;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_16, 4, 32);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 2, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_16, 2, 31);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/JsonPrimitive;", "isIntegral", "ZLcom/google/gson/JsonPrimitive;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "longValue", "J", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_USHR_LONG, 2, 0, 4, 0);
		mv.visitOperationInsn(INSN_XOR_LONG_2ADDR, 2, 2, 0, 0);
		mv.visitOperationInsn(INSN_LONG_TO_INT, 2, 2, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 2, 5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 2, 0, "Ljava/lang/Number;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "doubleValue", "D", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "doubleToLongBits", "JD", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_USHR_LONG, 2, 0, 4, 0);
		mv.visitOperationInsn(INSN_XOR_LONG_2ADDR, 2, 2, 0, 0);
		mv.visitOperationInsn(INSN_LONG_TO_INT, 2, 2, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "hashCode", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isBoolean", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/Boolean;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isNumber", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/Number;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isString", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 0, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 0, 0, "Ljava/lang/String;");
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "setValue", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 3, 0, "Ljava/lang/Character;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/Character;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Character;", "charValue", "C", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;C", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 1, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 3, 0, "Ljava/lang/Number;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/JsonPrimitive;", "isPrimitiveOrString", "ZLjava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 1, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/JsonPrimitive;", "value", "Ljava/lang/Object;", 3, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonSyntaxException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonSyntaxException;", null, "Lcom/google/gson/JsonParseException;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/JsonSyntaxException;", null, "Lcom/google/gson/JsonParseException;", null);
	cv.visitSource("JsonSyntaxException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonParseException;", "<init>", "VLjava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLongSerializationPolicy$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/LongSerializationPolicy$1;", null, "Lcom/google/gson/LongSerializationPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/LongSerializationPolicy$1;", null, "Lcom/google/gson/LongSerializationPolicy;", null);
	cv.visitSource("LongSerializationPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/LongSerializationPolicy$1;", "Lcom/google/gson/LongSerializationPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/LongSerializationPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/LongSerializationPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Long;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Number;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLongSerializationPolicy$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/LongSerializationPolicy$2;", null, "Lcom/google/gson/LongSerializationPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/LongSerializationPolicy$2;", null, "Lcom/google/gson/LongSerializationPolicy;", null);
	cv.visitSource("LongSerializationPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/LongSerializationPolicy$2;", "Lcom/google/gson/LongSerializationPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/LongSerializationPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/LongSerializationPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Long;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTreeTypeAdapter$SingleTypeFactory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, 0, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TreeTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "Lcom/google/gson/TreeTypeAdapter;", "SingleTypeFactory", ACC_PRIVATE + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "deserializer", "Lcom/google/gson/JsonDeserializer;", new String[] { "Lcom/google/gson/JsonDeserializer", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "exactType", "Lcom/google/gson/reflect/TypeToken;", new String[] { "Lcom/google/gson/reflect/TypeToken", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "hierarchyType", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "matchRawType", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "serializer", "Lcom/google/gson/JsonSerializer;", new String[] { "Lcom/google/gson/JsonSerializer", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Object;Lcom/google/gson/reflect/TypeToken;ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Object;", "Lcom/google/gson/reflect/TypeToken", "<*>;Z", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lcom/google/gson/JsonSerializer;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonSerializer;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "serializer", "Lcom/google/gson/JsonSerializer;", 0, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lcom/google/gson/JsonDeserializer;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonDeserializer;");
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "deserializer", "Lcom/google/gson/JsonDeserializer;", 3, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "serializer", "Lcom/google/gson/JsonSerializer;", 0, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "deserializer", "Lcom/google/gson/JsonDeserializer;", 0, 2);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Preconditions;", "checkArgument", "VZ", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "exactType", "Lcom/google/gson/reflect/TypeToken;", 4, 2);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "matchRawType", "Z", 5, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "hierarchyType", "Ljava/lang/Class;", 6, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Object;Lcom/google/gson/reflect/TypeToken;ZLjava/lang/Class;Lcom/google/gson/TreeTypeAdapter$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "<init>", "VLjava/lang/Object;Lcom/google/gson/reflect/TypeToken;ZLjava/lang/Class;", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "exactType", "Lcom/google/gson/reflect/TypeToken;", 0, 8);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "exactType", "Lcom/google/gson/reflect/TypeToken;", 0, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "equals", "ZLjava/lang/Object;", new int[] { 0, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "matchRawType", "Z", 0, 8);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "exactType", "Lcom/google/gson/reflect/TypeToken;", 0, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/TreeTypeAdapter;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "serializer", "Lcom/google/gson/JsonSerializer;", 1, 8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "deserializer", "Lcom/google/gson/JsonDeserializer;", 2, 8);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 9);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 10);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/TreeTypeAdapter;", "<init>", "VLcom/google/gson/JsonSerializer;Lcom/google/gson/JsonDeserializer;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/TreeTypeAdapter$1;", new int[] { 0, 1, 2, 3, 4, 5, 6 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "hierarchyType", "Ljava/lang/Class;", 0, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 6);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTreeTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/TreeTypeAdapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/TreeTypeAdapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TreeTypeAdapter.java", null);
	cv.visitMemberClass("Lcom/google/gson/TreeTypeAdapter$1;", "Lcom/google/gson/TreeTypeAdapter;", "1");
	cv.visitMemberClass("Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "Lcom/google/gson/TreeTypeAdapter;", "SingleTypeFactory");
	{
		fv = cv.visitField(ACC_PRIVATE, "delegate", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "deserializer", "Lcom/google/gson/JsonDeserializer;", new String[] { "Lcom/google/gson/JsonDeserializer", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "gson", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "serializer", "Lcom/google/gson/JsonSerializer;", new String[] { "Lcom/google/gson/JsonSerializer", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "skipPast", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "typeToken", "Lcom/google/gson/reflect/TypeToken;", new String[] { "Lcom/google/gson/reflect/TypeToken", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/JsonSerializer;Lcom/google/gson/JsonDeserializer;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapterFactory;", new String[] { "(", "Lcom/google/gson/JsonSerializer", "<TT;>;", "Lcom/google/gson/JsonDeserializer", "<TT;>;", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;", "Lcom/google/gson/TypeAdapterFactory;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "serializer", "Lcom/google/gson/JsonSerializer;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "deserializer", "Lcom/google/gson/JsonDeserializer;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "gson", "Lcom/google/gson/Gson;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "typeToken", "Lcom/google/gson/reflect/TypeToken;", 4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "skipPast", "Lcom/google/gson/TypeAdapterFactory;", 5, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/JsonSerializer;Lcom/google/gson/JsonDeserializer;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/TreeTypeAdapter$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/TreeTypeAdapter;", "<init>", "VLcom/google/gson/JsonSerializer;Lcom/google/gson/JsonDeserializer;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapterFactory;", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "delegate", "Lcom/google/gson/TypeAdapter;", new String[] { "()", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "gson", "Lcom/google/gson/Gson;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "skipPast", "Lcom/google/gson/TypeAdapterFactory;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "typeToken", "Lcom/google/gson/reflect/TypeToken;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getDelegateAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/reflect/TypeToken", "<*>;", "Ljava/lang/Object;", ")", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 6);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "<init>", "VLjava/lang/Object;Lcom/google/gson/reflect/TypeToken;ZLjava/lang/Class;Lcom/google/gson/TreeTypeAdapter$1;", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newFactoryWithMatchRawType", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/reflect/TypeToken", "<*>;", "Ljava/lang/Object;", ")", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 6);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "<init>", "VLjava/lang/Object;Lcom/google/gson/reflect/TypeToken;ZLjava/lang/Class;Lcom/google/gson/TreeTypeAdapter$1;", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/Object;", ")", "Lcom/google/gson/TypeAdapterFactory;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 6);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/TreeTypeAdapter$SingleTypeFactory;", "<init>", "VLjava/lang/Object;Lcom/google/gson/reflect/TypeToken;ZLjava/lang/Class;Lcom/google/gson/TreeTypeAdapter$1;", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "deserializer", "Lcom/google/gson/JsonDeserializer;", 1, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TreeTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "parse", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonNull", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "deserializer", "Lcom/google/gson/JsonDeserializer;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "typeToken", "Lcom/google/gson/reflect/TypeToken;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "gson", "Lcom/google/gson/Gson;", 3, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "deserializationContext", "Lcom/google/gson/JsonDeserializationContext;", 3, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/JsonDeserializer;", "deserialize", "Ljava/lang/Object;Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;Lcom/google/gson/JsonDeserializationContext;", new int[] { 1, 0, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "serializer", "Lcom/google/gson/JsonSerializer;", 1, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TreeTypeAdapter;", "delegate", "Lcom/google/gson/TypeAdapter;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 1, 5, 6 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "serializer", "Lcom/google/gson/JsonSerializer;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "typeToken", "Lcom/google/gson/reflect/TypeToken;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TreeTypeAdapter;", "gson", "Lcom/google/gson/Gson;", 3, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/Gson;", "serializationContext", "Lcom/google/gson/JsonSerializationContext;", 3, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/JsonSerializer;", "serialize", "Lcom/google/gson/JsonElement;Ljava/lang/Object;Ljava/lang/reflect/Type;Lcom/google/gson/JsonSerializationContext;", new int[] { 1, 6, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "write", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", new int[] { 0, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/TypeAdapter$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/TypeAdapter$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapter.java", null);
	cv.visitOuterClass("Lcom/google/gson/TypeAdapter;", "nullSafe", "Lcom/google/gson/TypeAdapter;");
	cv.visitInnerClass(null, "Lcom/google/gson/TypeAdapter;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/TypeAdapter$1;", "this$0", "Lcom/google/gson/TypeAdapter;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TypeAdapter$1;", "this$0", "Lcom/google/gson/TypeAdapter;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/TypeAdapter$1;", "this$0", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$10(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$10;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$10;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$10;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/LinkedHashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/LinkedHashMap;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$11(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$11;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$11;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$11;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$12(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$12;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$12;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newUnsafeAllocator", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "unsafeAllocator", "Lcom/google/gson/internal/UnsafeAllocator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$rawType", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Ljava/lang/Class;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "val$rawType", "Ljava/lang/Class;", 3, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "val$type", "Ljava/lang/reflect/Type;", 4, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/UnsafeAllocator;", "create", "Lcom/google/gson/internal/UnsafeAllocator;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "unsafeAllocator", "Lcom/google/gson/internal/UnsafeAllocator;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Exception;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "unsafeAllocator", "Lcom/google/gson/internal/UnsafeAllocator;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "val$rawType", "Ljava/lang/Class;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/UnsafeAllocator;", "newInstance", "Ljava/lang/Object;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Unable to invoke no-args constructor for ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$12;", "val$type", "Ljava/lang/reflect/Type;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, ". ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Register an InstanceCreator with Gson for this type may fix this problem.");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$1;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$1;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "get", "Lcom/google/gson/internal/ObjectConstructor;Lcom/google/gson/reflect/TypeToken;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$typeCreator", "Lcom/google/gson/InstanceCreator;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/InstanceCreator;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$1;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$1;", "val$typeCreator", "Lcom/google/gson/InstanceCreator;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$1;", "val$type", "Ljava/lang/reflect/Type;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$1;", "val$typeCreator", "Lcom/google/gson/InstanceCreator;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$1;", "val$type", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/InstanceCreator;", "createInstance", "Ljava/lang/Object;Ljava/lang/reflect/Type;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$2;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$2;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "get", "Lcom/google/gson/internal/ObjectConstructor;Lcom/google/gson/reflect/TypeToken;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$rawTypeCreator", "Lcom/google/gson/InstanceCreator;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/InstanceCreator;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$2;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$2;", "val$rawTypeCreator", "Lcom/google/gson/InstanceCreator;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$2;", "val$type", "Ljava/lang/reflect/Type;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$2;", "val$rawTypeCreator", "Lcom/google/gson/InstanceCreator;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$2;", "val$type", "Ljava/lang/reflect/Type;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/InstanceCreator;", "createInstance", "Ljava/lang/Object;Ljava/lang/reflect/Type;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$3;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$3;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$constructor", "Ljava/lang/reflect/Constructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Ljava/lang/reflect/Constructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$3;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$3;", "val$constructor", "Ljava/lang/reflect/Constructor;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/InstantiationException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/reflect/InvocationTargetException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/IllegalAccessException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$3;", "val$constructor", "Ljava/lang/reflect/Constructor;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 2, 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Failed to invoke ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$3;", "val$constructor", "Ljava/lang/reflect/Constructor;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " with no args");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 1 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Failed to invoke ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$3;", "val$constructor", "Ljava/lang/reflect/Constructor;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " with no args");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$4;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$4;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$4;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/TreeSet;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/TreeSet;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$5(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$5;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$5;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Ljava/lang/reflect/Type;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "val$type", "Ljava/lang/reflect/Type;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "val$type", "Ljava/lang/reflect/Type;", 1, 4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 1, 0, "Ljava/lang/reflect/ParameterizedType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "val$type", "Ljava/lang/reflect/Type;", 1, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/ParameterizedType;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/reflect/ParameterizedType;", "getActualTypeArguments", "[Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 1, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Ljava/lang/Class;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/EnumSet;", "noneOf", "Ljava/util/EnumSet;Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Invalid EnumSet type: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "val$type", "Ljava/lang/reflect/Type;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Invalid EnumSet type: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$5;", "val$type", "Ljava/lang/reflect/Type;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$6(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$6;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$6;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$6;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/LinkedHashSet;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/LinkedHashSet;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$7(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$7;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$7;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$7;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/LinkedList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/LinkedList;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$8(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$8;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$8;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$8;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpConstructorConstructor$9(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/ConstructorConstructor$9;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visit(0, 0, "Lcom/google/gson/internal/ConstructorConstructor$9;", new String[] { "Ljava/lang/Object;", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/internal/ObjectConstructor;" });
	cv.visitSource("ConstructorConstructor.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/ConstructorConstructor;", "newDefaultImplementationConstructor", "Lcom/google/gson/internal/ObjectConstructor;Ljava/lang/reflect/Type;Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/ConstructorConstructor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/ConstructorConstructor$9;", "this$0", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "construct", "Ljava/lang/Object;", new String[] { "()TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/TreeMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/TreeMap;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExcluder$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/Excluder$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/Excluder$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("Excluder.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/Excluder;", "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/Excluder;", null, 0);
	{
		fv = cv.visitField(ACC_PRIVATE, "delegate", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/Excluder;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$gson", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$skipDeserialize", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$skipSerialize", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Lcom/google/gson/reflect/TypeToken;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/Excluder;ZZLcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "this$0", "Lcom/google/gson/internal/Excluder;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/Excluder$1;", "val$skipDeserialize", "Z", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/Excluder$1;", "val$skipSerialize", "Z", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "val$gson", "Lcom/google/gson/Gson;", 4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "val$type", "Lcom/google/gson/reflect/TypeToken;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "delegate", "Lcom/google/gson/TypeAdapter;", new String[] { "()", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "val$gson", "Lcom/google/gson/Gson;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "this$0", "Lcom/google/gson/internal/Excluder;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "val$type", "Lcom/google/gson/reflect/TypeToken;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getDelegateAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder$1;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/Excluder$1;", "val$skipDeserialize", "Z", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "skipValue", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder$1;", "delegate", "Lcom/google/gson/TypeAdapter;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/Excluder$1;", "val$skipSerialize", "Z", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder$1;", "delegate", "Lcom/google/gson/TypeAdapter;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExcluder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/Excluder;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;", "Ljava/lang/Cloneable;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/Excluder;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;", "Ljava/lang/Cloneable;" });
	cv.visitSource("Excluder.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "DEFAULT", "Lcom/google/gson/internal/Excluder;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "IGNORE_VERSIONS", "D", null, -1.0d);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "deserializationStrategies", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/ExclusionStrategy;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "modifiers", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "requireExpose", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "serializationStrategies", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/ExclusionStrategy;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "serializeInnerClasses", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "version", "D", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/Excluder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/Excluder;", "DEFAULT", "Lcom/google/gson/internal/Excluder;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitVarInsn(INSN_CONST_WIDE_HIGH16, 0, -4616189618054758400L);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lcom/google/gson/internal/Excluder;", "version", "D", 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 0, 136);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/Excluder;", "modifiers", "I", 0, 2);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/Excluder;", "serializeInnerClasses", "Z", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "emptyList", "Ljava/util/List;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder;", "serializationStrategies", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "emptyList", "Ljava/util/List;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder;", "deserializationStrategies", "Ljava/util/List;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isAnonymousOrLocal", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/Enum;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAnonymousClass", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isLocalClass", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isInnerClass", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isMemberClass", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isStatic", "ZLjava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isStatic", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getModifiers", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_AND_INT_LIT8, 0, 0, 0, 8);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isValidSince", "ZLcom/google/gson/annotations/Since;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/annotations/Since;", "value", "D", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/internal/Excluder;", "version", "D", 2, 4);
		mv.visitOperationInsn(INSN_CMPL_DOUBLE, 2, 0, 2, 0);
		mv.visitJumpInsn(INSN_IF_LEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isValidUntil", "ZLcom/google/gson/annotations/Until;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/annotations/Until;", "value", "D", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/internal/Excluder;", "version", "D", 2, 4);
		mv.visitOperationInsn(INSN_CMPG_DOUBLE, 2, 0, 2, 0);
		mv.visitJumpInsn(INSN_IF_GTZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isValidVersion", "ZLcom/google/gson/annotations/Since;Lcom/google/gson/annotations/Until;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isValidSince", "ZLcom/google/gson/annotations/Since;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isValidUntil", "ZLcom/google/gson/annotations/Until;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "clone", "Lcom/google/gson/internal/Excluder;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/CloneNotSupportedException;");
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljava/lang/Object;", "clone", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/internal/Excluder;");
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "clone", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/CloneNotSupportedException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "clone", "Lcom/google/gson/internal/Excluder;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "excludeClass", "ZLjava/lang/Class;Z", new int[] { 7, 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "excludeClass", "ZLjava/lang/Class;Z", new int[] { 7, 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/Excluder$1;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 7);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 8);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/internal/Excluder$1;", "<init>", "VLcom/google/gson/internal/Excluder;ZZLcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "disableInnerClassSerialization", "Lcom/google/gson/internal/Excluder;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "clone", "Lcom/google/gson/internal/Excluder;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/Excluder;", "serializeInnerClasses", "Z", 1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "excludeClass", "ZLjava/lang/Class;Z", new String[] { "(", "Ljava/lang/Class", "<*>;Z)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/internal/Excluder;", "version", "D", 3, 8);
		mv.visitVarInsn(INSN_CONST_WIDE_HIGH16, 6, -4616189618054758400L);
		mv.visitOperationInsn(INSN_CMPL_DOUBLE, 3, 3, 6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lcom/google/gson/annotations/Since;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 9, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/annotations/Since;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Lcom/google/gson/annotations/Until;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lcom/google/gson/annotations/Until;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isValidVersion", "ZLcom/google/gson/annotations/Since;Lcom/google/gson/annotations/Until;", new int[] { 8, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 5);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 3);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/Excluder;", "serializeInnerClasses", "Z", 3, 8);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isInnerClass", "ZLjava/lang/Class;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 5);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isAnonymousOrLocal", "ZLjava/lang/Class;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 3, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 5);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 10, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "serializationStrategies", "Ljava/util/List;", 2, 8);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/ExclusionStrategy;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/ExclusionStrategy;", "shouldSkipClass", "ZLjava/lang/Class;", new int[] { 0, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 3, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 5);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "deserializationStrategies", "Ljava/util/List;", 2, 8);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "excludeField", "ZLjava/lang/reflect/Field;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/Excluder;", "modifiers", "I", 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitOperationInsn(INSN_AND_INT_2ADDR, 5, 5, 6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 5);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lcom/google/gson/internal/Excluder;", "version", "D", 5, 10);
		mv.visitVarInsn(INSN_CONST_WIDE_HIGH16, 8, -4616189618054758400L);
		mv.visitOperationInsn(INSN_CMPL_DOUBLE, 5, 5, 8, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Lcom/google/gson/annotations/Since;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 11, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Lcom/google/gson/annotations/Since;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 6, 0, 0, "Lcom/google/gson/annotations/Until;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 11, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 6, 0, "Lcom/google/gson/annotations/Until;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isValidVersion", "ZLcom/google/gson/annotations/Since;Lcom/google/gson/annotations/Until;", new int[] { 10, 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "isSynthetic", "Z", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/Excluder;", "requireExpose", "Z", 5, 10);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 5, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Lcom/google/gson/annotations/Expose;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 11, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/annotations/Expose;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 12, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/annotations/Expose;", "serialize", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 5, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/annotations/Expose;", "deserialize", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 5, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/Excluder;", "serializeInnerClasses", "Z", 5, 10);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l7, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isInnerClass", "ZLjava/lang/Class;", new int[] { 10, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/Excluder;", "isAnonymousOrLocal", "ZLjava/lang/Class;", new int[] { 10, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 12, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "serializationStrategies", "Ljava/util/List;", 4, 10);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l11, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/FieldAttributes;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldAttributes;", "<init>", "VLjava/lang/reflect/Field;", new int[] { 2, 11 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l12 = new Label();
		mv.visitLabel(l12);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l11, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/ExclusionStrategy;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/ExclusionStrategy;", "shouldSkipField", "ZLcom/google/gson/FieldAttributes;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l12, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 7);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "deserializationStrategies", "Ljava/util/List;", 4, 10);
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l11);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "excludeFieldsWithoutExposeAnnotation", "Lcom/google/gson/internal/Excluder;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "clone", "Lcom/google/gson/internal/Excluder;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/Excluder;", "requireExpose", "Z", 1, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "withExclusionStrategy", "Lcom/google/gson/internal/Excluder;Lcom/google/gson/ExclusionStrategy;ZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "clone", "Lcom/google/gson/internal/Excluder;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "serializationStrategies", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VLjava/util/Collection;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder;", "serializationStrategies", "Ljava/util/List;", 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "serializationStrategies", "Ljava/util/List;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 4 });
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "deserializationStrategies", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VLjava/util/Collection;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/Excluder;", "deserializationStrategies", "Ljava/util/List;", 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/Excluder;", "deserializationStrategies", "Ljava/util/List;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 4 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "withModifiers", "Lcom/google/gson/internal/Excluder;[I", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "clone", "Lcom/google/gson/internal/Excluder;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/Excluder;", "modifiers", "I", 5, 4);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 7);
		mv.visitArrayLengthInsn(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 1, 2);
		mv.visitArrayOperationInsn(INSN_AGET, 3, 0, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/Excluder;", "modifiers", "I", 5, 4);
		mv.visitOperationInsn(INSN_OR_INT_2ADDR, 5, 5, 3, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/Excluder;", "modifiers", "I", 5, 4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "withVersion", "Lcom/google/gson/internal/Excluder;D", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "clone", "Lcom/google/gson/internal/Excluder;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lcom/google/gson/internal/Excluder;", "version", "D", 2, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$EntrySet$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<TK;TV;>.", "LinkedTreeMapIterator", "<", "Ljava/util/Map$Entry", "<TK;TV;>;>;" }, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<TK;TV;>.", "LinkedTreeMapIterator", "<", "Ljava/util/Map$Entry", "<TK;TV;>;>;" }, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", null);
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "iterator", "Ljava/util/Iterator;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$1", "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap$EntrySet;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;", "this$1", "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", 3, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap;Lcom/google/gson/internal/LinkedTreeMap$1;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "next", "Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;", "next", "Ljava/util/Map$Entry;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "next", "Ljava/util/Map$Entry;", new String[] { "()", "Ljava/util/Map$Entry", "<TK;TV;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap$EntrySet$1;", "nextNode", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpLinkedTreeMap$KeySet$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/LinkedTreeMap$KeySet$1;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<TK;TV;>.", "LinkedTreeMapIterator", "<TK;>;" }, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/LinkedTreeMap$KeySet$1;", new String[] { "Lcom/google/gson/internal/LinkedTreeMap", "<TK;TV;>.", "LinkedTreeMapIterator", "<TK;>;" }, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", null);
	cv.visitSource("LinkedTreeMap.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "iterator", "Ljava/util/Iterator;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$1", "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/LinkedTreeMap$KeySet;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet$1;", "this$1", "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", 3, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$KeySet;", "this$0", "Lcom/google/gson/internal/LinkedTreeMap;", 0, 3);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap$LinkedTreeMapIterator;", "<init>", "VLcom/google/gson/internal/LinkedTreeMap;Lcom/google/gson/internal/LinkedTreeMap$1;", new int[] { 2, 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "next", "Ljava/lang/Object;", new String[] { "()TK;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/LinkedTreeMap$KeySet$1;", "nextNode", "Lcom/google/gson/internal/LinkedTreeMap$Node;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/LinkedTreeMap$Node;", "key", "Ljava/lang/Object;", 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpUnsafeAllocator$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$1;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$1;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visitSource("UnsafeAllocator.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/UnsafeAllocator;", "create", "Lcom/google/gson/internal/UnsafeAllocator;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/UnsafeAllocator;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$allocateInstance", "Ljava/lang/reflect/Method;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$unsafe", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Method;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$1;", "val$allocateInstance", "Ljava/lang/reflect/Method;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$1;", "val$unsafe", "Ljava/lang/Object;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newInstance", "Ljava/lang/Object;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$1;", "val$allocateInstance", "Ljava/lang/reflect/Method;", 0, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$1;", "val$unsafe", "Ljava/lang/Object;", 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpUnsafeAllocator$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$2;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$2;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visitSource("UnsafeAllocator.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/UnsafeAllocator;", "create", "Lcom/google/gson/internal/UnsafeAllocator;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/UnsafeAllocator;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$newInstance", "Ljava/lang/reflect/Method;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$2;", "val$newInstance", "Ljava/lang/reflect/Method;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newInstance", "Ljava/lang/Object;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$2;", "val$newInstance", "Ljava/lang/reflect/Method;", 0, 5);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 2, 3);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpUnsafeAllocator$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$3;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$3;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visitSource("UnsafeAllocator.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/UnsafeAllocator;", "create", "Lcom/google/gson/internal/UnsafeAllocator;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/UnsafeAllocator;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$constructorId", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$newInstance", "Ljava/lang/reflect/Method;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Method;I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$3;", "val$newInstance", "Ljava/lang/reflect/Method;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lcom/google/gson/internal/UnsafeAllocator$3;", "val$constructorId", "I", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newInstance", "Ljava/lang/Object;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/UnsafeAllocator$3;", "val$newInstance", "Ljava/lang/reflect/Method;", 0, 5);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 2, 3);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitFieldInsn(INSN_IGET, "Lcom/google/gson/internal/UnsafeAllocator$3;", "val$constructorId", "I", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpUnsafeAllocator$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$4;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/UnsafeAllocator$4;", null, "Lcom/google/gson/internal/UnsafeAllocator;", null);
	cv.visitSource("UnsafeAllocator.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/UnsafeAllocator;", "create", "Lcom/google/gson/internal/UnsafeAllocator;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/UnsafeAllocator;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/UnsafeAllocator;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newInstance", "Ljava/lang/Object;Ljava/lang/Class;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Cannot allocate ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpArrayTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/ArrayTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/ArrayTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("ArrayTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/ArrayTypeAdapter$1;", "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 2, 0, "Ljava/lang/reflect/GenericArrayType;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 2, 0, "Ljava/lang/Class;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isArray", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getArrayComponentType", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 6, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/Class;", new int[] { 3, 6, 1, 4 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpArrayTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", new String[] { "<E:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Object;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", new String[] { "<E:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Object;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("ArrayTypeAdapter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "componentType", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<TE;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "componentTypeAdapter", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TE;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/ArrayTypeAdapter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/Class;", new String[] { "(", "Lcom/google/gson/Gson;", "Lcom/google/gson/TypeAdapter", "<TE;>;", "Ljava/lang/Class", "<TE;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;", new int[] { 0, 2, 3, 4 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "componentTypeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "componentType", "Ljava/lang/Class;", 4, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 7 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 7 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "componentTypeAdapter", "Lcom/google/gson/TypeAdapter;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 4, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 2 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 7 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "componentType", "Ljava/lang/Class;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "newInstance", "Ljava/lang/Object;Ljava/lang/Class;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitJumpInsn(INSN_IF_GE, l1, 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "set", "VLjava/lang/Object;ILjava/lang/Object;", new int[] { 0, 1, 4 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "getLength", "ILjava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "get", "Ljava/lang/Object;Ljava/lang/Object;I", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ArrayTypeAdapter;", "componentTypeAdapter", "Lcom/google/gson/TypeAdapter;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 3, 5, 2 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCollectionTypeAdapterFactory$Adapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", new String[] { "<E:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Collection", "<TE;>;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", new String[] { "<E:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Collection", "<TE;>;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("CollectionTypeAdapterFactory.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", "Adapter", ACC_PRIVATE + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructor", "Lcom/google/gson/internal/ObjectConstructor;", new String[] { "Lcom/google/gson/internal/ObjectConstructor", "<+", "Ljava/util/Collection", "<TE;>;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "elementTypeAdapter", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TE;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Lcom/google/gson/internal/ObjectConstructor;", new String[] { "(", "Lcom/google/gson/Gson;", "Ljava/lang/reflect/Type;", "Lcom/google/gson/TypeAdapter", "<TE;>;", "Lcom/google/gson/internal/ObjectConstructor", "<+", "Ljava/util/Collection", "<TE;>;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;", new int[] { 0, 2, 4, 3 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "elementTypeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "constructor", "Lcom/google/gson/internal/ObjectConstructor;", 5, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "read", "Ljava/util/Collection;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/Collection;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")", "Ljava/util/Collection", "<TE;>;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 5 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "constructor", "Lcom/google/gson/internal/ObjectConstructor;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/internal/ObjectConstructor;", "construct", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Collection;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 5 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "elementTypeAdapter", "Lcom/google/gson/TypeAdapter;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Collection;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Collection;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Collection;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Collection;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "Ljava/util/Collection", "<TE;>;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Collection;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "elementTypeAdapter", "Lcom/google/gson/TypeAdapter;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 2, 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCollectionTypeAdapterFactory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("CollectionTypeAdapterFactory.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", "Adapter");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 6, 0, 0, "Ljava/util/Collection;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 6, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getCollectionElementType", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;", new int[] { 5, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 8, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/ConstructorConstructor;", "get", "Lcom/google/gson/internal/ObjectConstructor;Lcom/google/gson/reflect/TypeToken;", new int[] { 6, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/CollectionTypeAdapterFactory$Adapter;", "<init>", "VLcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Lcom/google/gson/internal/ObjectConstructor;", new int[] { 4, 8, 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpDateTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/DateTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/DateTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("DateTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/DateTypeAdapter$1;", "Lcom/google/gson/internal/bind/DateTypeAdapter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/Date;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/DateTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "<init>", "V", new int[] { 0 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpDateTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/DateTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Date;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/DateTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Date;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("DateTypeAdapter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "enUsFormat", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "iso8601Format", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "localFormat", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/DateTypeAdapter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/DateTypeAdapter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateTimeInstance", "Ljava/text/DateFormat;IILjava/util/Locale;", new int[] { 1, 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "enUsFormat", "Ljava/text/DateFormat;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/DateFormat;", "getDateTimeInstance", "Ljava/text/DateFormat;II", new int[] { 1, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "buildIso8601Format", "Ljava/text/DateFormat;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "iso8601Format", "Ljava/text/DateFormat;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "buildIso8601Format", "Ljava/text/DateFormat;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/text/SimpleDateFormat;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "yyyy-MM-dd'T'HH:mm:ss'Z'");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/Locale;", "US", "Ljava/util/Locale;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/text/SimpleDateFormat;", "<init>", "VLjava/lang/String;Ljava/util/Locale;", new int[] { 0, 1, 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "UTC");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/TimeZone;", "getTimeZone", "Ljava/util/TimeZone;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "setTimeZone", "VLjava/util/TimeZone;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_DECLARED_SYNCHRONIZED, "deserializeToDate", "Ljava/util/Date;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/text/ParseException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "localFormat", "Ljava/text/DateFormat;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l5 = new Label();
		mv.visitLabel(l5);
		Label l6 = new Label();
		Label l7 = new Label();
		mv.visitTryCatchBlock(l5, l6, l7, "Ljava/text/ParseException;");
		mv.visitTryCatchBlock(l5, l6, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "enUsFormat", "Ljava/text/DateFormat;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		Label l10 = new Label();
		mv.visitTryCatchBlock(l8, l9, l10, "Ljava/text/ParseException;");
		mv.visitTryCatchBlock(l8, l9, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "iso8601Format", "Ljava/text/DateFormat;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 1, 3 });
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l10);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l11 = new Label();
		mv.visitLabel(l11);
		mv.visitTryCatchBlock(l11, l3, l3, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 1, 3, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "read", "Ljava/util/Date;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/Date;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "deserializeToDate", "Ljava/util/Date;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Date;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Date;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Date;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 4, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 3 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l4, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/DateTypeAdapter;", "enUsFormat", "Ljava/text/DateFormat;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "format", "Ljava/lang/String;Ljava/util/Date;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 2);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonTreeReader(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", null, "Lcom/google/gson/stream/JsonReader;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", null, "Lcom/google/gson/stream/JsonReader;", null);
	cv.visitSource("JsonTreeReader.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "SENTINEL_CLOSED", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "UNREADABLE_READER", "Ljava/io/Reader;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "stack", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Object;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/JsonTreeReader$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "UNREADABLE_READER", "Ljava/io/Reader;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "SENTINEL_CLOSED", "Ljava/lang/Object;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "UNREADABLE_READER", "Ljava/io/Reader;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonReader;", "<init>", "VLjava/io/Reader;", new int[] { 1, 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "expect", "VLcom/google/gson/stream/JsonToken;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Expected ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "peekStack", "Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "popStack", "Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "remove", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginArray", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonArray;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonArray;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginObject", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonObject;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "entrySet", "Ljava/util/Set;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "clear", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "SENTINEL_CLOSED", "Ljava/lang/Object;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endArray", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endObject", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hasNext", "Z", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextBoolean", "Z", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsBoolean", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextDouble", "D", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 2, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 2, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Expected ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsDouble", "D", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "isLenient", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isInfinite", "ZD", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "JSON forbids NaN and infinities: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;D", new int[] { 4, 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/NumberFormatException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextInt", "I", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Expected ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsInt", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextLong", "J", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 2, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 2, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Expected ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsLong", "J", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextName", "Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 4, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/util/Iterator;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Map$Entry;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/String;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextNull", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nextString", "Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "peek", "Lcom/google/gson/stream/JsonToken;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_DOCUMENT", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 2, 0, "Ljava/util/Iterator;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 4, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 5, 5, 0, -2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 4, 0, "Lcom/google/gson/JsonObject;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/util/Iterator;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 4, 0);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 2, 0, "Lcom/google/gson/JsonObject;");
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_OBJECT", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 2, 0, "Lcom/google/gson/JsonArray;");
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l7);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 2, 0, "Lcom/google/gson/JsonPrimitive;");
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isString", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isBoolean", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l10, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l11, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NUMBER", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l11);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 4 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l8);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 2, 0, "Lcom/google/gson/JsonNull;");
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l12, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l12);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "SENTINEL_CLOSED", "Ljava/lang/Object;", 4, 0);
		Label l13 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l13, 2, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "JsonReader is closed");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l13);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 4 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "promoteNameToValue", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "expect", "VLcom/google/gson/stream/JsonToken;", new int[] { 5, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peekStack", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/util/Iterator;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Map$Entry;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "stack", "Ljava/util/List;", 3, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/String;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/String;", new int[] { 4, 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "skipValue", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NAME", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "nextName", "Ljava/lang/String;", new int[] { 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeReader;", "popStack", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonTreeWriter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", null, "Lcom/google/gson/stream/JsonWriter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", null, "Lcom/google/gson/stream/JsonWriter;", null);
	cv.visitSource("JsonTreeWriter.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "SENTINEL_CLOSED", "Lcom/google/gson/JsonPrimitive;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "UNWRITABLE_WRITER", "Ljava/io/Writer;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "pendingName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "product", "Lcom/google/gson/JsonElement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "stack", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lcom/google/gson/JsonElement;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/JsonTreeWriter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "UNWRITABLE_WRITER", "Ljava/io/Writer;", 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "closed");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "SENTINEL_CLOSED", "Lcom/google/gson/JsonPrimitive;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "UNWRITABLE_WRITER", "Ljava/io/Writer;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/stream/JsonWriter;", "<init>", "VLjava/io/Writer;", new int[] { 1, 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 0, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "product", "Lcom/google/gson/JsonElement;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "peek", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "put", "VLcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 2, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonNull", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "getSerializeNulls", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "peek", "Lcom/google/gson/JsonElement;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/JsonObject;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 1, 2, 4 });
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 2, 3);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "product", "Lcom/google/gson/JsonElement;", 4, 3);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "peek", "Lcom/google/gson/JsonElement;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 2, 0, 0, "Lcom/google/gson/JsonArray;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 2, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonArray;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonArray;", "add", "VLcom/google/gson/JsonElement;", new int[] { 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 2 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginArray", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonArray;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonArray;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "beginObject", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonObject;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "close", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/IOException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Incomplete document");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 0, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "SENTINEL_CLOSED", "Lcom/google/gson/JsonPrimitive;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endArray", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 1, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "peek", "Lcom/google/gson/JsonElement;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Lcom/google/gson/JsonArray;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "remove", "Ljava/lang/Object;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endObject", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 1, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "peek", "Lcom/google/gson/JsonElement;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Lcom/google/gson/JsonObject;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "remove", "Ljava/lang/Object;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "flush", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "get", "Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Expected one JSON element but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "product", "Lcom/google/gson/JsonElement;", 0, 3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "stack", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "peek", "Lcom/google/gson/JsonElement;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Lcom/google/gson/JsonObject;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "pendingName", "Ljava/lang/String;", 3, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "nullValue", "Lcom/google/gson/stream/JsonWriter;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;D", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "isLenient", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isInfinite", "ZD", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "JSON forbids NaN and infinities: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;D", new int[] { 1, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "valueOf", "Ljava/lang/Double;D", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Number;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;J", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Number;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "isLenient", "Z", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Number;", "doubleValue", "D", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isNaN", "ZD", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "isInfinite", "ZD", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "JSON forbids NaN and infinities: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 3, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Number;", new int[] { 2, 6 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 5, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "value", "Lcom/google/gson/stream/JsonWriter;Z", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Boolean;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/JsonTreeWriter;", "put", "VLcom/google/gson/JsonElement;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMapTypeAdapterFactory$Adapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", new String[] { "<K:", "Ljava/lang/Object;", "V:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Map", "<TK;TV;>;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", new String[] { "<K:", "Ljava/lang/Object;", "V:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Map", "<TK;TV;>;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("MapTypeAdapterFactory.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "Adapter", ACC_PRIVATE + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructor", "Lcom/google/gson/internal/ObjectConstructor;", new String[] { "Lcom/google/gson/internal/ObjectConstructor", "<+", "Ljava/util/Map", "<TK;TV;>;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "keyTypeAdapter", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TK;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TV;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/bind/MapTypeAdapterFactory;Lcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Lcom/google/gson/internal/ObjectConstructor;", new String[] { "(", "Lcom/google/gson/Gson;", "Ljava/lang/reflect/Type;", "Lcom/google/gson/TypeAdapter", "<TK;>;", "Ljava/lang/reflect/Type;", "Lcom/google/gson/TypeAdapter", "<TV;>;", "Lcom/google/gson/internal/ObjectConstructor", "<+", "Ljava/util/Map", "<TK;TV;>;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "this$0", "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;", new int[] { 0, 3, 5, 4 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "keyTypeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;", new int[] { 0, 3, 7, 6 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "constructor", "Lcom/google/gson/internal/ObjectConstructor;", 8, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "keyToString", "Ljava/lang/String;Lcom/google/gson/JsonElement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonPrimitive", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsJsonPrimitive", "Lcom/google/gson/JsonPrimitive;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isBoolean", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsBoolean", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "toString", "Ljava/lang/String;Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isString", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonNull", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "null");
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "read", "Ljava/util/Map;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/Map;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")", "Ljava/util/Map", "<TK;TV;>;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 9 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "constructor", "Lcom/google/gson/internal/ObjectConstructor;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/internal/ObjectConstructor;", "construct", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/util/Map;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BEGIN_ARRAY", "Lcom/google/gson/stream/JsonToken;", 5, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 9 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 9 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "keyTypeAdapter", "Lcom/google/gson/TypeAdapter;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 0, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "duplicate key: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 9 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 9 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginObject", "V", new int[] { 9 });
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 5, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/JsonReaderInternalAccess;", "INSTANCE", "Lcom/google/gson/internal/JsonReaderInternalAccess;", 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/JsonReaderInternalAccess;", "promoteNameToValue", "VLcom/google/gson/stream/JsonReader;", new int[] { 5, 9 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "keyTypeAdapter", "Lcom/google/gson/TypeAdapter;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 0, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "duplicate key: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_THROW, 5);
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endObject", "V", new int[] { 9 });
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Map;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Map;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Map;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "Ljava/util/Map", "<TK;TV;>;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 11, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "this$0", "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "access$000", "ZLcom/google/gson/internal/bind/MapTypeAdapterFactory;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "entrySet", "Ljava/util/Set;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "iterator", "Ljava/util/Iterator;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Map$Entry;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 10, 7 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 7, 10, 8 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "size", "I", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VI", new int[] { 5, 7 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "size", "I", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VI", new int[] { 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "entrySet", "Ljava/util/Set;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "iterator", "Ljava/util/Iterator;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Map$Entry;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "keyTypeAdapter", "Lcom/google/gson/TypeAdapter;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "toJsonTree", "Lcom/google/gson/JsonElement;Ljava/lang/Object;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 5, 4 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonArray", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l7, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonObject", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 7, 0);
		mv.visitLabel(l7);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitOperationInsn(INSN_OR_INT_2ADDR, 1, 1, 7, 0);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l6);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l10, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l11 = new Label();
		mv.visitLabel(l11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l12 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l12, 2, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Streams;", "write", "VLcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonWriter;", new int[] { 7, 10 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 6, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 7, 10, 8 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l13 = new Label();
		mv.visitLabel(l13);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l14 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l14, 2, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "keyToString", "Ljava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 9, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 10, 7 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "valueTypeAdapter", "Lcom/google/gson/TypeAdapter;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "get", "Ljava/lang/Object;I", new int[] { 6, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 7, 10, 8 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l13, 0, 0);
		mv.visitLabel(l14);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 10 });
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMapTypeAdapterFactory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("MapTypeAdapterFactory.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "Adapter");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "complexMapKeySerialization", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "complexMapKeySerialization", "Z", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "ZLcom/google/gson/internal/bind/MapTypeAdapterFactory;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "complexMapKeySerialization", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getKeyAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Ljava/lang/reflect/Type;", new String[] { "(", "Lcom/google/gson/Gson;", "Ljava/lang/reflect/Type;", ")", "Lcom/google/gson/TypeAdapter", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Boolean;", "TYPE", "Ljava/lang/Class;", 0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/Boolean;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 3, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters;", "BOOLEAN_AS_STRING", "Lcom/google/gson/TypeAdapter;", 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(15, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 14 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 14 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/Map;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 1, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getRawType", "Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "getMapKeyAndValueTypes", "[Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;", new int[] { 11, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 8, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "getKeyAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Ljava/lang/reflect/Type;", new int[] { 12, 13, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 8, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 13, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/ConstructorConstructor;", "get", "Lcom/google/gson/internal/ObjectConstructor;Lcom/google/gson/reflect/TypeToken;", new int[] { 1, 14 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;");
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 8, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 5, 8, 5);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 12);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 13);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/internal/bind/MapTypeAdapterFactory$Adapter;", "<init>", "VLcom/google/gson/internal/bind/MapTypeAdapterFactory;Lcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter;Lcom/google/gson/internal/ObjectConstructor;", new int[] { 0, 1, 2, 3, 4, 5, 6, 7 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpObjectTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("ObjectTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;", "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/Object;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;", new int[] { 0, 4, 1 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpObjectTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Object;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Object;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("ObjectTypeAdapter.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "2");
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "gson", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "gson", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/internal/bind/ObjectTypeAdapter$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "<init>", "VLcom/google/gson/Gson;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter$2;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitArrayOperationInsn(INSN_AGET, 3, 3, 4);
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTableSwitchInsn(3, 1, 6, l0, new Label[] { l1, l2, l3, l4, l5, l6 });
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "V", new int[] { 3 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 6 });
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 6 });
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/LinkedTreeMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LinkedTreeMap;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginObject", "V", new int[] { 6 });
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l11, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endObject", "V", new int[] { 6 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextDouble", "D", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "valueOf", "Ljava/lang/Double;D", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextBoolean", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 6 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		Label l12 = new Label();
		mv.visitLabel(l12);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;", "gson", "Lcom/google/gson/Gson;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Lcom/google/gson/internal/bind/ObjectTypeAdapter;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 4, 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpReflectiveTypeAdapterFactory$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", null, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", null, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", null);
	cv.visitSource("ReflectiveTypeAdapterFactory.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "createBoundField", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;Lcom/google/gson/Gson;Ljava/lang/reflect/Field;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;ZZ");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL, "typeAdapter", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$context", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$field", "Ljava/lang/reflect/Field;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$fieldType", "Lcom/google/gson/reflect/TypeToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$isPrimitive", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;Ljava/lang/String;ZZLcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Field;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "this$0", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", 3, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$context", "Lcom/google/gson/Gson;", 7, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$fieldType", "Lcom/google/gson/reflect/TypeToken;", 8, 2);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$field", "Ljava/lang/reflect/Field;", 9, 2);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$isPrimitive", "Z", 10, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "<init>", "VLjava/lang/String;ZZ", new int[] { 2, 4, 5, 6 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$context", "Lcom/google/gson/Gson;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$fieldType", "Lcom/google/gson/reflect/TypeToken;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "typeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "read", "VLcom/google/gson/stream/JsonReader;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$isPrimitive", "Z", 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 1, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$field", "Ljava/lang/reflect/Field;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "set", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 1, 4, 0 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$field", "Ljava/lang/reflect/Field;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$context", "Lcom/google/gson/Gson;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "typeAdapter", "Lcom/google/gson/TypeAdapter;", 3, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "val$fieldType", "Lcom/google/gson/reflect/TypeToken;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;", new int[] { 1, 2, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 1, 6, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpReflectiveTypeAdapterFactory$Adapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("ReflectiveTypeAdapterFactory.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "Adapter", ACC_PUBLIC + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "boundFields", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/String;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructor", "Lcom/google/gson/internal/ObjectConstructor;", new String[] { "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ObjectConstructor;Ljava/util/Map;", new String[] { "(", "Lcom/google/gson/internal/ObjectConstructor", "<TT;>;", "Ljava/util/Map", "<", "Ljava/lang/String;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "constructor", "Lcom/google/gson/internal/ObjectConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "boundFields", "Ljava/util/Map;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ObjectConstructor;Ljava/util/Map;Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "<init>", "VLcom/google/gson/internal/ObjectConstructor;Ljava/util/Map;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 7 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "constructor", "Lcom/google/gson/internal/ObjectConstructor;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/internal/ObjectConstructor;", "construct", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/IllegalStateException;");
		Label l5 = new Label();
		mv.visitTryCatchBlock(l2, l3, l5, "Ljava/lang/IllegalAccessException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginObject", "V", new int[] { 7 });
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextName", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "boundFields", "Ljava/util/Map;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 4, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;");
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 1, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "deserialized", "Z", 4, 1);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l9, 4, 0);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "skipValue", "V", new int[] { 7 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l9);
		Label l10 = new Label();
		mv.visitTryCatchBlock(l9, l10, l4, "Ljava/lang/IllegalStateException;");
		mv.visitTryCatchBlock(l9, l10, l5, "Ljava/lang/IllegalAccessException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "read", "VLcom/google/gson/stream/JsonReader;Ljava/lang/Object;", new int[] { 1, 7, 2 });
		mv.visitLabel(l10);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endObject", "V", new int[] { 7 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/IllegalAccessException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "boundFields", "Ljava/util/Map;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "values", "Ljava/util/Collection;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Collection;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;");
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "serialized", "Z", 3, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "name", "Ljava/lang/String;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 5, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 5, 6 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 3 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpReflectiveTypeAdapterFactory(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("ReflectiveTypeAdapterFactory.java", null);
	cv.visitMemberClass("Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "Adapter");
	cv.visitMemberClass("Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "BoundField");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "excluder", "Lcom/google/gson/internal/Excluder;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/FieldNamingStrategy;Lcom/google/gson/internal/Excluder;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "excluder", "Lcom/google/gson/internal/Excluder;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "createBoundField", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;Lcom/google/gson/Gson;Ljava/lang/reflect/Field;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;ZZ", new String[] { "(", "Lcom/google/gson/Gson;", "Ljava/lang/reflect/Field;", "Ljava/lang/String;", "Lcom/google/gson/reflect/TypeToken", "<*>;ZZ)", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;" }, null);
		mv.visitCode();
		mv.visitMaxs(16, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 13 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/Primitives;", "isPrimitive", "ZLjava/lang/reflect/Type;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 9);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 12);
		mv.visitVarInsn(INSN_MOVE, 3, 14);
		mv.visitVarInsn(INSN_MOVE, 4, 15);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 10);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 13);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 11);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", "<init>", "VLcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;Ljava/lang/String;ZZLcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Field;Z", new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getBoundFields", "Ljava/util/Map;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new String[] { "(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<*>;", "Ljava/lang/Class", "<*>;)", "Ljava/util/Map", "<", "Ljava/lang/String;", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(21, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 16, 0, 0, "Ljava/util/LinkedHashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Ljava/util/LinkedHashMap;", "<init>", "V", new int[] { 16 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Ljava/lang/Class;", "isInterface", "Z", new int[] { 20 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 16);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 19 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Object;");
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 20);
		mv.visitJumpInsn(INSN_IF_EQ, l1, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Ljava/lang/Class;", "getDeclaredFields", "[Ljava/lang/reflect/Field;", new int[] { 20 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 12);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 8, 12);
		mv.visitArrayLengthInsn(14, 8);
		mv.visitVarInsn(INSN_CONST_4, 13, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l4, 13, 14);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 8, 13);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "excludeField", "ZLjava/lang/reflect/Field;Z", new int[] { 0, 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "excludeField", "ZLjava/lang/reflect/Field;Z", new int[] { 0, 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 6, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 7, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 13, 13, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "setAccessible", "VZ", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 19 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getGenericType", "Ljava/lang/reflect/Type;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 20);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 1, 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 11);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 17);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "getFieldName", "Ljava/lang/String;Ljava/lang/reflect/Field;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 1, 17);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 2, 18);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "createBoundField", "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;Lcom/google/gson/Gson;Ljava/lang/reflect/Field;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;ZZ", new int[] { 1, 2, 3, 4, 5, 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "name", "Ljava/lang/String;", 1, 9);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 16);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 15);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 15, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;");
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 15, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 4, " declares multiple JSON fields named ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "name", "Ljava/lang/String;", 4, 15);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Lcom/google/gson/reflect/TypeToken;", "getType", "Ljava/lang/reflect/Type;", new int[] { 19 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Ljava/lang/Class;", "getGenericSuperclass", "Ljava/lang/reflect/Type;", new int[] { 20 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_MOVE_OBJECT_FROM16, 0, 20);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/internal/$Gson$Types;", "resolve", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;", new int[] { 1, 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 19);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL_RANGE, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 19 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 20);
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getFieldName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lcom/google/gson/annotations/SerializedName;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/annotations/SerializedName;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "fieldNamingPolicy", "Lcom/google/gson/FieldNamingStrategy;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/FieldNamingStrategy;", "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/annotations/SerializedName;", "value", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "constructorConstructor", "Lcom/google/gson/internal/ConstructorConstructor;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/ConstructorConstructor;", "get", "Lcom/google/gson/internal/ObjectConstructor;Lcom/google/gson/reflect/TypeToken;", new int[] { 3, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "getBoundFields", "Ljava/util/Map;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Ljava/lang/Class;", new int[] { 5, 6, 7, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;", "<init>", "VLcom/google/gson/internal/ObjectConstructor;Ljava/util/Map;Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$1;", new int[] { 3, 0, 4, 2 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 2, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "excludeField", "ZLjava/lang/reflect/Field;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "excludeClass", "ZLjava/lang/Class;Z", new int[] { 0, 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory;", "excluder", "Lcom/google/gson/internal/Excluder;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/Excluder;", "excludeField", "ZLjava/lang/reflect/Field;Z", new int[] { 0, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSqlDateTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("SqlDateTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/SqlDateTypeAdapter$1;", "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/sql/Date;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "<init>", "V", new int[] { 0 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSqlDateTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/sql/Date;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/sql/Date;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("SqlDateTypeAdapter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "format", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/text/SimpleDateFormat;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "MMM d, yyyy");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/text/SimpleDateFormat;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "format", "Ljava/text/DateFormat;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "read", "Ljava/sql/Date;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "read", "Ljava/sql/Date;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 5);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 6 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l3);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l3, l5, l6, "Ljava/text/ParseException;");
		mv.visitTryCatchBlock(l3, l5, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "format", "Ljava/text/DateFormat;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Date;", "getTime", "J", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/sql/Date;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/sql/Date;", "<init>", "VJ", new int[] { 3, 1, 2 });
		mv.visitLabel(l5);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTryCatchBlock(l7, l2, l2, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 5);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/sql/Date;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/sql/Date;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/sql/Date;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l4, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/SqlDateTypeAdapter;", "format", "Ljava/text/DateFormat;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "format", "Ljava/lang/String;Ljava/util/Date;", new int[] { 0, 3 });
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTimeTypeAdapter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TimeTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TimeTypeAdapter$1;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TimeTypeAdapter.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TimeTypeAdapter$1;", "Lcom/google/gson/internal/bind/TimeTypeAdapter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/sql/Time;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TimeTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "<init>", "V", new int[] { 0 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTimeTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/sql/Time;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/sql/Time;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TimeTypeAdapter.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "format", "Ljava/text/DateFormat;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/internal/bind/TimeTypeAdapter$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter$1;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "FACTORY", "Lcom/google/gson/TypeAdapterFactory;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/text/SimpleDateFormat;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "hh:mm:ss a");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/text/SimpleDateFormat;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "format", "Ljava/text/DateFormat;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "read", "Ljava/sql/Time;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "read", "Ljava/sql/Time;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 5);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 6 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 5);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l3);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l3, l5, l6, "Ljava/text/ParseException;");
		mv.visitTryCatchBlock(l3, l5, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "format", "Ljava/text/DateFormat;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "parse", "Ljava/util/Date;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/sql/Time;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Date;", "getTime", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/sql/Time;", "<init>", "VJ", new int[] { 2, 3, 4 });
		mv.visitLabel(l5);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitTryCatchBlock(l7, l2, l2, null);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 5);
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/sql/Time;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/sql/Time;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/sql/Time;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l1, l2, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l4, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TimeTypeAdapter;", "format", "Ljava/text/DateFormat;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/DateFormat;", "format", "Ljava/lang/String;Ljava/util/Date;", new int[] { 0, 3 });
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapterRuntimeTypeWrapper(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapterRuntimeTypeWrapper.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "context", "Lcom/google/gson/Gson;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "delegate", "Lcom/google/gson/TypeAdapter;", new String[] { "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "type", "Ljava/lang/reflect/Type;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/Gson;Lcom/google/gson/TypeAdapter;Ljava/lang/reflect/Type;", new String[] { "(", "Lcom/google/gson/Gson;", "Lcom/google/gson/TypeAdapter", "<TT;>;", "Ljava/lang/reflect/Type;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "context", "Lcom/google/gson/Gson;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "delegate", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "type", "Ljava/lang/reflect/Type;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getRuntimeTypeIfMoreSpecific", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljava/lang/Object;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l1, 2, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/lang/reflect/TypeVariable;");
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/lang/Class;");
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "type", "Ljava/lang/reflect/Type;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "getRuntimeTypeIfMoreSpecific", "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Object;", new int[] { 5, 3, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "type", "Ljava/lang/reflect/Type;", 3, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "context", "Lcom/google/gson/Gson;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/reflect/TypeToken;", "get", "Lcom/google/gson/reflect/TypeToken;Ljava/lang/reflect/Type;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/reflect/TypeToken;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 2, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 3, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 6, 7 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "delegate", "Lcom/google/gson/TypeAdapter;", 3, 5);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 3, 3, 0, "Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$Adapter;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper;", "delegate", "Lcom/google/gson/TypeAdapter;", 0, 5);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$10(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$10;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$10;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$10;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextDouble", "D", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "valueOf", "Ljava/lang/Double;D", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$10;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$10;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$11(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$11;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$11;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$11;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitArrayOperationInsn(INSN_AGET, 1, 1, 2);
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTableSwitchInsn(1, 1, 4, l0, new Label[] { l1, l0, l0, l2 });
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expecting number, got: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 5 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/LazilyParsedNumber;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$11;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$11;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$12(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$12;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Character;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$12;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Character;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$12;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Character;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 5 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l2, 1, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expecting character, got: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "charAt", "CI", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Character;", "valueOf", "Ljava/lang/Character;C", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$12;", "read", "Ljava/lang/Character;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Character;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "valueOf", "Ljava/lang/String;Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Character;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$12;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Character;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$13(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$13;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/String;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$13;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/String;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$13;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$13;", "read", "Ljava/lang/String;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/String;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "BOOLEAN", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextBoolean", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "toString", "Ljava/lang/String;Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/String;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$13;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$14(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$14;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/math/BigDecimal;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$14;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/math/BigDecimal;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$14;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$14;", "read", "Ljava/math/BigDecimal;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/math/BigDecimal;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 4 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/math/BigDecimal;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigDecimal;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitLabel(l2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/math/BigDecimal;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$14;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/math/BigDecimal;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/math/BigDecimal;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$15(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$15;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/math/BigInteger;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$15;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/math/BigInteger;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$15;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$15;", "read", "Ljava/math/BigInteger;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/math/BigInteger;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 4 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/math/BigInteger;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/math/BigInteger;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitLabel(l2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/math/BigInteger;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$15;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/math/BigInteger;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/math/BigInteger;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$16(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$16;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/StringBuilder;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$16;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/StringBuilder;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$16;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$16;", "read", "Ljava/lang/StringBuilder;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/StringBuilder;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$16;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/StringBuilder;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/StringBuilder;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$17(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$17;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/StringBuffer;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$17;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/StringBuffer;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$17;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$17;", "read", "Ljava/lang/StringBuffer;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/StringBuffer;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuffer;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuffer;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/StringBuffer;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$17;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/StringBuffer;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/StringBuffer;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$18(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$18;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/URL;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$18;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/URL;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$18;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$18;", "read", "Ljava/net/URL;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/net/URL;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "null");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/net/URL;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/net/URL;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/net/URL;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$18;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/net/URL;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/net/URL;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/net/URL;", "toExternalForm", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$19(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$19;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/URI;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$19;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/URI;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$19;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$19;", "read", "Ljava/net/URI;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/net/URI;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 6 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/net/URISyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "null");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/net/URI;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/net/URI;", "<init>", "VLjava/lang/String;", new int[] { 2, 1 });
		mv.visitLabel(l2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonIOException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonIOException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/net/URI;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$19;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/net/URI;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/net/URI;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/net/URI;", "toASCIIString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Class;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Class;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$1;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Class;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$1;", "read", "Ljava/lang/Class;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Class;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/UnsupportedOperationException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Attempted to serialize java.lang.Class: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ". Forgot to register a type adapter?");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/UnsupportedOperationException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$1;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Class;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$20(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$20;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/InetAddress;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$20;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/net/InetAddress;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$20;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$20;", "read", "Ljava/net/InetAddress;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/net/InetAddress;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/net/InetAddress;", "getByName", "Ljava/net/InetAddress;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/net/InetAddress;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$20;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/net/InetAddress;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/net/InetAddress;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/net/InetAddress;", "getHostAddress", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$21(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$21;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/UUID;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$21;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/UUID;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$21;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$21;", "read", "Ljava/util/UUID;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/UUID;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/UUID;", "fromString", "Ljava/util/UUID;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/UUID;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$21;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/UUID;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/UUID;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/UUID;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$22$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/sql/Timestamp;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/sql/Timestamp;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters$22;", "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters$22;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lcom/google/gson/internal/bind/TypeAdapters$22;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$dateTypeAdapter", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/internal/bind/TypeAdapters$22;Lcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "this$0", "Lcom/google/gson/internal/bind/TypeAdapters$22;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "val$dateTypeAdapter", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "read", "Ljava/sql/Timestamp;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/sql/Timestamp;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "val$dateTypeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/util/Date;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/sql/Timestamp;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Date;", "getTime", "J", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/sql/Timestamp;", "<init>", "VJ", new int[] { 1, 2, 3 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/sql/Timestamp;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/sql/Timestamp;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/sql/Timestamp;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "val$dateTypeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/TypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$22(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$22;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$22;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$22;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/sql/Timestamp;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/util/Date;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/Gson;", "getAdapter", "Lcom/google/gson/TypeAdapter;Ljava/lang/Class;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$22$1;", "<init>", "VLcom/google/gson/internal/bind/TypeAdapters$22;Lcom/google/gson/TypeAdapter;", new int[] { 1, 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$23(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$23;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Calendar;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$23;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Calendar;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$23;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "DAY_OF_MONTH", "Ljava/lang/String;", null, "dayOfMonth");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "HOUR_OF_DAY", "Ljava/lang/String;", null, "hourOfDay");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "MINUTE", "Ljava/lang/String;", null, "minute");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "MONTH", "Ljava/lang/String;", null, "month");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "SECOND", "Ljava/lang/String;", null, "second");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "YEAR", "Ljava/lang/String;", null, "year");
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$23;", "read", "Ljava/util/Calendar;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/Calendar;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 9, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 11 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginObject", "V", new int[] { 11 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_OBJECT", "Lcom/google/gson/stream/JsonToken;", 9, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l3, 0, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextName", "Ljava/lang/String;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextInt", "I", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "year");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 1, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "month");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 2, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l5);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "dayOfMonth");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l6);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "hourOfDay");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 4, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l7);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "minute");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 5, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l8);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "second");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitVarInsn(INSN_MOVE, 6, 8);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endObject", "V", new int[] { 11 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/GregorianCalendar;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT_RANGE, "Ljava/util/GregorianCalendar;", "<init>", "VIIIIII", new int[] { 0, 1, 2, 3, 4, 5, 6 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Calendar;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$23;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Calendar;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Calendar;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 3 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "year");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Calendar;", "get", "II", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 3, 0, 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "month");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Calendar;", "get", "II", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 3, 0, 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "dayOfMonth");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Calendar;", "get", "II", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 3, 0, 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "hourOfDay");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitVarInsn(INSN_CONST_16, 0, 11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Calendar;", "get", "II", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 3, 0, 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "minute");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitVarInsn(INSN_CONST_16, 0, 12);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Calendar;", "get", "II", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 3, 0, 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 0, "second");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 3, 0 });
		mv.visitVarInsn(INSN_CONST_16, 0, 13);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Calendar;", "get", "II", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 3, 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$24(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$24;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Locale;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$24;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/Locale;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$24;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$24;", "read", "Ljava/util/Locale;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/Locale;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 6, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 8 });
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/util/StringTokenizer;");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "_");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/StringTokenizer;", "<init>", "VLjava/lang/String;Ljava/lang/String;", new int[] { 3, 2, 5 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/StringTokenizer;", "hasMoreElements", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/StringTokenizer;", "nextToken", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/StringTokenizer;", "hasMoreElements", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/StringTokenizer;", "nextToken", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/StringTokenizer;", "hasMoreElements", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/StringTokenizer;", "nextToken", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitLabel(l4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 0, 0);
		mv.visitJumpInsn(INSN_IF_NEZ, l5, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/Locale;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Locale;", "<init>", "VLjava/lang/String;", new int[] { 5, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/Locale;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Locale;", "<init>", "VLjava/lang/String;Ljava/lang/String;", new int[] { 5, 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/Locale;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Locale;", "<init>", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 5, 1, 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/Locale;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$24;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Locale;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/Locale;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Locale;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$25(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Lcom/google/gson/JsonElement;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Lcom/google/gson/JsonElement;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$25;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitArrayOperationInsn(INSN_AGET, 3, 3, 4);
		Label l0 = new Label();
		Label l1 = new Label();
		Label l2 = new Label();
		Label l3 = new Label();
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTableSwitchInsn(3, 1, 6, l0, new Label[] { l1, l2, l3, l4, l5, l6 });
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "V", new int[] { 3 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/String;", new int[] { 0, 3 });
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lcom/google/gson/internal/LazilyParsedNumber;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/LazilyParsedNumber;", "<init>", "VLjava/lang/String;", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Number;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonPrimitive;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextBoolean", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonPrimitive;", "<init>", "VLjava/lang/Boolean;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 6 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/JsonNull;", "INSTANCE", "Lcom/google/gson/JsonNull;", 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lcom/google/gson/JsonArray;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonArray;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 6 });
		Label l8 = new Label();
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "read", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonArray;", "add", "VLcom/google/gson/JsonElement;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l8, 0, 0);
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 6 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonObject;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonObject;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginObject", "V", new int[] { 6 });
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "hasNext", "Z", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l11, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "read", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "add", "VLjava/lang/String;Lcom/google/gson/JsonElement;", new int[] { 2, 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endObject", "V", new int[] { 6 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitInsn(INSN_NOP);
		Label l12 = new Label();
		mv.visitLabel(l12);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "read", "Lcom/google/gson/JsonElement;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Lcom/google/gson/JsonElement;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonNull", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonPrimitive", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsJsonPrimitive", "Lcom/google/gson/JsonPrimitive;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isNumber", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsNumber", "Ljava/lang/Number;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 8, 4 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "isBoolean", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsBoolean", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Z", new int[] { 8, 4 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonPrimitive;", "getAsString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 8, 4 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonArray", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsJsonArray", "Lcom/google/gson/JsonArray;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonArray;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "write", "VLcom/google/gson/stream/JsonWriter;Lcom/google/gson/JsonElement;", new int[] { 7, 8, 0 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "isJsonObject", "Z", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l9, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonElement;", "getAsJsonObject", "Lcom/google/gson/JsonObject;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/JsonObject;", "entrySet", "Ljava/util/Set;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Set;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l10 = new Label();
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l11 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l11, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/util/Map$Entry;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getKey", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/String;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "name", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 8, 4 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map$Entry;", "getValue", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "write", "VLcom/google/gson/stream/JsonWriter;Lcom/google/gson/JsonElement;", new int[] { 7, 8, 4 });
		mv.visitJumpInsn(INSN_GOTO, l10, 0, 0);
		mv.visitLabel(l11);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endObject", "Lcom/google/gson/stream/JsonWriter;", new int[] { 8 });
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitLabel(l9);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 6, "Couldn't write ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lcom/google/gson/JsonElement;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$25;", "write", "VLcom/google/gson/stream/JsonWriter;Lcom/google/gson/JsonElement;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$26(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$26;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$26;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters;", "newEnumTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Enum;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljava/lang/Enum;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isEnum", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSuperclass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "<init>", "VLjava/lang/Class;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$27(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$27;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$27;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapter;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Lcom/google/gson/reflect/TypeToken;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLcom/google/gson/reflect/TypeToken;Lcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$27;", "val$type", "Lcom/google/gson/reflect/TypeToken;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$27;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$27;", "val$type", "Lcom/google/gson/reflect/TypeToken;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "equals", "ZLjava/lang/Object;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$27;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$28(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$28;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$28;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$type", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Lcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "val$type", "Ljava/lang/Class;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "val$type", "Ljava/lang/Class;", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Factory[type=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "val$type", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ",adapter=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$28;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$29(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$29;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$29;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters;", "newFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$boxed", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$unboxed", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$unboxed", "Ljava/lang/Class;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$boxed", "Ljava/lang/Class;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$unboxed", "Ljava/lang/Class;", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$boxed", "Ljava/lang/Class;", 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Factory[type=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$boxed", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "+");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$unboxed", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ",adapter=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$29;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$2;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/BitSet;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$2;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/util/BitSet;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$2;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$2;", "read", "Ljava/util/BitSet;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/util/BitSet;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 9, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 8, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 11 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/BitSet;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/BitSet;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "beginArray", "V", new int[] { 11 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "END_ARRAY", "Lcom/google/gson/stream/JsonToken;", 8, 0);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l3, 5, 8);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$32;", "$SwitchMap$com$google$gson$stream$JsonToken", "[I", 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonToken;", "ordinal", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 9);
		mv.visitArrayOperationInsn(INSN_AGET, 8, 8, 9);
		Label l4 = new Label();
		Label l5 = new Label();
		Label l6 = new Label();
		Label l7 = new Label();
		mv.visitTableSwitchInsn(8, 1, 3, l4, new Label[] { l5, l6, l7 });
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "Invalid bitset value type: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 7, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextInt", "I", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l8, 8, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 6);
		Label l9 = new Label();
		mv.visitLabel(l9);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l10, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/BitSet;", "set", "VI", new int[] { 0, 2 });
		mv.visitLabel(l10);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_MOVE, 3, 7);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextBoolean", "Z", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l11 = new Label();
		mv.visitLabel(l11);
		Label l12 = new Label();
		Label l13 = new Label();
		mv.visitTryCatchBlock(l11, l12, l13, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "parseInt", "ILjava/lang/String;", new int[] { 4 });
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l14 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l14, 8, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 6);
		Label l15 = new Label();
		mv.visitLabel(l15);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l14);
		mv.visitVarInsn(INSN_MOVE, 3, 7);
		mv.visitJumpInsn(INSN_GOTO, l15, 0, 0);
		mv.visitLabel(l13);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "Error: Expecting: bitset number value (1, 0), Found: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "endArray", "V", new int[] { 11 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		Label l16 = new Label();
		mv.visitLabel(l16);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/util/BitSet;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$2;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/BitSet;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/util/BitSet;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "beginArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/BitSet;", "length", "I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/BitSet;", "get", "ZI", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 2, 1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;J", new int[] { 5, 2, 3 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "endArray", "Lcom/google/gson/stream/JsonWriter;", new int[] { 5 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$30(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$30;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$30;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters;", "newFactoryForMultipleTypes", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$base", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$sub", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$base", "Ljava/lang/Class;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$sub", "Ljava/lang/Class;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$base", "Ljava/lang/Class;", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$sub", "Ljava/lang/Class;", 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Factory[type=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$base", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "+");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$sub", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ",adapter=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$30;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$31(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$31;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$31;", null, "Ljava/lang/Object;", new String[] { "Lcom/google/gson/TypeAdapterFactory;" });
	cv.visitSource("TypeAdapters.java", null);
	cv.visitOuterClass("Lcom/google/gson/internal/bind/TypeAdapters;", "newTypeHierarchyFactory", "Lcom/google/gson/TypeAdapterFactory;Ljava/lang/Class;Lcom/google/gson/TypeAdapter;");
	cv.visitInnerClass(null, "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$clazz", "Ljava/lang/Class;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Lcom/google/gson/TypeAdapter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "val$clazz", "Ljava/lang/Class;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "Lcom/google/gson/TypeAdapter;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Lcom/google/gson/Gson;", "Lcom/google/gson/reflect/TypeToken", "<TT;>;)", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "val$clazz", "Ljava/lang/Class;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/reflect/TypeToken;", "getRawType", "Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 0, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Factory[typeHierarchy=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "val$clazz", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ",adapter=");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$31;", "val$typeAdapter", "Lcom/google/gson/TypeAdapter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$3;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Boolean;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$3;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Boolean;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$3;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Boolean;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "STRING", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "parseBoolean", "ZLjava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextBoolean", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$3;", "read", "Ljava/lang/Boolean;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Boolean;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "nullValue", "Lcom/google/gson/stream/JsonWriter;", new int[] { 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Boolean;", "booleanValue", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Z", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Boolean;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$3;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Boolean;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$4;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Boolean;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$4;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Boolean;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$4;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Boolean;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Boolean;", "valueOf", "Ljava/lang/Boolean;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$4;", "read", "Ljava/lang/Boolean;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Boolean;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "null");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Boolean;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Boolean;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$4;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Boolean;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$5(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$5;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$5;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$5;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 5 });
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextInt", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_INT_TO_BYTE, 2, 1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Byte;", "valueOf", "Ljava/lang/Byte;B", new int[] { 2 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$5;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$5;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$6(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$6;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$6;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$6;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 4 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextInt", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitOperationInsn(INSN_INT_TO_SHORT, 1, 1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Short;", "valueOf", "Ljava/lang/Short;S", new int[] { 1 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$6;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$6;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$7(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$7;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$7;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$7;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 4 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextInt", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 1 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$7;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$7;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$8(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$8;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$8;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$8;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 4 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextLong", "J", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 1, 2 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lcom/google/gson/JsonSyntaxException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/JsonSyntaxException;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$8;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$8;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$9(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$9;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$9;", new String[] { "Lcom/google/gson/TypeAdapter", "<", "Ljava/lang/Number;", ">;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$9;", "Lcom/google/gson/internal/bind/TypeAdapters;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextDouble", "D", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_DOUBLE_TO_FLOAT, 0, 0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "valueOf", "Ljava/lang/Float;F", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$9;", "read", "Ljava/lang/Number;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Number;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$9;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Number;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTypeAdapters$EnumTypeAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", new String[] { "<T:", "Ljava/lang/Enum", "<TT;>;>", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", new String[] { "<T:", "Ljava/lang/Enum", "<TT;>;>", "Lcom/google/gson/TypeAdapter", "<TT;>;" }, "Lcom/google/gson/TypeAdapter;", null);
	cv.visitSource("TypeAdapters.java", null);
	cv.visitInnerClass("Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "Lcom/google/gson/internal/bind/TypeAdapters;", "EnumTypeAdapter", ACC_PRIVATE + ACC_STATIC + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "constantToName", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<TT;", "Ljava/lang/String;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "nameToConstant", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Ljava/lang/String;", "TT;>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/TypeAdapter;", "<init>", "V", new int[] { 9 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 7 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "nameToConstant", "Ljava/util/Map;", 7, 9);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 7 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "constantToName", "Ljava/util/Map;", 7, 9);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchFieldException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getEnumConstants", "[Ljava/lang/Object;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "[Ljava/lang/Enum;");
		mv.visitArrayLengthInsn(5, 1);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l4, 4, 5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Enum;", "name", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getField", "Ljava/lang/reflect/Field;Ljava/lang/String;", new int[] { 10, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitTypeInsn(INSN_CONST_CLASS, 8, 0, 0, "Lcom/google/gson/annotations/SerializedName;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lcom/google/gson/annotations/SerializedName;");
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lcom/google/gson/annotations/SerializedName;", "value", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitLabel(l5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "nameToConstant", "Ljava/util/Map;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 7, 6, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "constantToName", "Ljava/util/Map;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 7, 2, 6 });
		mv.visitLabel(l1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 4, 4, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "V", new int[] { 7 });
		mv.visitIntInsn(INSN_THROW, 7);
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "read", "Ljava/lang/Enum;Lcom/google/gson/stream/JsonReader;", new String[] { "(", "Lcom/google/gson/stream/JsonReader;", ")TT;" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lcom/google/gson/stream/JsonToken;", "NULL", "Lcom/google/gson/stream/JsonToken;", 1, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextNull", "V", new int[] { 3 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "nameToConstant", "Ljava/util/Map;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "nextString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Enum;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "read", "Ljava/lang/Object;Lcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "read", "Ljava/lang/Enum;Lcom/google/gson/stream/JsonReader;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Enum;", new String[] { "(", "Lcom/google/gson/stream/JsonWriter;", "TT;)V" }, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonWriter;", "value", "Lcom/google/gson/stream/JsonWriter;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "constantToName", "Ljava/util/Map;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/String;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Object;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Enum;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/TypeAdapters$EnumTypeAdapter;", "write", "VLcom/google/gson/stream/JsonWriter;Ljava/lang/Enum;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJsonReader$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lcom/google/gson/stream/JsonReader$1;", null, "Lcom/google/gson/internal/JsonReaderInternalAccess;", null);
	cv.visit(0, ACC_FINAL, "Lcom/google/gson/stream/JsonReader$1;", null, "Lcom/google/gson/internal/JsonReaderInternalAccess;", null);
	cv.visitSource("JsonReader.java", null);
	cv.visitInnerClass("Lcom/google/gson/stream/JsonReader$1;", "Lcom/google/gson/stream/JsonReader;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/internal/JsonReaderInternalAccess;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "promoteNameToValue", "VLcom/google/gson/stream/JsonReader;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 5, 0, "Lcom/google/gson/internal/bind/JsonTreeReader;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "Lcom/google/gson/internal/bind/JsonTreeReader;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/internal/bind/JsonTreeReader;", "promoteNameToValue", "V", new int[] { 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$000", "ILcom/google/gson/stream/JsonReader;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$100", "ILcom/google/gson/stream/JsonReader;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_16, 1, 13);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l3, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$002", "ILcom/google/gson/stream/JsonReader;I", new int[] { 5, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_16, 1, 12);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l4, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$002", "ILcom/google/gson/stream/JsonReader;I", new int[] { 5, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_16, 1, 14);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l5, 0, 1);
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$002", "ILcom/google/gson/stream/JsonReader;I", new int[] { 5, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Expected a name but was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lcom/google/gson/stream/JsonReader;", "peek", "Lcom/google/gson/stream/JsonToken;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " at line ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$200", "ILcom/google/gson/stream/JsonReader;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " column ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/stream/JsonReader;", "access$300", "ILcom/google/gson/stream/JsonReader;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestDecorator(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/extensions/TestDecorator;", null, "Ljunit/framework/Assert;", new String[] { "Ljunit/framework/Test;" });
	cv.visit(0, ACC_PUBLIC, "Ljunit/extensions/TestDecorator;", null, "Ljunit/framework/Assert;", new String[] { "Ljunit/framework/Test;" });
	cv.visitSource("TestDecorator.java", null);
	{
		fv = cv.visitField(ACC_PROTECTED, "fTest", "Ljunit/framework/Test;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/Assert;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/extensions/TestDecorator;", "fTest", "Ljunit/framework/Test;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "basicRun", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestDecorator;", "fTest", "Ljunit/framework/Test;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "run", "VLjunit/framework/TestResult;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "countTestCases", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestDecorator;", "fTest", "Ljunit/framework/Test;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "countTestCases", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTest", "Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestDecorator;", "fTest", "Ljunit/framework/Test;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/TestDecorator;", "basicRun", "VLjunit/framework/TestResult;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestDecorator;", "fTest", "Ljunit/framework/Test;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestSetup$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Ljunit/extensions/TestSetup$1;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Protectable;" });
	cv.visit(0, 0, "Ljunit/extensions/TestSetup$1;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Protectable;" });
	cv.visitSource("TestSetup.java", null);
	cv.visitOuterClass("Ljunit/extensions/TestSetup;", "run", "VLjunit/framework/TestResult;");
	cv.visitInnerClass(null, "Ljunit/extensions/TestSetup;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Ljunit/extensions/TestSetup;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$result", "Ljunit/framework/TestResult;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjunit/extensions/TestSetup;Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/extensions/TestSetup$1;", "this$0", "Ljunit/extensions/TestSetup;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/extensions/TestSetup$1;", "val$result", "Ljunit/framework/TestResult;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "protect", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestSetup$1;", "this$0", "Ljunit/extensions/TestSetup;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/TestSetup;", "setUp", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestSetup$1;", "this$0", "Ljunit/extensions/TestSetup;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestSetup$1;", "val$result", "Ljunit/framework/TestResult;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/TestSetup;", "basicRun", "VLjunit/framework/TestResult;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/extensions/TestSetup$1;", "this$0", "Ljunit/extensions/TestSetup;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/TestSetup;", "tearDown", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComparisonFailure2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/ComparisonFailure;", null, "Ljunit/framework/AssertionFailedError;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/ComparisonFailure;", null, "Ljunit/framework/AssertionFailedError;", null);
	cv.visitSource("ComparisonFailure.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "MAX_CONTEXT_LENGTH", "I", null, 20);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fActual", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fExpected", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/AssertionFailedError;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/ComparisonFailure;", "fExpected", "Ljava/lang/String;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/ComparisonFailure;", "fActual", "Ljava/lang/String;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getActual", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonFailure;", "fActual", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getExpected", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonFailure;", "fExpected", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMessage", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/ComparisonCompactor;");
		mv.visitVarInsn(INSN_CONST_16, 1, 20);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonFailure;", "fExpected", "Ljava/lang/String;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/ComparisonFailure;", "fActual", "Ljava/lang/String;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/ComparisonCompactor;", "<init>", "VILjava/lang/String;Ljava/lang/String;", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljunit/framework/AssertionFailedError;", "getMessage", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/ComparisonCompactor;", "compact", "Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4TestAdapter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/JUnit4TestAdapter;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Test;", "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;", "Lorg/junit/runner/Describable;" });
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/JUnit4TestAdapter;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Test;", "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;", "Lorg/junit/runner/Describable;" });
	cv.visitSource("JUnit4TestAdapter.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fCache", "Ljunit/framework/JUnit4TestAdapterCache;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNewTestClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fRunner", "Lorg/junit/runner/Runner;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/JUnit4TestAdapterCache;", "getDefault", "Ljunit/framework/JUnit4TestAdapterCache;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestAdapter;", "<init>", "VLjava/lang/Class;Ljunit/framework/JUnit4TestAdapterCache;", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljunit/framework/JUnit4TestAdapterCache;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljunit/framework/JUnit4TestAdapterCache;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fCache", "Ljunit/framework/JUnit4TestAdapterCache;", 3, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fNewTestClass", "Ljava/lang/Class;", 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Request;", "classWithoutSuiteMethod", "Lorg/junit/runner/Request;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fRunner", "Lorg/junit/runner/Runner;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isIgnored", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Ignore;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "removeIgnored", "Lorg/junit/runner/Description;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestAdapter;", "isIgnored", "ZLorg/junit/runner/Description;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runner/Description;", "EMPTY", "Lorg/junit/runner/Description;", 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "childlessCopy", "Lorg/junit/runner/Description;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestAdapter;", "removeIgnored", "Lorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 5, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "addChild", "VLorg/junit/runner/Description;", new int[] { 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "countTestCases", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fRunner", "Lorg/junit/runner/Runner;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "testCount", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "filter", "VLorg/junit/runner/manipulation/Filter;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fRunner", "Lorg/junit/runner/Runner;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "apply", "VLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fRunner", "Lorg/junit/runner/Runner;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/JUnit4TestAdapter;", "removeIgnored", "Lorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTestClass", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fNewTestClass", "Ljava/lang/Class;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTests", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljunit/framework/Test;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fCache", "Ljunit/framework/JUnit4TestAdapterCache;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapter;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTestList", "Ljava/util/List;Lorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fRunner", "Lorg/junit/runner/Runner;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fCache", "Ljunit/framework/JUnit4TestAdapterCache;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "getNotifier", "Lorg/junit/runner/notification/RunNotifier;Ljunit/framework/TestResult;Ljunit/framework/JUnit4TestAdapter;", new int[] { 1, 3, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "run", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sort", "VLorg/junit/runner/manipulation/Sorter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fRunner", "Lorg/junit/runner/Runner;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter;", "apply", "VLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapter;", "fNewTestClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4TestAdapterCache$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Ljunit/framework/JUnit4TestAdapterCache$1;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visit(0, 0, "Ljunit/framework/JUnit4TestAdapterCache$1;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visitSource("JUnit4TestAdapterCache.java", null);
	cv.visitOuterClass("Ljunit/framework/JUnit4TestAdapterCache;", "getNotifier", "Lorg/junit/runner/notification/RunNotifier;Ljunit/framework/TestResult;Ljunit/framework/JUnit4TestAdapter;");
	cv.visitInnerClass(null, "Ljunit/framework/JUnit4TestAdapterCache;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Ljunit/framework/JUnit4TestAdapterCache;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$result", "Ljunit/framework/TestResult;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/JUnit4TestAdapterCache;Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "this$0", "Ljunit/framework/JUnit4TestAdapterCache;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "val$result", "Ljunit/framework/TestResult;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunListener;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFailure", "VLorg/junit/runner/notification/Failure;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "val$result", "Ljunit/framework/TestResult;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "this$0", "Ljunit/framework/JUnit4TestAdapterCache;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getException", "Ljava/lang/Throwable;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFinished", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "val$result", "Ljunit/framework/TestResult;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "this$0", "Ljunit/framework/JUnit4TestAdapterCache;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "endTest", "VLjunit/framework/Test;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testStarted", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "val$result", "Ljunit/framework/TestResult;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestAdapterCache$1;", "this$0", "Ljunit/framework/JUnit4TestAdapterCache;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestAdapterCache;", "asTest", "Ljunit/framework/Test;Lorg/junit/runner/Description;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "startTest", "VLjunit/framework/Test;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4TestCaseFacade(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/JUnit4TestCaseFacade;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Test;", "Lorg/junit/runner/Describable;" });
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/JUnit4TestCaseFacade;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Test;", "Lorg/junit/runner/Describable;" });
	cv.visitSource("JUnit4TestCaseFacade.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fDescription", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/JUnit4TestCaseFacade;", "fDescription", "Lorg/junit/runner/Description;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "countTestCases", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/JUnit4TestCaseFacade;", "fDescription", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "This test stub created only for informational purposes.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/JUnit4TestCaseFacade;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestCase(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Ljunit/framework/TestCase;", null, "Ljunit/framework/Assert;", new String[] { "Ljunit/framework/Test;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Ljunit/framework/TestCase;", null, "Ljunit/framework/Assert;", new String[] { "Ljunit/framework/Test;" });
	cv.visitSource("TestCase.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/Assert;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/Assert;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VBB", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VBB", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VCC", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VCC", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VDDD", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Ljunit/framework/Assert;", "assertEquals", "VDDD", new int[] { 0, 1, 2, 3, 4, 5 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VFFF", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VFFF", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VII", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VII", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VJJ", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VJJ", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;BB", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;BB", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;CC", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;CC", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;DDD", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;DDD", new int[] { 0, 1, 2, 3, 4, 5, 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;FFF", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;FFF", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;II", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;II", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;JJ", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;JJ", new int[] { 0, 1, 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;SS", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;SS", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VLjava/lang/String;ZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VLjava/lang/String;ZZ", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VSS", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VSS", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertEquals", "VZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertEquals", "VZZ", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertFalse", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertFalse", "VLjava/lang/String;Z", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertFalse", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertFalse", "VZ", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotNull", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNotNull", "VLjava/lang/Object;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotSame", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNotSame", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNull", "VLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNull", "VLjava/lang/Object;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertNull", "VLjava/lang/String;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertSame", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertSame", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertTrue", "VLjava/lang/String;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertTrue", "VLjava/lang/String;Z", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "assertTrue", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "assertTrue", "VZ", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "fail", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "V", new int[] {  });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "fail", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failNotEquals", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failNotSame", "VLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "failSame", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "failSame", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/Assert;", "format", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "countTestCases", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "createResult", "Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestResult;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "createResult", "Ljunit/framework/TestResult;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "run", "VLjunit/framework/TestResult;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "run", "VLjunit/framework/TestCase;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runBare", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "setUp", "V", new int[] { 4 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "runTest", "V", new int[] { 4 });
		mv.visitLabel(l1);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l1, l4, l5, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "tearDown", "V", new int[] { 4 });
		mv.visitLabel(l4);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 0, 0);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		Label l7 = new Label();
		mv.visitLabel(l7);
		Label l8 = new Label();
		Label l9 = new Label();
		mv.visitTryCatchBlock(l7, l8, l9, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "tearDown", "V", new int[] { 4 });
		mv.visitLabel(l8);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		Label l10 = new Label();
		mv.visitLabel(l10);
		Label l11 = new Label();
		Label l12 = new Label();
		mv.visitTryCatchBlock(l10, l11, l12, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "tearDown", "V", new int[] { 4 });
		mv.visitLabel(l11);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l12);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l11, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runTest", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "TestCase.fName cannot be null");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestCase;", "assertNotNull", "VLjava/lang/String;Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 3, 4, 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Method \"");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\" should be public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestCase;", "fail", "VLjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		Label l6 = new Label();
		Label l7 = new Label();
		mv.visitTryCatchBlock(l5, l6, l7, "Ljava/lang/reflect/InvocationTargetException;");
		Label l8 = new Label();
		mv.visitTryCatchBlock(l5, l6, l8, "Ljava/lang/IllegalAccessException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 5, 2 });
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Method \"");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "\" not found");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestCase;", "fail", "VLjava/lang/String;", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "fillInStackTrace", "Ljava/lang/Throwable;", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/IllegalAccessException;", "fillInStackTrace", "Ljava/lang/Throwable;", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setName", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestCase;", "fName", "Ljava/lang/String;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "setUp", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "tearDown", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "(");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestResult$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Ljunit/framework/TestResult$1;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Protectable;" });
	cv.visit(0, 0, "Ljunit/framework/TestResult$1;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Protectable;" });
	cv.visitSource("TestResult.java", null);
	cv.visitOuterClass("Ljunit/framework/TestResult;", "run", "VLjunit/framework/TestCase;");
	cv.visitInnerClass(null, "Ljunit/framework/TestResult;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Ljunit/framework/TestResult;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$test", "Ljunit/framework/TestCase;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/TestResult;Ljunit/framework/TestCase;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestResult$1;", "this$0", "Ljunit/framework/TestResult;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestResult$1;", "val$test", "Ljunit/framework/TestCase;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "protect", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestResult$1;", "val$test", "Ljunit/framework/TestCase;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "runBare", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestSuite(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/framework/TestSuite;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Test;" });
	cv.visit(0, ACC_PUBLIC, "Ljunit/framework/TestSuite;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/Test;" });
	cv.visitSource("TestSuite.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTests", "Ljava/util/Vector;", new String[] { "Ljava/util/Vector", "<", "Ljunit/framework/Test;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/Vector;");
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Vector;", "<init>", "VI", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/Vector;");
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Vector;", "<init>", "VI", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "addTestsFromTestCase", "VLjava/lang/Class;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljunit/framework/TestCase;", ">;", "Ljava/lang/String;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "setName", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/Vector;");
		mv.visitVarInsn(INSN_CONST_16, 1, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Vector;", "<init>", "VI", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "setName", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT + ACC_CONSTRUCTOR, "<init>", "V[Ljava/lang/Class;", new String[] { "([", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 6 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/util/Vector;");
		mv.visitVarInsn(INSN_CONST_16, 5, 10);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Vector;", "<init>", "VI", new int[] { 4, 5 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 4, 6);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 7);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "testCaseForClass", "Ljunit/framework/Test;Ljava/lang/Class;", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 6, 4 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V[Ljava/lang/Class;Ljava/lang/String;", new String[] { "([", "Ljava/lang/Class", "<+", "Ljunit/framework/TestCase;", ">;", "Ljava/lang/String;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "V[Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "setName", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addTestMethod", "VLjava/lang/reflect/Method;Ljava/util/List;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/reflect/Method;", "Ljava/util/List", "<", "Ljava/lang/String;", ">;", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "contains", "ZLjava/lang/Object;", new int[] { 5, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "isPublicTestMethod", "ZLjava/lang/reflect/Method;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "isTestMethod", "ZLjava/lang/reflect/Method;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Test method isn't public: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "(");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getCanonicalName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 3, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 5, 0 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "createTest", "Ljunit/framework/Test;Ljava/lang/Class;Ljava/lang/String;", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 3, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addTestsFromTestCase", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite;", "fName", "Ljava/lang/String;", 7, 9);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "getTestConstructor", "Ljava/lang/reflect/Constructor;Ljava/lang/Class;", new int[] { 10 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getModifiers", "I", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "Class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, " is not public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 9, 7 });
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "Class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, " has no public constructor TestCase(String name) or TestCase()");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 9, 7 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 10);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 5 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Ljunit/framework/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 7, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/MethodSorter;", "getDeclaredMethods", "[Ljava/lang/reflect/Method;Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l7 = new Label();
		mv.visitLabel(l7);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l8, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "addTestMethod", "VLjava/lang/reflect/Method;Ljava/util/List;Ljava/lang/Class;", new int[] { 9, 2, 5, 10 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSuperclass", "Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 7, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "size", "I", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "No tests found in ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 9, 7 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "createTest", "Ljunit/framework/Test;Ljava/lang/Class;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/String;", ")", "Ljunit/framework/Test;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "getTestConstructor", "Ljava/lang/reflect/Constructor;Ljava/lang/Class;", new int[] { 6 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l3, l4, l5, "Ljava/lang/InstantiationException;");
		Label l6 = new Label();
		mv.visitTryCatchBlock(l3, l4, l6, "Ljava/lang/reflect/InvocationTargetException;");
		Label l7 = new Label();
		mv.visitTryCatchBlock(l3, l4, l7, "Ljava/lang/IllegalAccessException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayLengthInsn(4, 4);
		Label l8 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l8, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 4, 3, 0, "Ljunit/framework/TestCase;");
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 4, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/TestCase;");
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "setName", "VLjava/lang/String;", new int[] { 4, 7 });
		mv.visitLabel(l4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljunit/framework/Test;");
		Label l9 = new Label();
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " has no public constructor TestCase(String name) or TestCase()");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l8);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		Label l10 = new Label();
		mv.visitLabel(l10);
		Label l11 = new Label();
		mv.visitTryCatchBlock(l10, l11, l5, "Ljava/lang/InstantiationException;");
		mv.visitTryCatchBlock(l10, l11, l6, "Ljava/lang/reflect/InvocationTargetException;");
		mv.visitTryCatchBlock(l10, l11, l7, "Ljava/lang/IllegalAccessException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 7, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 4 });
		mv.visitLabel(l11);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Cannot instantiate test case: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "exceptionToString", "Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO, l9, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Exception in constructor: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "exceptionToString", "Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO_16, l9, 0, 0);
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Cannot access test case: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, " (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "exceptionToString", "Ljava/lang/String;Ljava/lang/Throwable;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO_16, l9, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "exceptionToString", "Ljava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/PrintWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintWriter;", "<init>", "VLjava/io/Writer;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "printStackTrace", "VLjava/io/PrintWriter;", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getTestConstructor", "Ljava/lang/reflect/Constructor;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/lang/reflect/Constructor", "<*>;" }, new String[] { "Ljava/lang/NoSuchMethodException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Ljava/lang/String;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructor", "Ljava/lang/reflect/Constructor;[Ljava/lang/Class;", new int[] { 4, 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 3, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructor", "Ljava/lang/reflect/Constructor;[Ljava/lang/Class;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isPublicTestMethod", "ZLjava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "isTestMethod", "ZLjava/lang/reflect/Method;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isTestMethod", "ZLjava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "test");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "startsWith", "ZLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getReturnType", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Void;", "TYPE", "Ljava/lang/Class;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "testCaseForClass", "Ljunit/framework/Test;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljunit/framework/Test;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "asSubclass", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getCanonicalName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, " does not extend TestCase");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "warning", "Ljunit/framework/Test;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestSuite$1;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "warning");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite$1;", "<init>", "VLjava/lang/String;Ljava/lang/String;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addTestSuite", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljunit/framework/TestCase;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "countTestCases", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljunit/framework/Test;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "countTestCases", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitOperationInsn(INSN_ADD_INT_2ADDR, 0, 0, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fName", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "shouldStop", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "runTest", "VLjunit/framework/Test;Ljunit/framework/TestResult;", new int[] { 3, 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runTest", "VLjunit/framework/Test;Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "run", "VLjunit/framework/TestResult;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setName", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite;", "fName", "Ljava/lang/String;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testAt", "Ljunit/framework/Test;I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "get", "Ljava/lang/Object;I", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljunit/framework/Test;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "tests", "Ljava/util/Enumeration;", new String[] { "()", "Ljava/util/Enumeration", "<", "Ljunit/framework/Test;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite;", "fTests", "Ljava/util/Vector;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Vector;", "elements", "Ljava/util/Enumeration;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpBaseTestRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Ljunit/runner/BaseTestRunner;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/TestListener;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Ljunit/runner/BaseTestRunner;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/TestListener;" });
	cv.visitSource("BaseTestRunner.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "SUITE_METHODNAME", "Ljava/lang/String;", null, "suite");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC, "fPreferences", "Ljava/util/Properties;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC, "fgFilterStack", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_STATIC, "fgMaxMessageLength", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "fLoading", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_16, 0, 500);
		mv.visitFieldInsn(INSN_SPUT, "Ljunit/runner/BaseTestRunner;", "fgMaxMessageLength", "I", 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Ljunit/runner/BaseTestRunner;", "fgFilterStack", "Z", 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "maxmessage");
		mv.visitFieldInsn(INSN_SGET, "Ljunit/runner/BaseTestRunner;", "fgMaxMessageLength", "I", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreference", "ILjava/lang/String;I", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_SPUT, "Ljunit/runner/BaseTestRunner;", "fgMaxMessageLength", "I", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Ljunit/runner/BaseTestRunner;", "fLoading", "Z", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC, "filterLine", "ZLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_CONST_16, 4, 8);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 4, "[Ljava/lang/String;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "junit.framework.TestCase");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 1, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "junit.framework.TestResult");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 1, 2);
		mv.visitVarInsn(INSN_CONST_4, 4, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "junit.framework.TestSuite");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 4, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "junit.framework.Assert.");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 4, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "junit.swingui.TestRunner");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 4, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "junit.awtui.TestRunner");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 4, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "junit.textui.TestRunner");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 4, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "java.lang.reflect.Method.invoke(");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(4, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "indexOf", "ILjava/lang/String;", new int[] { 6, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l2, 4, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 2, 3);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getFilteredTrace", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "showStackRaw", "Z", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 6, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 5 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/io/PrintWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintWriter;", "<init>", "VLjava/io/Writer;", new int[] { 3, 5 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/io/StringReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringReader;", "<init>", "VLjava/lang/String;", new int[] { 4, 7 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/BufferedReader;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/BufferedReader;", "<init>", "VLjava/io/Reader;", new int[] { 1, 4 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/BufferedReader;", "readLine", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "filterLine", "ZLjava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintWriter;", "println", "VLjava/lang/String;", new int[] { 3, 2 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getFilteredTrace", "Ljava/lang/String;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/StringWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/StringWriter;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/io/PrintWriter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/PrintWriter;", "<init>", "VLjava/io/Writer;", new int[] { 3, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "printStackTrace", "VLjava/io/PrintWriter;", new int[] { 5, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/StringWriter;", "getBuffer", "Ljava/lang/StringBuffer;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuffer;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getFilteredTrace", "Ljava/lang/String;Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getPreference", "ILjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreference", "Ljava/lang/String;Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_MOVE, 0, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_MOVE, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		Label l2 = new Label();
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l2, l3, "Ljava/lang/NumberFormatException;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "parseInt", "ILjava/lang/String;", new int[] { 2 });
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_MOVE, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "getPreference", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferences", "Ljava/util/Properties;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Properties;", "getProperty", "Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_STATIC, "getPreferences", "Ljava/util/Properties;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljunit/runner/BaseTestRunner;", "fPreferences", "Ljava/util/Properties;", 0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/Properties;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Properties;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Ljunit/runner/BaseTestRunner;", "fPreferences", "Ljava/util/Properties;", 0, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljunit/runner/BaseTestRunner;", "fPreferences", "Ljava/util/Properties;", 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "loading");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "true");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Properties;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljunit/runner/BaseTestRunner;", "fPreferences", "Ljava/util/Properties;", 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "filterstack");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "true");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Properties;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "readPreferences", "V", new int[] {  });
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljunit/runner/BaseTestRunner;", "fPreferences", "Ljava/util/Properties;", 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "getPreferencesFile", "Ljava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "user.home");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "getProperty", "Ljava/lang/String;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/File;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "junit.properties");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/lang/String;Ljava/lang/String;", new int[] { 1, 0, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "readPreferences", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/io/FileInputStream;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferencesFile", "Ljava/io/File;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileInputStream;", "<init>", "VLjava/io/File;", new int[] { 2, 3 });
		mv.visitLabel(l1);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l1, l3, l4, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/util/Properties;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferences", "Ljava/util/Properties;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/Properties;", "<init>", "VLjava/util/Properties;", new int[] { 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "setPreferences", "VLjava/util/Properties;", new int[] { 3 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferences", "Ljava/util/Properties;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Properties;", "load", "VLjava/io/InputStream;", new int[] { 3, 2 });
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 2);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 1, 0);
		Label l7 = new Label();
		mv.visitLabel(l7);
		Label l8 = new Label();
		Label l9 = new Label();
		mv.visitTryCatchBlock(l7, l8, l9, "Ljava/io/IOException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/InputStream;", "close", "V", new int[] { 1 });
		mv.visitLabel(l8);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 2);
		mv.visitJumpInsn(INSN_GOTO, l6, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "savePreferences", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/FileOutputStream;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferencesFile", "Ljava/io/File;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/FileOutputStream;", "<init>", "VLjava/io/File;", new int[] { 0, 1 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferences", "Ljava/util/Properties;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Properties;", "store", "VLjava/io/OutputStream;Ljava/lang/String;", new int[] { 1, 0, 2 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileOutputStream;", "close", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/FileOutputStream;", "close", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "setPreference", "VLjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreferences", "Ljava/util/Properties;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/Properties;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_STATIC, "setPreferences", "VLjava/util/Properties;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Ljunit/runner/BaseTestRunner;", "fPreferences", "Ljava/util/Properties;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_STATIC, "showStackRaw", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "filterstack");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreference", "Ljava/lang/String;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "true");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_SGET_BOOLEAN, "Ljunit/runner/BaseTestRunner;", "fgFilterStack", "Z", 0, 0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "truncate", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET, "Ljunit/runner/BaseTestRunner;", "fgMaxMessageLength", "I", 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, -1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_SGET, "Ljunit/runner/BaseTestRunner;", "fgMaxMessageLength", "I", 1, 0);
		mv.visitJumpInsn(INSN_IF_LE, l0, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitFieldInsn(INSN_SGET, "Ljunit/runner/BaseTestRunner;", "fgMaxMessageLength", "I", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 3, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "...");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "testFailed", "VILjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 1, 0, 2, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "testFailed", "VILjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 1, 0, 2, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "clearStatus", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "elapsedTimeAsString", "Ljava/lang/String;J", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/NumberFormat;", "getInstance", "Ljava/text/NumberFormat;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitOperationInsn(INSN_LONG_TO_DOUBLE, 1, 6, 0, 0);
		mv.visitVarInsn(INSN_CONST_WIDE, 3, 4652007308841189376L);
		mv.visitOperationInsn(INSN_DIV_DOUBLE_2ADDR, 1, 1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/NumberFormat;", "format", "Ljava/lang/String;D", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "endTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "testEnded", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "extractClassName", "Ljava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Default package for");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "startsWith", "ZLjava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, ".");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "lastIndexOf", "ILjava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;I", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getTest", "Ljunit/framework/Test;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "length", "I", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GTZ, l0, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "clearStatus", "V", new int[] { 8 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 6);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/ClassNotFoundException;");
		Label l5 = new Label();
		mv.visitTryCatchBlock(l2, l3, l5, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "loadSuiteClass", "Ljava/lang/Class;Ljava/lang/String;", new int[] { 8, 9 });
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l6, l7, l8, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 5, "suite");
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 7, 0, 7, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 4, 5, 7 });
		mv.visitLabel(l7);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l9 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l9, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Suite() method must be static");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "runFailed", "VLjava/lang/String;", new int[] { 8, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/ClassNotFoundException;", "getMessage", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l10, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 9);
		mv.visitLabel(l10);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Class not found \"");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "\"");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "runFailed", "VLjava/lang/String;", new int[] { 8, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Error: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Exception;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "runFailed", "VLjava/lang/String;", new int[] { 8, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 6);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "clearStatus", "V", new int[] { 8 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 3, 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l9);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		Label l11 = new Label();
		mv.visitLabel(l11);
		Label l12 = new Label();
		Label l13 = new Label();
		mv.visitTryCatchBlock(l11, l12, l13, "Ljava/lang/reflect/InvocationTargetException;");
		Label l14 = new Label();
		mv.visitTryCatchBlock(l11, l12, l14, "Ljava/lang/IllegalAccessException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Class;");
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 5, 0, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 2, 7, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Ljunit/framework/Test;");
		mv.visitLabel(l12);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "clearStatus", "V", new int[] { 8 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l13);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Failed to invoke suite():");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getTargetException", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "runFailed", "VLjava/lang/String;", new int[] { 8, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 6);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitLabel(l14);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "Failed to invoke suite():");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/IllegalAccessException;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "runFailed", "VLjava/lang/String;", new int[] { 8, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 3, 6);
		mv.visitJumpInsn(INSN_GOTO_16, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "loadSuiteClass", "Ljava/lang/Class;Ljava/lang/String;", new String[] { "(", "Ljava/lang/String;", ")", "Ljava/lang/Class", "<*>;" }, new String[] { "Ljava/lang/ClassNotFoundException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Class;", "forName", "Ljava/lang/Class;Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "processArguments", "Ljava/lang/String;[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(2, 6);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "-noloading");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "setLoading", "VZ", new int[] { 5, 4 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "-nofilterstack");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 2, 0);
		mv.visitFieldInsn(INSN_SPUT_BOOLEAN, "Ljunit/runner/BaseTestRunner;", "fgFilterStack", "Z", 4, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 6, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "-c");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 2, 0);
		mv.visitArrayLengthInsn(2, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 0, 0, 1);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l6, 2, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 0, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 6, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "extractClassName", "Ljava/lang/String;Ljava/lang/String;", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l6);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "out", "Ljava/io/PrintStream;", 2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Missing Test class name");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 6, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "runFailed", "VLjava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setLoading", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Ljunit/runner/BaseTestRunner;", "fLoading", "Z", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "startTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/runner/BaseTestRunner;", "testStarted", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testEnded", "VLjava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testFailed", "VILjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "testStarted", "VLjava/lang/String;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "useReloadingTestSuiteLoader", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "loading");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getPreference", "Ljava/lang/String;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "true");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Ljunit/runner/BaseTestRunner;", "fLoading", "Z", 0, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResultPrinter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/textui/ResultPrinter;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/TestListener;" });
	cv.visit(0, ACC_PUBLIC, "Ljunit/textui/ResultPrinter;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/TestListener;" });
	cv.visitSource("ResultPrinter.java", null);
	{
		fv = cv.visitField(0, "fColumn", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(0, "fWriter", "Ljava/io/PrintStream;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/PrintStream;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/textui/ResultPrinter;", "fColumn", "I", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/textui/ResultPrinter;", "fWriter", "Ljava/io/PrintStream;", 2, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "E");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "F");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "elapsedTimeAsString", "Ljava/lang/String;J", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/NumberFormat;", "getInstance", "Ljava/text/NumberFormat;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitOperationInsn(INSN_LONG_TO_DOUBLE, 1, 6, 0, 0);
		mv.visitVarInsn(INSN_CONST_WIDE, 3, 4652007308841189376L);
		mv.visitOperationInsn(INSN_DIV_DOUBLE_2ADDR, 1, 1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/NumberFormat;", "format", "Ljava/lang/String;D", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getWriter", "Ljava/io/PrintStream;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/textui/ResultPrinter;", "fWriter", "Ljava/io/PrintStream;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_DECLARED_SYNCHRONIZED, "print", "VLjunit/framework/TestResult;J", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printHeader", "VJ", new int[] { 1, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printErrors", "VLjunit/framework/TestResult;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printFailures", "VLjunit/framework/TestResult;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printFooter", "VLjunit/framework/TestResult;", new int[] { 1, 2 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "printDefect", "VLjunit/framework/TestFailure;I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printDefectHeader", "VLjunit/framework/TestFailure;I", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printDefectTrace", "VLjunit/framework/TestFailure;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printDefectHeader", "VLjunit/framework/TestFailure;I", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ") ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestFailure;", "failedTest", "Ljunit/framework/Test;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printDefectTrace", "VLjunit/framework/TestFailure;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestFailure;", "trace", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/BaseTestRunner;", "getFilteredTrace", "Ljava/lang/String;Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printDefects", "VLjava/util/Enumeration;ILjava/lang/String;", new String[] { "(", "Ljava/util/Enumeration", "<", "Ljunit/framework/TestFailure;", ">;I", "Ljava/lang/String;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 6, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 6, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "There was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, ":");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 1, 2 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Enumeration;", "hasMoreElements", "Z", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Enumeration;", "nextElement", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljunit/framework/TestFailure;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printDefect", "VLjunit/framework/TestFailure;I", new int[] { 4, 1, 0 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "There were ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 2, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "s:");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printErrors", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "errors", "Ljava/util/Enumeration;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "errorCount", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "error");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printDefects", "VLjava/util/Enumeration;ILjava/lang/String;", new int[] { 3, 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printFailures", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "failures", "Ljava/util/Enumeration;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "failureCount", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "failure");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printDefects", "VLjava/util/Enumeration;ILjava/lang/String;", new int[] { 3, 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printFooter", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "wasSuccessful", "Z", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "OK");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, " (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "runCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " test");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "runCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 1, 0 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "s");
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "FAILURES!!!");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Tests run: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "runCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ",  Failures: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "failureCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ",  Errors: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "errorCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printHeader", "VJ", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Time: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "elapsedTimeAsString", "Ljava/lang/String;J", new int[] { 3, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "printWaitPrompt", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "<RETURN> to continue");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "startTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, ".");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IGET, "Ljunit/textui/ResultPrinter;", "fColumn", "I", 0, 2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 0, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/textui/ResultPrinter;", "fColumn", "I", 1, 2);
		mv.visitVarInsn(INSN_CONST_16, 1, 40);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LT, l0, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "getWriter", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/textui/ResultPrinter;", "fColumn", "I", 0, 2);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParallelComputer$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/experimental/ParallelComputer$1;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/runners/model/RunnerScheduler;" });
	cv.visit(0, ACC_FINAL, "Lorg/junit/experimental/ParallelComputer$1;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/runners/model/RunnerScheduler;" });
	cv.visitSource("ParallelComputer.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/ParallelComputer;", "parallelize", "Lorg/junit/runner/Runner;Lorg/junit/runner/Runner;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/ParallelComputer;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fService", "Ljava/util/concurrent/ExecutorService;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/concurrent/Executors;", "newCachedThreadPool", "Ljava/util/concurrent/ExecutorService;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/ParallelComputer$1;", "fService", "Ljava/util/concurrent/ExecutorService;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "finished", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/InterruptedException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/ParallelComputer$1;", "fService", "Ljava/util/concurrent/ExecutorService;", 1, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "shutdown", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/ParallelComputer$1;", "fService", "Ljava/util/concurrent/ExecutorService;", 1, 5);
		mv.visitVarInsn(INSN_CONST_WIDE, 2, 9223372036854775807L);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/util/concurrent/TimeUnit;", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "awaitTermination", "ZJLjava/util/concurrent/TimeUnit;", new int[] { 1, 2, 3, 4 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "err", "Ljava/io/PrintStream;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/InterruptedException;", "printStackTrace", "VLjava/io/PrintStream;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "schedule", "VLjava/lang/Runnable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/ParallelComputer$1;", "fService", "Ljava/util/concurrent/ExecutorService;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/ExecutorService;", "submit", "Ljava/util/concurrent/Future;Ljava/lang/Runnable;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParallelComputer(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/ParallelComputer;", null, "Lorg/junit/runner/Computer;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/ParallelComputer;", null, "Lorg/junit/runner/Computer;", null);
	cv.visitSource("ParallelComputer.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fClasses", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMethods", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VZZ", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Computer;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/experimental/ParallelComputer;", "fClasses", "Z", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/experimental/ParallelComputer;", "fMethods", "Z", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "classes", "Lorg/junit/runner/Computer;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/ParallelComputer;");
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/ParallelComputer;", "<init>", "VZZ", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "methods", "Lorg/junit/runner/Computer;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/ParallelComputer;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/ParallelComputer;", "<init>", "VZZ", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "parallelize", "Lorg/junit/runner/Runner;Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Lorg/junit/runners/ParentRunner;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/ParentRunner;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/ParallelComputer$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/ParallelComputer$1;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "setScheduler", "VLorg/junit/runners/model/RunnerScheduler;", new int[] { 0, 1 });
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getRunner", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/RunnerBuilder;", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runner/Computer;", "getRunner", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/experimental/ParallelComputer;", "fMethods", "Z", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/ParallelComputer;", "parallelize", "Lorg/junit/runner/Runner;Lorg/junit/runner/Runner;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getSuite", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/RunnerBuilder;", "[", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runner/Computer;", "getSuite", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/experimental/ParallelComputer;", "fClasses", "Z", 1, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/ParallelComputer;", "parallelize", "Lorg/junit/runner/Runner;Lorg/junit/runner/Runner;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCategories$CategoryFilter(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visitSource("Categories.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/categories/Categories$CategoryFilter;", "Lorg/junit/experimental/categories/Categories;", "CategoryFilter", ACC_PUBLIC + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fExcluded", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fIncluded", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fIncluded", "Ljava/lang/Class;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fExcluded", "Ljava/lang/Class;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "categories", "Ljava/util/List;Lorg/junit/runner/Description;", new String[] { "(", "Lorg/junit/runner/Description;", ")", "Ljava/util/List", "<", "Ljava/lang/Class", "<*>;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "directCategories", "[Ljava/lang/Class;Lorg/junit/runner/Description;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "parentDescription", "Lorg/junit/runner/Description;Lorg/junit/runner/Description;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "directCategories", "[Ljava/lang/Class;Lorg/junit/runner/Description;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "directCategories", "[Ljava/lang/Class;Lorg/junit/runner/Description;", new String[] { "(", "Lorg/junit/runner/Description;", ")[", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 4, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 2, "[Ljava/lang/Class;");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/experimental/categories/Category;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/experimental/categories/Category;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 2, "[Ljava/lang/Class;");
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/experimental/categories/Category;", "value", "[Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "hasCorrectCategoryAnnotation", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "categories", "Ljava/util/List;Lorg/junit/runner/Description;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fIncluded", "Ljava/lang/Class;", 5, 6);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l1, 5, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 3);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE, 3, 4);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fExcluded", "Ljava/lang/Class;", 5, 6);
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fExcluded", "Ljava/lang/Class;", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 5, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		mv.visitVarInsn(INSN_MOVE, 3, 4);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fIncluded", "Ljava/lang/Class;", 5, 6);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fIncluded", "Ljava/lang/Class;", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 5, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 5, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_MOVE, 3, 4);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "include", "Lorg/junit/experimental/categories/Categories$CategoryFilter;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/experimental/categories/Categories$CategoryFilter;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/categories/Categories$CategoryFilter;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "<init>", "VLjava/lang/Class;Ljava/lang/Class;", new int[] { 0, 2, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "parentDescription", "Lorg/junit/runner/Description;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getTestClass", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describe", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "category ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "fIncluded", "Ljava/lang/Class;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "shouldRun", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "hasCorrectCategoryAnnotation", "ZLorg/junit/runner/Description;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMaxCore$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/max/MaxCore$1;", null, "Lorg/junit/runner/Request;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/max/MaxCore$1;", null, "Lorg/junit/runner/Request;", null);
	cv.visitSource("MaxCore.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/max/MaxCore;", "constructLeafRequest", "Lorg/junit/runner/Request;Ljava/util/List;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/max/MaxCore;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/experimental/max/MaxCore;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$runners", "Ljava/util/List;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/max/MaxCore;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxCore$1;", "this$0", "Lorg/junit/experimental/max/MaxCore;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxCore$1;", "val$runners", "Ljava/util/List;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Request;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunner", "Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/runners/model/InitializationError;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/experimental/max/MaxCore$1$1;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxCore$1;", "val$runners", "Ljava/util/List;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxCore$1$1;", "<init>", "VLorg/junit/experimental/max/MaxCore$1;Ljava/lang/Class;Ljava/util/List;", new int[] { 2, 5, 1, 3 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/ErrorReportingRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "<init>", "VLjava/lang/Class;Ljava/lang/Throwable;", new int[] { 1, 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMaxHistory$RememberingListener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visitSource("MaxHistory.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "Lorg/junit/experimental/max/MaxHistory;", "RememberingListener", ACC_PRIVATE + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE, "overallStart", "J", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "starts", "Ljava/util/Map;", new String[] { "Ljava/util/Map", "<", "Lorg/junit/runner/Description;", "Ljava/lang/Long;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/experimental/max/MaxHistory;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/max/MaxHistory;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 3, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunListener;", "<init>", "V", new int[] { 2 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "currentTimeMillis", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "overallStart", "J", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/HashMap;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/HashMap;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "starts", "Ljava/util/Map;", 0, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/max/MaxHistory;Lorg/junit/experimental/max/MaxHistory$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "<init>", "VLorg/junit/experimental/max/MaxHistory;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFailure", "VLorg/junit/runner/notification/Failure;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 0, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "overallStart", "J", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "putTestFailureTimestamp", "VLorg/junit/runner/Description;J", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFinished", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "nanoTime", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "starts", "Ljava/util/Map;", 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 4, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/Long;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Long;", "longValue", "J", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 4, 7);
		mv.visitOperationInsn(INSN_SUB_LONG, 5, 0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/max/MaxHistory;", "putTestDuration", "VLorg/junit/runner/Description;J", new int[] { 4, 8, 5, 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testRunFinished", "VLorg/junit/runner/Result;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "this$0", "Lorg/junit/experimental/max/MaxHistory;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/max/MaxHistory;", "access$000", "VLorg/junit/experimental/max/MaxHistory;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testStarted", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/max/MaxHistory$RememberingListener;", "starts", "Ljava/util/Map;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "nanoTime", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Map;", "put", "Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 4, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpPotentialAssignment$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/experimental/theories/PotentialAssignment$1;", null, "Lorg/junit/experimental/theories/PotentialAssignment;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/experimental/theories/PotentialAssignment$1;", null, "Lorg/junit/experimental/theories/PotentialAssignment;", null);
	cv.visitSource("PotentialAssignment.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/theories/PotentialAssignment;", "forValue", "Lorg/junit/experimental/theories/PotentialAssignment;Ljava/lang/String;Ljava/lang/Object;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/theories/PotentialAssignment;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$name", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$value", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Object;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/PotentialAssignment$1;", "val$value", "Ljava/lang/Object;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/PotentialAssignment$1;", "val$name", "Ljava/lang/String;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/PotentialAssignment;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Ljava/lang/String;", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/PotentialAssignment$1;", "val$name", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getValue", "Ljava/lang/Object;", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/PotentialAssignment$1;", "val$value", "Ljava/lang/Object;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "[%s]");
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/PotentialAssignment$1;", "val$value", "Ljava/lang/Object;", 3, 4);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTheories$TheoryAnchor$1$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("Theories.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$statement", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/theories/Theories$TheoryAnchor$1;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "val$statement", "Lorg/junit/runners/model/Statement;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "val$statement", "Lorg/junit/runners/model/Statement;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "handleDataPointSuccess", "V", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "handleAssumptionViolation", "VLorg/junit/internal/AssumptionViolatedException;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", 1, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 1, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", 2, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", 2, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "this$1", "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", 3, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 3, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "access$000", "ZLorg/junit/experimental/theories/Theories$TheoryAnchor;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getArgumentStrings", "[Ljava/lang/Object;Z", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "reportParameterizedError", "VLjava/lang/Throwable;[Ljava/lang/Object;", new int[] { 1, 0, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTheories$TheoryAnchor$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("Theories.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "methodCompletesWithParameters", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/Object;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$freshInstance", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$method", "Lorg/junit/runners/model/FrameworkMethod;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/theories/Theories$TheoryAnchor;Lorg/junit/experimental/theories/internal/Assignments;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "val$freshInstance", "Ljava/lang/Object;", 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "access$000", "ZLorg/junit/experimental/theories/Theories$TheoryAnchor;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getMethodArguments", "[Ljava/lang/Object;Z", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "val$freshInstance", "Ljava/lang/Object;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 2, 0 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTheories$TheoryAnchor(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("Theories.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "Lorg/junit/experimental/theories/Theories;", "TheoryAnchor", ACC_PUBLIC + ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE, "fInvalidParameters", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/internal/AssumptionViolatedException;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestClass", "Lorg/junit/runners/model/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "successes", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/FrameworkMethod;Lorg/junit/runners/model/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 1 });
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "successes", "I", 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fInvalidParameters", "Ljava/util/List;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 3, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "ZLorg/junit/experimental/theories/Theories$TheoryAnchor;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "nullsOk", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "Lorg/junit/runners/model/Statement;Lorg/junit/experimental/theories/Theories$TheoryAnchor;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "methodCompletesWithParameters", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/Object;", new int[] { 1, 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getTestClass", "Lorg/junit/runners/model/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "methodCompletesWithParameters", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$2;", "<init>", "VLorg/junit/experimental/theories/Theories$TheoryAnchor;Lorg/junit/experimental/theories/internal/Assignments;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", new int[] { 0, 1, 3, 2, 4 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "nullsOk", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getMethod", "Ljava/lang/reflect/Method;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/experimental/theories/Theory;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/experimental/theories/Theory;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/experimental/theories/Theory;", "nullsAccepted", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getMethod", "Ljava/lang/reflect/Method;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/internal/Assignments;", "allUnassigned", "Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/reflect/Method;Lorg/junit/runners/model/TestClass;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "runWithAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", new int[] { 2, 0 });
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "successes", "I", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Never found parameters that satisfied method assumptions.  Violated assumptions: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fInvalidParameters", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "handleAssumptionViolation", "VLorg/junit/internal/AssumptionViolatedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fInvalidParameters", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "handleDataPointSuccess", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "successes", "I", 0, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "successes", "I", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_TRANSIENT, "reportParameterizedError", "VLjava/lang/Throwable;[Ljava/lang/Object;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitArrayLengthInsn(0, 4);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/ParameterizedAssertionError;", "<init>", "VLjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 3, 1, 4 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runWithAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "isComplete", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "runWithIncompleteAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", new int[] { 1, 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "runWithCompleteAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", new int[] { 1, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runWithCompleteAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", null, new String[] { "Ljava/lang/InstantiationException;", "Ljava/lang/IllegalAccessException;", "Ljava/lang/reflect/InvocationTargetException;", "Ljava/lang/NoSuchMethodException;", "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "<init>", "VLorg/junit/experimental/theories/Theories$TheoryAnchor;Ljava/lang/Class;Lorg/junit/experimental/theories/internal/Assignments;", new int[] { 0, 2, 1, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runWithIncompleteAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", null, new String[] { "Ljava/lang/InstantiationException;", "Ljava/lang/IllegalAccessException;", "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "potentialsForNextUnassigned", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/experimental/theories/PotentialAssignment;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "assignNext", "Lorg/junit/experimental/theories/internal/Assignments;Lorg/junit/experimental/theories/PotentialAssignment;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "runWithAssignment", "VLorg/junit/experimental/theories/internal/Assignments;", new int[] { 3, 2 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAllMembersSupplier$MethodParameterValue(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", null, "Lorg/junit/experimental/theories/PotentialAssignment;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", null, "Lorg/junit/experimental/theories/PotentialAssignment;", null);
	cv.visitSource("AllMembersSupplier.java", null);
	cv.visitInnerClass("Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "MethodParameterValue", ACC_STATIC);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMethod", "Lorg/junit/runners/model/FrameworkMethod;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/PotentialAssignment;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "fMethod", "Lorg/junit/runners/model/FrameworkMethod;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/AllMembersSupplier$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "<init>", "VLorg/junit/runners/model/FrameworkMethod;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Ljava/lang/String;", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "fMethod", "Lorg/junit/runners/model/FrameworkMethod;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getValue", "Ljava/lang/Object;", null, new String[] { "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/IllegalArgumentException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/IllegalAccessException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "fMethod", "Lorg/junit/runners/model/FrameworkMethod;", 1, 4);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 2, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "unexpected: argument length is checked");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "unexpected: getMethods returned an inaccessible method");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/PotentialAssignment$CouldNotGenerateValueException;", "<init>", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAllMembersSupplier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", null, "Lorg/junit/experimental/theories/ParameterSupplier;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", null, "Lorg/junit/experimental/theories/ParameterSupplier;", null);
	cv.visitSource("AllMembersSupplier.java", null);
	cv.visitMemberClass("Lorg/junit/experimental/theories/internal/AllMembersSupplier$1;", "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "1");
	cv.visitMemberClass("Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "MethodParameterValue");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fClass", "Lorg/junit/runners/model/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/ParameterSupplier;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "fClass", "Lorg/junit/runners/model/TestClass;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addArrayValues", "VLjava/lang/String;Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/String;", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;", "Ljava/lang/Object;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "getLength", "ILjava/lang/Object;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "[");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "get", "Ljava/lang/Object;Ljava/lang/Object;I", new int[] { 6, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/PotentialAssignment;", "forValue", "Lorg/junit/experimental/theories/PotentialAssignment;Ljava/lang/String;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 5, 1 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addFields", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/util/List;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "fClass", "Lorg/junit/runners/model/TestClass;", 5, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getFields", "[Ljava/lang/reflect/Field;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "canAcceptArrayType", "ZLjava/lang/Class;", new int[] { 8, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Lorg/junit/experimental/theories/DataPoints;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 5, 0);
		Label l4 = new Label();
		mv.visitLabel(l4);
		Label l5 = new Label();
		mv.visitTryCatchBlock(l4, l2, l5, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "getStaticFieldValue", "Ljava/lang/Object;Ljava/lang/reflect/Field;", new int[] { 7, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "addArrayValues", "VLjava/lang/String;Ljava/util/List;Ljava/lang/Object;", new int[] { 7, 5, 9, 6 });
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "canAcceptType", "ZLjava/lang/Class;", new int[] { 8, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Lorg/junit/experimental/theories/DataPoint;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "getStaticFieldValue", "Ljava/lang/Object;Ljava/lang/reflect/Field;", new int[] { 7, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/PotentialAssignment;", "forValue", "Lorg/junit/experimental/theories/PotentialAssignment;Ljava/lang/String;Ljava/lang/Object;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 9, 5 });
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 5);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addMultiPointArrayValues", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/lang/String;Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", "Ljava/lang/String;", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;", "Ljava/lang/Object;", ")V" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "getLength", "ILjava/lang/Object;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "get", "Ljava/lang/Object;Ljava/lang/Object;I", new int[] { 7, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "isCorrectlyTyped", "ZLorg/junit/experimental/theories/ParameterSignature;Ljava/lang/Class;", new int[] { 3, 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 1, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "[");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Array;", "get", "Ljava/lang/Object;Ljava/lang/Object;I", new int[] { 7, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/PotentialAssignment;", "forValue", "Lorg/junit/experimental/theories/PotentialAssignment;Ljava/lang/String;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 1 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addMultiPointMethods", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/util/List;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "fClass", "Lorg/junit/runners/model/TestClass;", 2, 5);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/experimental/theories/DataPoints;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "addMultiPointArrayValues", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/lang/String;Ljava/util/List;Ljava/lang/Object;", new int[] { 5, 6, 2, 7, 3 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "addSinglePointMethods", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/util/List;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "fClass", "Lorg/junit/runners/model/TestClass;", 2, 4);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/experimental/theories/DataPoint;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "isCorrectlyTyped", "ZLorg/junit/experimental/theories/ParameterSignature;Ljava/lang/Class;", new int[] { 4, 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier$MethodParameterValue;", "<init>", "VLorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/AllMembersSupplier$1;", new int[] { 2, 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 2 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getStaticFieldValue", "Ljava/lang/Object;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/IllegalArgumentException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/IllegalAccessException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 4, 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "unexpected: field from getClass doesn't exist on object");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "unexpected: getFields returned an inaccessible field");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isCorrectlyTyped", "ZLorg/junit/experimental/theories/ParameterSignature;Ljava/lang/Class;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "canAcceptType", "ZLjava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getValueSources", "Ljava/util/List;Lorg/junit/experimental/theories/ParameterSignature;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", ")", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "addFields", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/util/List;", new int[] { 1, 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "addSinglePointMethods", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/util/List;", new int[] { 1, 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/internal/AllMembersSupplier;", "addMultiPointMethods", "VLorg/junit/experimental/theories/ParameterSignature;Ljava/util/List;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestedOnSupplier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/suppliers/TestedOnSupplier;", null, "Lorg/junit/experimental/theories/ParameterSupplier;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/suppliers/TestedOnSupplier;", null, "Lorg/junit/experimental/theories/ParameterSupplier;", null);
	cv.visitSource("TestedOnSupplier.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/ParameterSupplier;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getValueSources", "Ljava/util/List;Lorg/junit/experimental/theories/ParameterSignature;", new String[] { "(", "Lorg/junit/experimental/theories/ParameterSignature;", ")", "Ljava/util/List", "<", "Lorg/junit/experimental/theories/PotentialAssignment;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 5 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Lorg/junit/experimental/theories/suppliers/TestedOn;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/ParameterSignature;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 10, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 6, 0, "Lorg/junit/experimental/theories/suppliers/TestedOn;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/experimental/theories/suppliers/TestedOn;", "ints", "[I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 3);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 4);
		mv.visitArrayOperationInsn(INSN_AGET, 1, 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 7, "ints");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/PotentialAssignment;", "forValue", "Lorg/junit/experimental/theories/PotentialAssignment;Ljava/lang/String;Ljava/lang/Object;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 5, 7 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExactComparisonCriteria(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/ExactComparisonCriteria;", null, "Lorg/junit/internal/ComparisonCriteria;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/ExactComparisonCriteria;", null, "Lorg/junit/internal/ComparisonCriteria;", null);
	cv.visitSource("ExactComparisonCriteria.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ComparisonCriteria;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "assertElementsEqual", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpInexactComparisonCriteria(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/InexactComparisonCriteria;", null, "Lorg/junit/internal/ComparisonCriteria;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/InexactComparisonCriteria;", null, "Lorg/junit/internal/ComparisonCriteria;", null);
	cv.visitSource("InexactComparisonCriteria.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC, "fDelta", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VD", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ComparisonCriteria;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Double;", "valueOf", "Ljava/lang/Double;D", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/InexactComparisonCriteria;", "fDelta", "Ljava/lang/Object;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VF", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/ComparisonCriteria;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Float;", "valueOf", "Ljava/lang/Float;F", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/InexactComparisonCriteria;", "fDelta", "Ljava/lang/Object;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "assertElementsEqual", "VLjava/lang/Object;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 7, 0, "Ljava/lang/Double;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Double;", "doubleValue", "D", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 8, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Double;", "doubleValue", "D", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/InexactComparisonCriteria;", "fDelta", "Ljava/lang/Object;", 4, 6);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljava/lang/Double;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Double;", "doubleValue", "D", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC_RANGE, "Lorg/junit/Assert;", "assertEquals", "VDDD", new int[] { 0, 1, 2, 3, 4, 5 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Float;", "floatValue", "F", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 8, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Float;", "floatValue", "F", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/InexactComparisonCriteria;", "fDelta", "Ljava/lang/Object;", 0, 6);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Float;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Float;", "floatValue", "F", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertEquals", "VFFF", new int[] { 1, 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRealSystem(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/RealSystem;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/internal/JUnitSystem;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/RealSystem;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/internal/JUnitSystem;" });
	cv.visitSource("RealSystem.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "out", "Ljava/io/PrintStream;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "out", "Ljava/io/PrintStream;", 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTextListener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/TextListener;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/TextListener;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visitSource("TextListener.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fWriter", "Ljava/io/PrintStream;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/PrintStream;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunListener;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/TextListener;", "fWriter", "Ljava/io/PrintStream;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/JUnitSystem;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/internal/JUnitSystem;", "out", "Ljava/io/PrintStream;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "<init>", "VLjava/io/PrintStream;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getWriter", "Ljava/io/PrintStream;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/TextListener;", "fWriter", "Ljava/io/PrintStream;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "elapsedTimeAsString", "Ljava/lang/String;J", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/NumberFormat;", "getInstance", "Ljava/text/NumberFormat;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitOperationInsn(INSN_LONG_TO_DOUBLE, 1, 6, 0, 0);
		mv.visitVarInsn(INSN_CONST_WIDE, 3, 4652007308841189376L);
		mv.visitOperationInsn(INSN_DIV_DOUBLE_2ADDR, 1, 1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/text/NumberFormat;", "format", "Ljava/lang/String;D", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printFailure", "VLorg/junit/runner/notification/Failure;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ") ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getTestHeader", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/Failure;", "getTrace", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printFailures", "VLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getFailures", "Ljava/util/List;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 5, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l2, 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "There was ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " failure:");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 5, 6 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 6, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 2, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/TextListener;", "printFailure", "VLorg/junit/runner/notification/Failure;Ljava/lang/String;", new int[] { 8, 0, 5 });
		mv.visitVarInsn(INSN_MOVE, 2, 3);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "There were ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " failures:");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printFooter", "VLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "wasSuccessful", "Z", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "OK");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "print", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, " (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getRunCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " test");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getRunCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ")");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 1, 0 });
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "s");
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "FAILURES!!!");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Tests run: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getRunCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, ",  Failures: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getFailureCount", "I", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "printHeader", "VJ", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/TextListener;", "getWriter", "Ljava/io/PrintStream;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Time: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/TextListener;", "elapsedTimeAsString", "Ljava/lang/String;J", new int[] { 3, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFailure", "VLorg/junit/runner/notification/Failure;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/TextListener;", "fWriter", "Ljava/io/PrintStream;", 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 1, 69);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "append", "Ljava/io/PrintStream;C", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testIgnored", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/TextListener;", "fWriter", "Ljava/io/PrintStream;", 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 1, 73);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "append", "Ljava/io/PrintStream;C", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testRunFinished", "VLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Result;", "getRunTime", "J", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/TextListener;", "printHeader", "VJ", new int[] { 2, 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/TextListener;", "printFailures", "VLorg/junit/runner/Result;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/TextListener;", "printFooter", "VLorg/junit/runner/Result;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testStarted", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/TextListener;", "fWriter", "Ljava/io/PrintStream;", 0, 2);
		mv.visitVarInsn(INSN_CONST_16, 1, 46);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "append", "Ljava/io/PrintStream;C", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAllDefaultPossibilitiesBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("AllDefaultPossibilitiesBuilder.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fCanUseSuiteMethod", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "fCanUseSuiteMethod", "Z", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "annotatedBuilder", "Lorg/junit/internal/builders/AnnotatedBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/AnnotatedBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/AnnotatedBuilder;", "<init>", "VLorg/junit/runners/model/RunnerBuilder;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "ignoredBuilder", "Lorg/junit/internal/builders/IgnoredBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/IgnoredBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/IgnoredBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "junit3Builder", "Lorg/junit/internal/builders/JUnit3Builder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/JUnit3Builder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/JUnit3Builder;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "junit4Builder", "Lorg/junit/internal/builders/JUnit4Builder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/JUnit4Builder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/JUnit4Builder;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 5);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Lorg/junit/runners/model/RunnerBuilder;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "ignoredBuilder", "Lorg/junit/internal/builders/IgnoredBuilder;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "annotatedBuilder", "Lorg/junit/internal/builders/AnnotatedBuilder;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 5, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "suiteMethodBuilder", "Lorg/junit/runners/model/RunnerBuilder;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 5, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "junit3Builder", "Lorg/junit/internal/builders/JUnit3Builder;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 5, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "junit4Builder", "Lorg/junit/internal/builders/JUnit4Builder;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/RunnerBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "safeRunnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new int[] { 1, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "suiteMethodBuilder", "Lorg/junit/runners/model/RunnerBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "fCanUseSuiteMethod", "Z", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/SuiteMethodBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/SuiteMethodBuilder;", "<init>", "V", new int[] { 0 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/NullBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/NullBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAnnotatedBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/AnnotatedBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/AnnotatedBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("AnnotatedBuilder.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "CONSTRUCTOR_ERROR_FORMAT", "Ljava/lang/String;", null, "Custom runner class %s should have a public constructor with signature %s(Class testClass)");
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fSuiteBuilder", "Lorg/junit/runners/model/RunnerBuilder;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/RunnerBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/builders/AnnotatedBuilder;", "fSuiteBuilder", "Lorg/junit/runners/model/RunnerBuilder;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "buildRunner", "Lorg/junit/runner/Runner;Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Lorg/junit/runner/Runner;", ">;", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitVarInsn(INSN_CONST_4, 9, 2);
		mv.visitVarInsn(INSN_CONST_4, 8, 1);
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructor", "Ljava/lang/reflect/Constructor;[Ljava/lang/Class;", new int[] { 11, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 12, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runner/Runner;");
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l3, l4, l5, "Ljava/lang/NoSuchMethodException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Ljava/lang/Class;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 3, 4);
		mv.visitVarInsn(INSN_CONST_4, 4, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Lorg/junit/runners/model/RunnerBuilder;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructor", "Ljava/lang/reflect/Constructor;[Ljava/lang/Class;", new int[] { 11, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitVarInsn(INSN_CONST_4, 4, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 12, 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/builders/AnnotatedBuilder;", "fSuiteBuilder", "Lorg/junit/runners/model/RunnerBuilder;", 6, 10);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 6, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runner/Runner;");
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Custom runner class %s should have a public constructor with signature %s(Class testClass)");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 9, "[Ljava/lang/Object;");
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 5, 7);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 5, 8);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/runner/RunWith;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/RunWith;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/RunWith;", "value", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AnnotatedBuilder;", "buildRunner", "Lorg/junit/runner/Runner;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 2, 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpIgnoredBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/IgnoredBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/IgnoredBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("IgnoredBuilder.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Ignore;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/IgnoredClassRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/IgnoredClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit3Builder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/JUnit3Builder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/JUnit3Builder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("JUnit3Builder.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(0, "isPre4Test", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/JUnit3Builder;", "isPre4Test", "ZLjava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/JUnit38ClassRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4Builder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/JUnit4Builder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/JUnit4Builder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("JUnit4Builder.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/BlockJUnit4ClassRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpNullBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/NullBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/NullBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("NullBuilder.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSuiteMethodBuilder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/SuiteMethodBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/SuiteMethodBuilder;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("SuiteMethodBuilder.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hasSuiteMethod", "ZLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/NoSuchMethodException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "suite");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 5, 2, 3 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/SuiteMethodBuilder;", "hasSuiteMethod", "ZLjava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/SuiteMethod;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/SuiteMethod;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpClassRequest(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/requests/ClassRequest;", null, "Lorg/junit/runner/Request;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/requests/ClassRequest;", null, "Lorg/junit/runner/Request;", null);
	cv.visitSource("ClassRequest.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fCanUseSuiteMethod", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fRunner", "Lorg/junit/runner/Runner;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fRunnerLock", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTestClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/requests/ClassRequest;", "<init>", "VLjava/lang/Class;Z", new int[] { 1, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Z", new String[] { "(", "Ljava/lang/Class", "<*>;Z)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Request;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fRunnerLock", "Ljava/lang/Object;", 0, 1);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fTestClass", "Ljava/lang/Class;", 2, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/internal/requests/ClassRequest;", "fCanUseSuiteMethod", "Z", 3, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunner", "Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fRunnerLock", "Ljava/lang/Object;", 1, 3);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fRunner", "Lorg/junit/runner/Runner;", 0, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;");
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/internal/requests/ClassRequest;", "fCanUseSuiteMethod", "Z", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "<init>", "VZ", new int[] { 0, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fTestClass", "Ljava/lang/Class;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "safeRunnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fRunner", "Lorg/junit/runner/Runner;", 0, 3);
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/ClassRequest;", "fRunner", "Lorg/junit/runner/Runner;", 0, 3);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFilterRequest(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lorg/junit/internal/requests/FilterRequest;", null, "Lorg/junit/runner/Request;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lorg/junit/internal/requests/FilterRequest;", null, "Lorg/junit/runner/Request;", null);
	cv.visitSource("FilterRequest.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fFilter", "Lorg/junit/runner/manipulation/Filter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fRequest", "Lorg/junit/runner/Request;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Request;Lorg/junit/runner/manipulation/Filter;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Request;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/FilterRequest;", "fRequest", "Lorg/junit/runner/Request;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/FilterRequest;", "fFilter", "Lorg/junit/runner/manipulation/Filter;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunner", "Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(9, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/runner/manipulation/NoTestsRemainException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/FilterRequest;", "fRequest", "Lorg/junit/runner/Request;", 2, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/FilterRequest;", "fFilter", "Lorg/junit/runner/manipulation/Filter;", 2, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "apply", "VLjava/lang/Object;", new int[] { 2, 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/ErrorReportingRunner;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/runner/manipulation/Filter;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "No tests found matching %s from %s");
		mv.visitVarInsn(INSN_CONST_4, 5, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/FilterRequest;", "fFilter", "Lorg/junit/runner/manipulation/Filter;", 7, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "describe", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 7, 5, 6);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/FilterRequest;", "fRequest", "Lorg/junit/runner/Request;", 7, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 7, 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "<init>", "VLjava/lang/Class;Ljava/lang/Throwable;", new int[] { 1, 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSortingRequest(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/requests/SortingRequest;", null, "Lorg/junit/runner/Request;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/requests/SortingRequest;", null, "Lorg/junit/runner/Request;", null);
	cv.visitSource("SortingRequest.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fComparator", "Ljava/util/Comparator;", new String[] { "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fRequest", "Lorg/junit/runner/Request;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Request;Ljava/util/Comparator;", new String[] { "(", "Lorg/junit/runner/Request;", "Ljava/util/Comparator", "<", "Lorg/junit/runner/Description;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Request;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/SortingRequest;", "fRequest", "Lorg/junit/runner/Request;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/requests/SortingRequest;", "fComparator", "Ljava/util/Comparator;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunner", "Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/SortingRequest;", "fRequest", "Lorg/junit/runner/Request;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Request;", "getRunner", "Lorg/junit/runner/Runner;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/manipulation/Sorter;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/requests/SortingRequest;", "fComparator", "Ljava/util/Comparator;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Sorter;", "<init>", "VLjava/util/Comparator;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter;", "apply", "VLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit38ClassRunner$OldTestClassAdaptingListener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/TestListener;" });
	cv.visit(0, ACC_FINAL, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", null, "Ljava/lang/Object;", new String[] { "Ljunit/framework/TestListener;" });
	cv.visitSource("JUnit38ClassRunner.java", null);
	cv.visitInnerClass("Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "Lorg/junit/internal/runners/JUnit38ClassRunner;", "OldTestClassAdaptingListener", ACC_PRIVATE + ACC_FINAL);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/internal/runners/JUnit38ClassRunner;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/JUnit38ClassRunner;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "this$0", "Lorg/junit/internal/runners/JUnit38ClassRunner;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/internal/runners/JUnit38ClassRunner;Lorg/junit/runner/notification/RunNotifier;Lorg/junit/internal/runners/JUnit38ClassRunner$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "<init>", "VLorg/junit/internal/runners/JUnit38ClassRunner;Lorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "asDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 4, 0, "Lorg/junit/runner/Describable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Describable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/Describable;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "getEffectiveClass", "Ljava/lang/Class;Ljunit/framework/Test;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "getName", "Ljava/lang/String;Ljunit/framework/Test;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getEffectiveClass", "Ljava/lang/Class;Ljunit/framework/Test;", new String[] { "(", "Ljunit/framework/Test;", ")", "Ljava/lang/Class", "<+", "Ljunit/framework/Test;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getName", "Ljava/lang/String;Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljunit/framework/TestCase;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "asDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 0, 1, 4 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addFailure", "VLjunit/framework/Test;Ljunit/framework/AssertionFailedError;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "addError", "VLjunit/framework/Test;Ljava/lang/Throwable;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "endTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "asDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "startTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "fNotifier", "Lorg/junit/runner/notification/RunNotifier;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "asDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestStarted", "VLorg/junit/runner/Description;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMultipleFailureException2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/model/MultipleFailureException;", null, "Lorg/junit/runners/model/MultipleFailureException;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/model/MultipleFailureException;", null, "Lorg/junit/runners/model/MultipleFailureException;", null);
	cv.visitSource("MultipleFailureException.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "serialVersionUID", "J", null, 1L);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/MultipleFailureException;", "<init>", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExpectException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/statements/ExpectException;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/statements/ExpectException;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("ExpectException.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fExpected", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<+", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fNext", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/Statement;Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/Statement;", "Ljava/lang/Class", "<+", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/ExpectException;", "fNext", "Lorg/junit/runners/model/Statement;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/ExpectException;", "fExpected", "Ljava/lang/Class;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/ExpectException;", "fNext", "Lorg/junit/runners/model/Statement;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 3 });
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l4 = new Label();
		mv.visitLabel(l4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/AssertionError;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "Expected exception: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/ExpectException;", "fExpected", "Ljava/lang/Class;", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/AssertionError;", "<init>", "VLjava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/ExpectException;", "fExpected", "Ljava/lang/Class;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 3 });
		mv.visitStringInsn(INSN_CONST_STRING, 4, "Unexpected exception, expected<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/ExpectException;", "fExpected", "Ljava/lang/Class;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, "> but was<");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitStringInsn(INSN_CONST_STRING, 4, ">");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 3, 2, 1 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFail(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/statements/Fail;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/statements/Fail;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("Fail.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fError", "Ljava/lang/Throwable;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/Fail;", "fError", "Ljava/lang/Throwable;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/Fail;", "fError", "Ljava/lang/Throwable;", 0, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFailOnTimeout(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/statements/FailOnTimeout;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/statements/FailOnTimeout;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("FailOnTimeout.java", null);
	cv.visitMemberClass("Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "Lorg/junit/internal/runners/statements/FailOnTimeout;", "StatementThread");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fOriginalStatement", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTimeout", "J", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/Statement;J", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "fOriginalStatement", "Lorg/junit/runners/model/Statement;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_WIDE, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "fTimeout", "J", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "evaluateStatement", "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, new String[] { "Ljava/lang/InterruptedException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "fOriginalStatement", "Lorg/junit/runners/model/Statement;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "<init>", "VLorg/junit/runners/model/Statement;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "start", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "fTimeout", "J", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "join", "VJ", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "access$000", "ZLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "recordStackTrace", "V", new int[] { 0 });
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "interrupt", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "throwExceptionForUnfinishedThread", "VLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "access$100", "Ljava/lang/Throwable;Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "access$100", "Ljava/lang/Throwable;Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "throwTimeoutException", "VLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "throwTimeoutException", "VLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "test timed out after %d milliseconds");
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitFieldInsn(INSN_IGET_WIDE, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "fTimeout", "J", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Long;", "valueOf", "Ljava/lang/Long;J", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "getRecordedStackTrace", "[Ljava/lang/StackTraceElement;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Exception;", "setStackTrace", "V[Ljava/lang/StackTraceElement;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "evaluateStatement", "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", "access$000", "ZLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "throwExceptionForUnfinishedThread", "VLorg/junit/internal/runners/statements/FailOnTimeout$StatementThread;", new int[] { 2, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpInvokeMethod(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/statements/InvokeMethod;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/statements/InvokeMethod;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("InvokeMethod.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fTarget", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/InvokeMethod;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/InvokeMethod;", "fTarget", "Ljava/lang/Object;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/InvokeMethod;", "fTestMethod", "Lorg/junit/runners/model/FrameworkMethod;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/InvokeMethod;", "fTarget", "Ljava/lang/Object;", 1, 3);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 2, 0, 2, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunAfters(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/statements/RunAfters;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/statements/RunAfters;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("RunAfters.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fAfters", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNext", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTarget", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/Statement;Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Lorg/junit/runners/model/Statement;", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;", "Ljava/lang/Object;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fNext", "Lorg/junit/runners/model/Statement;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fAfters", "Ljava/util/List;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fTarget", "Ljava/lang/Object;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 2 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fNext", "Lorg/junit/runners/model/Statement;", 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 4 });
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fAfters", "Ljava/util/List;", 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		Label l8 = new Label();
		mv.visitTryCatchBlock(l6, l7, l8, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fTarget", "Ljava/lang/Object;", 4, 7);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 4, 5 });
		mv.visitLabel(l7);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l9 = new Label();
		mv.visitLabel(l9);
		Label l10 = new Label();
		mv.visitTryCatchBlock(l9, l10, l3, null);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitLabel(l10);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fAfters", "Ljava/util/List;", 4, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l11 = new Label();
		mv.visitLabel(l11);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		Label l12 = new Label();
		mv.visitLabel(l12);
		Label l13 = new Label();
		Label l14 = new Label();
		mv.visitTryCatchBlock(l12, l13, l14, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fTarget", "Ljava/lang/Object;", 4, 7);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 5, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 4, 5 });
		mv.visitLabel(l13);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l14);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fAfters", "Ljava/util/List;", 5, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		Label l15 = new Label();
		mv.visitLabel(l15);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l16 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l16, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		Label l17 = new Label();
		mv.visitLabel(l17);
		Label l18 = new Label();
		Label l19 = new Label();
		mv.visitTryCatchBlock(l17, l18, l19, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunAfters;", "fTarget", "Ljava/lang/Object;", 5, 7);
		mv.visitVarInsn(INSN_CONST_4, 6, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 6, 0, 6, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 5, 6 });
		mv.visitLabel(l18);
		mv.visitJumpInsn(INSN_GOTO, l15, 0, 0);
		mv.visitLabel(l19);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l15, 0, 0);
		mv.visitLabel(l16);
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/model/MultipleFailureException;", "assertEmpty", "VLjava/util/List;", new int[] { 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunBefores(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/statements/RunBefores;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/statements/RunBefores;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("RunBefores.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fBefores", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNext", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTarget", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/Statement;Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Lorg/junit/runners/model/Statement;", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;", "Ljava/lang/Object;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/RunBefores;", "fNext", "Lorg/junit/runners/model/Statement;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/RunBefores;", "fBefores", "Ljava/util/List;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/statements/RunBefores;", "fTarget", "Ljava/lang/Object;", 3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunBefores;", "fBefores", "Ljava/util/List;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunBefores;", "fTarget", "Ljava/lang/Object;", 2, 4);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/statements/RunBefores;", "fNext", "Lorg/junit/runners/model/Statement;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExpectedException$ExpectedExceptionStatement(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("ExpectedException.java", null);
	cv.visitInnerClass("Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "Lorg/junit/rules/ExpectedException;", "ExpectedExceptionStatement", ACC_PRIVATE);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fNext", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/rules/ExpectedException;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/rules/ExpectedException;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "fNext", "Lorg/junit/runners/model/Statement;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/AssertionError;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/Throwable;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "fNext", "Lorg/junit/runners/model/Statement;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$000", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;Lorg/junit/rules/ExpectedException;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "expectsThrowable", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 1, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$100", "VLorg/junit/rules/ExpectedException;", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$200", "ZLorg/junit/rules/ExpectedException;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$300", "VLorg/junit/rules/ExpectedException;Ljava/lang/Throwable;Z", new int[] { 1, 0, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$400", "ZLorg/junit/rules/ExpectedException;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$300", "VLorg/junit/rules/ExpectedException;Ljava/lang/Throwable;Z", new int[] { 1, 0, 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "this$0", "Lorg/junit/rules/ExpectedException;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/ExpectedException;", "access$500", "VLorg/junit/rules/ExpectedException;Ljava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExpectedException(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/ExpectedException;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/ExpectedException;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visitSource("ExpectedException.java", null);
	cv.visitMemberClass("Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "Lorg/junit/rules/ExpectedException;", "ExpectedExceptionStatement");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "handleAssertionErrors", "Z", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "handleAssumptionViolatedExceptions", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 2 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ExpectedException;", "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", 0, 2);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/rules/ExpectedException;", "handleAssumptionViolatedExceptions", "Z", 1, 2);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/rules/ExpectedException;", "handleAssertionErrors", "Z", 1, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;Lorg/junit/rules/ExpectedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException;", "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "VLorg/junit/rules/ExpectedException;", null, new String[] { "Ljava/lang/AssertionError;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedException;", "failDueToMissingException", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$200", "ZLorg/junit/rules/ExpectedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/rules/ExpectedException;", "handleAssumptionViolatedExceptions", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$300", "VLorg/junit/rules/ExpectedException;Ljava/lang/Throwable;Z", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedException;", "optionallyHandleException", "VLjava/lang/Throwable;Z", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$400", "ZLorg/junit/rules/ExpectedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lorg/junit/rules/ExpectedException;", "handleAssertionErrors", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$500", "VLorg/junit/rules/ExpectedException;Ljava/lang/Throwable;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedException;", "handleException", "VLjava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "failDueToMissingException", "V", null, new String[] { "Ljava/lang/AssertionError;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException;", "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "build", "Lorg/hamcrest/Matcher;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/StringDescription;", "toString", "Ljava/lang/String;Lorg/hamcrest/SelfDescribing;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Expected test to throw ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "fail", "VLjava/lang/String;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "handleException", "VLjava/lang/Throwable;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException;", "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "expectsThrowable", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException;", "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "build", "Lorg/hamcrest/Matcher;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/Assert;", "assertThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "none", "Lorg/junit/rules/ExpectedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/ExpectedException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedException;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "optionallyHandleException", "VLjava/lang/Throwable;Z", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedException;", "handleException", "VLjava/lang/Throwable;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExpectedException$ExpectedExceptionStatement;", "<init>", "VLorg/junit/rules/ExpectedException;Lorg/junit/runners/model/Statement;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "expect", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "instanceOf", "Lorg/hamcrest/Matcher;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedException;", "expect", "VLorg/hamcrest/Matcher;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "expect", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExpectedException;", "fMatcherBuilder", "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedExceptionMatcherBuilder;", "add", "VLorg/hamcrest/Matcher;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "expectCause", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<+", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/matchers/ThrowableCauseMatcher;", "hasCause", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedException;", "expect", "VLorg/hamcrest/Matcher;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "expectMessage", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/hamcrest/CoreMatchers;", "containsString", "Lorg/hamcrest/Matcher;Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedException;", "expectMessage", "VLorg/hamcrest/Matcher;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "expectMessage", "VLorg/hamcrest/Matcher;", new String[] { "(", "Lorg/hamcrest/Matcher", "<", "Ljava/lang/String;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/matchers/ThrowableMessageMatcher;", "hasMessage", "Lorg/hamcrest/Matcher;Lorg/hamcrest/Matcher;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExpectedException;", "expect", "VLorg/hamcrest/Matcher;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "handleAssertionErrors", "Lorg/junit/rules/ExpectedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/rules/ExpectedException;", "handleAssertionErrors", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "handleAssumptionViolatedExceptions", "Lorg/junit/rules/ExpectedException;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lorg/junit/rules/ExpectedException;", "handleAssumptionViolatedExceptions", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExternalResource$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/ExternalResource$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/rules/ExternalResource$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("ExternalResource.java", null);
	cv.visitOuterClass("Lorg/junit/rules/ExternalResource;", "statement", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;");
	cv.visitInnerClass(null, "Lorg/junit/rules/ExternalResource;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/rules/ExternalResource;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$base", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/rules/ExternalResource;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ExternalResource$1;", "this$0", "Lorg/junit/rules/ExternalResource;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ExternalResource$1;", "val$base", "Lorg/junit/runners/model/Statement;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExternalResource$1;", "this$0", "Lorg/junit/rules/ExternalResource;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExternalResource;", "before", "V", new int[] { 0 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExternalResource$1;", "val$base", "Lorg/junit/runners/model/Statement;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 0 });
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExternalResource$1;", "this$0", "Lorg/junit/rules/ExternalResource;", 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExternalResource;", "after", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ExternalResource$1;", "this$0", "Lorg/junit/rules/ExternalResource;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ExternalResource;", "after", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpExternalResource(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/rules/ExternalResource;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/rules/ExternalResource;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visitSource("ExternalResource.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "statement", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/ExternalResource$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExternalResource$1;", "<init>", "VLorg/junit/rules/ExternalResource;Lorg/junit/runners/model/Statement;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "after", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExternalResource;", "statement", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "before", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRuleChain(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/RuleChain;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/RuleChain;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visitSource("RuleChain.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "EMPTY_CHAIN", "Lorg/junit/rules/RuleChain;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "rulesStartingWithInnerMost", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/rules/TestRule;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/RuleChain;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "emptyList", "Ljava/util/List;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/RuleChain;", "<init>", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/rules/RuleChain;", "EMPTY_CHAIN", "Lorg/junit/rules/RuleChain;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Lorg/junit/rules/TestRule;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/RuleChain;", "rulesStartingWithInnerMost", "Ljava/util/List;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "emptyRuleChain", "Lorg/junit/rules/RuleChain;", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/rules/RuleChain;", "EMPTY_CHAIN", "Lorg/junit/rules/RuleChain;", 0, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "outerRule", "Lorg/junit/rules/RuleChain;Lorg/junit/rules/TestRule;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/RuleChain;", "emptyRuleChain", "Lorg/junit/rules/RuleChain;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/RuleChain;", "around", "Lorg/junit/rules/RuleChain;Lorg/junit/rules/TestRule;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/RuleChain;", "rulesStartingWithInnerMost", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/rules/TestRule;", "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", new int[] { 0, 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "around", "Lorg/junit/rules/RuleChain;Lorg/junit/rules/TestRule;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/RuleChain;", "rulesStartingWithInnerMost", "Ljava/util/List;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/rules/RuleChain;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/RuleChain;", "<init>", "VLjava/util/List;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunRules(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/RunRules;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/RunRules;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("RunRules.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "statement", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/Statement;Ljava/lang/Iterable;Lorg/junit/runner/Description;", new String[] { "(", "Lorg/junit/runners/model/Statement;", "Ljava/lang/Iterable", "<", "Lorg/junit/rules/TestRule;", ">;", "Lorg/junit/runner/Description;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/RunRules;", "applyAll", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Ljava/lang/Iterable;Lorg/junit/runner/Description;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/RunRules;", "statement", "Lorg/junit/runners/model/Statement;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "applyAll", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Ljava/lang/Iterable;Lorg/junit/runner/Description;", new String[] { "(", "Lorg/junit/runners/model/Statement;", "Ljava/lang/Iterable", "<", "Lorg/junit/rules/TestRule;", ">;", "Lorg/junit/runner/Description;", ")", "Lorg/junit/runners/model/Statement;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Iterable;", "iterator", "Ljava/util/Iterator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/rules/TestRule;", "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", new int[] { 0, 3, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/RunRules;", "statement", "Lorg/junit/runners/model/Statement;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestWatcher$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/TestWatcher$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/rules/TestWatcher$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("TestWatcher.java", null);
	cv.visitOuterClass("Lorg/junit/rules/TestWatcher;", "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/rules/TestWatcher;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/rules/TestWatcher;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$base", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$description", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$base", "Lorg/junit/runners/model/Statement;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$000", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 4, 1 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$base", "Lorg/junit/runners/model/Statement;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$100", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 4, 1 });
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$400", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 4, 1 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/model/MultipleFailureException;", "assertEmpty", "VLjava/util/List;", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l6, l7, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$200", "VLorg/junit/rules/TestWatcher;Lorg/junit/internal/AssumptionViolatedException;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 0, 4, 1 });
		mv.visitLabel(l7);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$400", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 4, 1 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitTryCatchBlock(l8, l9, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$300", "VLorg/junit/rules/TestWatcher;Ljava/lang/Throwable;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 2, 4, 1 });
		mv.visitLabel(l9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 3, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 4, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$400", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 3, 4, 1 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "this$0", "Lorg/junit/rules/TestWatcher;", 4, 6);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatcher$1;", "val$description", "Lorg/junit/runner/Description;", 5, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/rules/TestWatcher;", "access$400", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 4, 5, 1 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestWatcher(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/rules/TestWatcher;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/rules/TestWatcher;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visitSource("TestWatcher.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "startingQuietly", "VLorg/junit/runner/Description;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "succeededQuietly", "VLorg/junit/runner/Description;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$200", "VLorg/junit/rules/TestWatcher;Lorg/junit/internal/AssumptionViolatedException;Lorg/junit/runner/Description;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "skippedQuietly", "VLorg/junit/internal/AssumptionViolatedException;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$300", "VLorg/junit/rules/TestWatcher;Ljava/lang/Throwable;Lorg/junit/runner/Description;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "failedQuietly", "VLjava/lang/Throwable;Lorg/junit/runner/Description;Ljava/util/List;", new int[] { 0, 1, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$400", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "finishedQuietly", "VLorg/junit/runner/Description;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "failedQuietly", "VLjava/lang/Throwable;Lorg/junit/runner/Description;Ljava/util/List;", new String[] { "(", "Ljava/lang/Throwable;", "Lorg/junit/runner/Description;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatcher;", "failed", "VLjava/lang/Throwable;Lorg/junit/runner/Description;", new int[] { 1, 2, 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "finishedQuietly", "VLorg/junit/runner/Description;Ljava/util/List;", new String[] { "(", "Lorg/junit/runner/Description;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatcher;", "finished", "VLorg/junit/runner/Description;", new int[] { 1, 2 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "skippedQuietly", "VLorg/junit/internal/AssumptionViolatedException;Lorg/junit/runner/Description;Ljava/util/List;", new String[] { "(", "Lorg/junit/internal/AssumptionViolatedException;", "Lorg/junit/runner/Description;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatcher;", "skipped", "VLorg/junit/internal/AssumptionViolatedException;Lorg/junit/runner/Description;", new int[] { 1, 2, 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "startingQuietly", "VLorg/junit/runner/Description;Ljava/util/List;", new String[] { "(", "Lorg/junit/runner/Description;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatcher;", "starting", "VLorg/junit/runner/Description;", new int[] { 1, 2 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "succeededQuietly", "VLorg/junit/runner/Description;Ljava/util/List;", new String[] { "(", "Lorg/junit/runner/Description;", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatcher;", "succeeded", "VLorg/junit/runner/Description;", new int[] { 1, 2 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/TestWatcher$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher$1;", "<init>", "VLorg/junit/rules/TestWatcher;Lorg/junit/runner/Description;Lorg/junit/runners/model/Statement;", new int[] { 0, 1, 3, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "failed", "VLjava/lang/Throwable;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "finished", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "skipped", "VLorg/junit/internal/AssumptionViolatedException;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "starting", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "succeeded", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestWatchman$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/TestWatchman$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/rules/TestWatchman$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("TestWatchman.java", null);
	cv.visitOuterClass("Lorg/junit/rules/TestWatchman;", "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;");
	cv.visitInnerClass(null, "Lorg/junit/rules/TestWatchman;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/rules/TestWatchman;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$base", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$method", "Lorg/junit/runners/model/FrameworkMethod;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/rules/TestWatchman;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "this$0", "Lorg/junit/rules/TestWatchman;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$base", "Lorg/junit/runners/model/Statement;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "this$0", "Lorg/junit/rules/TestWatchman;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatchman;", "starting", "VLorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$base", "Lorg/junit/runners/model/Statement;", 2, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "this$0", "Lorg/junit/rules/TestWatchman;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatchman;", "succeeded", "VLorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "this$0", "Lorg/junit/rules/TestWatchman;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatchman;", "finished", "VLorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitTryCatchBlock(l5, l4, l4, null);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "this$0", "Lorg/junit/rules/TestWatchman;", 3, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatchman;", "finished", "VLorg/junit/runners/model/FrameworkMethod;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l6, l7, l4, null);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "this$0", "Lorg/junit/rules/TestWatchman;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestWatchman$1;", "val$method", "Lorg/junit/runners/model/FrameworkMethod;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TestWatchman;", "failed", "VLjava/lang/Throwable;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 1, 3 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestWatchman(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/TestWatchman;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/MethodRule;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/TestWatchman;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/MethodRule;" });
	cv.visitSource("TestWatchman.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/TestWatchman$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatchman$1;", "<init>", "VLorg/junit/rules/TestWatchman;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/runners/model/Statement;", new int[] { 0, 1, 3, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "failed", "VLjava/lang/Throwable;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "finished", "VLorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "starting", "VLorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "succeeded", "VLorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTimeout(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/Timeout;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/Timeout;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visitSource("Timeout.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fMillis", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VI", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT, "Lorg/junit/rules/Timeout;", "fMillis", "I", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/statements/FailOnTimeout;");
		mv.visitFieldInsn(INSN_IGET, "Lorg/junit/rules/Timeout;", "fMillis", "I", 1, 3);
		mv.visitOperationInsn(INSN_INT_TO_LONG, 1, 1, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "<init>", "VLorg/junit/runners/model/Statement;J", new int[] { 0, 4, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpVerifier$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/rules/Verifier$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/rules/Verifier$1;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("Verifier.java", null);
	cv.visitOuterClass("Lorg/junit/rules/Verifier;", "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/rules/Verifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/rules/Verifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$base", "Lorg/junit/runners/model/Statement;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/rules/Verifier;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/Verifier$1;", "this$0", "Lorg/junit/rules/Verifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/Verifier$1;", "val$base", "Lorg/junit/runners/model/Statement;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/Verifier$1;", "val$base", "Lorg/junit/runners/model/Statement;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/Verifier$1;", "this$0", "Lorg/junit/rules/Verifier;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/Verifier;", "verify", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpVerifier(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/rules/Verifier;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/rules/Verifier;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/rules/TestRule;" });
	cv.visitSource("Verifier.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/Verifier$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/Verifier$1;", "<init>", "VLorg/junit/rules/Verifier;Lorg/junit/runners/model/Statement;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "verify", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpComputer$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/Computer$1;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visit(0, 0, "Lorg/junit/runner/Computer$1;", null, "Lorg/junit/runners/model/RunnerBuilder;", null);
	cv.visitSource("Computer.java", null);
	cv.visitOuterClass("Lorg/junit/runner/Computer;", "getSuite", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;");
	cv.visitInnerClass(null, "Lorg/junit/runner/Computer;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/Computer;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$builder", "Lorg/junit/runners/model/RunnerBuilder;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Computer;Lorg/junit/runners/model/RunnerBuilder;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Computer$1;", "this$0", "Lorg/junit/runner/Computer;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Computer$1;", "val$builder", "Lorg/junit/runners/model/RunnerBuilder;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/RunnerBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runnerForClass", "Lorg/junit/runner/Runner;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Lorg/junit/runner/Runner;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Computer$1;", "this$0", "Lorg/junit/runner/Computer;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Computer$1;", "val$builder", "Lorg/junit/runners/model/RunnerBuilder;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Computer;", "getRunner", "Lorg/junit/runner/Runner;Lorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;", new int[] { 0, 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRequest$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/runner/Request$1;", null, "Lorg/junit/runner/Request;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/runner/Request$1;", null, "Lorg/junit/runner/Request;", null);
	cv.visitSource("Request.java", null);
	cv.visitOuterClass("Lorg/junit/runner/Request;", "runner", "Lorg/junit/runner/Request;Lorg/junit/runner/Runner;");
	cv.visitInnerClass(null, "Lorg/junit/runner/Request;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$runner", "Lorg/junit/runner/Runner;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Request$1;", "val$runner", "Lorg/junit/runner/Runner;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Request;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRunner", "Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Request$1;", "val$runner", "Lorg/junit/runner/Runner;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpResult$Listener(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/Result$Listener;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visit(0, 0, "Lorg/junit/runner/Result$Listener;", null, "Lorg/junit/runner/notification/RunListener;", null);
	cv.visitSource("Result.java", null);
	cv.visitInnerClass("Lorg/junit/runner/Result$Listener;", "Lorg/junit/runner/Result;", "Listener", ACC_PRIVATE);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/Result;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunListener;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_SYNTHETIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Result;Lorg/junit/runner/Result$1;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Result$Listener;", "<init>", "VLorg/junit/runner/Result;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testAssumptionFailure", "VLorg/junit/runner/notification/Failure;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFailure", "VLorg/junit/runner/notification/Failure;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Result;", "access$300", "Ljava/util/List;Lorg/junit/runner/Result;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFinished", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Result;", "access$200", "Ljava/util/concurrent/atomic/AtomicInteger;Lorg/junit/runner/Result;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/concurrent/atomic/AtomicInteger;", "getAndIncrement", "I", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testIgnored", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Result;", "access$400", "Ljava/util/concurrent/atomic/AtomicInteger;Lorg/junit/runner/Result;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/concurrent/atomic/AtomicInteger;", "getAndIncrement", "I", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testRunFinished", "VLorg/junit/runner/Result;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "currentTimeMillis", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 2, 5);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Result;", "access$000", "JLorg/junit/runner/Result;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 3);
		mv.visitOperationInsn(INSN_SUB_LONG, 3, 0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Result;", "access$114", "JLorg/junit/runner/Result;J", new int[] { 2, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testRunStarted", "VLorg/junit/runner/Description;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/Result$Listener;", "this$0", "Lorg/junit/runner/Result;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "currentTimeMillis", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Result;", "access$002", "JLorg/junit/runner/Result;J", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runner/Runner;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/runner/Describable;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runner/Runner;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/runner/Describable;" });
	cv.visitSource("Runner.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, "run", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testCount", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "testCount", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFilter$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/runner/manipulation/Filter$1;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/runner/manipulation/Filter$1;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visitSource("Filter.java", null);
	cv.visitInnerClass("Lorg/junit/runner/manipulation/Filter$1;", "Lorg/junit/runner/manipulation/Filter;", null, ACC_STATIC);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "apply", "VLjava/lang/Object;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describe", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "all tests");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "intersect", "Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "shouldRun", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFilter$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Lorg/junit/runner/manipulation/Filter$2;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visit(0, ACC_FINAL, "Lorg/junit/runner/manipulation/Filter$2;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visitSource("Filter.java", null);
	cv.visitOuterClass("Lorg/junit/runner/manipulation/Filter;", "matchMethodDescription", "Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/runner/manipulation/Filter;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$desiredDescription", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/manipulation/Filter$2;", "val$desiredDescription", "Lorg/junit/runner/Description;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describe", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Method %s");
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Filter$2;", "val$desiredDescription", "Lorg/junit/runner/Description;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getDisplayName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "shouldRun", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "isTest", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Filter$2;", "val$desiredDescription", "Lorg/junit/runner/Description;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "equals", "ZLjava/lang/Object;", new int[] { 2, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter$2;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFilter$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/manipulation/Filter$3;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visit(0, 0, "Lorg/junit/runner/manipulation/Filter$3;", null, "Lorg/junit/runner/manipulation/Filter;", null);
	cv.visitSource("Filter.java", null);
	cv.visitOuterClass("Lorg/junit/runner/manipulation/Filter;", "intersect", "Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;");
	cv.visitInnerClass(null, "Lorg/junit/runner/manipulation/Filter;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/manipulation/Filter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$first", "Lorg/junit/runner/manipulation/Filter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$second", "Lorg/junit/runner/manipulation/Filter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;Lorg/junit/runner/manipulation/Filter;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "this$0", "Lorg/junit/runner/manipulation/Filter;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "val$first", "Lorg/junit/runner/manipulation/Filter;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "val$second", "Lorg/junit/runner/manipulation/Filter;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/Filter;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "describe", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "val$first", "Lorg/junit/runner/manipulation/Filter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "describe", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, " and ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "val$second", "Lorg/junit/runner/manipulation/Filter;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "describe", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "shouldRun", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "val$first", "Lorg/junit/runner/manipulation/Filter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/manipulation/Filter$3;", "val$second", "Lorg/junit/runner/manipulation/Filter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$1;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$1;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestRunStarted", "VLorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$description", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$1;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$1;", "val$description", "Lorg/junit/runner/Description;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$1;", "val$description", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testRunStarted", "VLorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$2;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$2;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestRunFinished", "VLorg/junit/runner/Result;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$result", "Lorg/junit/runner/Result;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Result;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$2;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$2;", "val$result", "Lorg/junit/runner/Result;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$2;", "val$result", "Lorg/junit/runner/Result;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testRunFinished", "VLorg/junit/runner/Result;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$3;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$3;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestStarted", "VLorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$description", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$3;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$3;", "val$description", "Lorg/junit/runner/Description;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$3;", "val$description", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testStarted", "VLorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$4;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$4;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestFailures", "VLjava/util/List;Ljava/util/List;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$failures", "Ljava/util/List;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$4;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$4;", "val$failures", "Ljava/util/List;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Ljava/util/List;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$4;", "val$failures", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$5(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$5;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$5;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestAssumptionFailed", "VLorg/junit/runner/notification/Failure;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$failure", "Lorg/junit/runner/notification/Failure;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/notification/Failure;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$5;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$5;", "val$failure", "Lorg/junit/runner/notification/Failure;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$5;", "val$failure", "Lorg/junit/runner/notification/Failure;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testAssumptionFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$6(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$6;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$6;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestIgnored", "VLorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$description", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$6;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$6;", "val$description", "Lorg/junit/runner/Description;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$6;", "val$description", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testIgnored", "VLorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRunNotifier$7(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runner/notification/RunNotifier$7;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visit(0, 0, "Lorg/junit/runner/notification/RunNotifier$7;", null, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", null);
	cv.visitSource("RunNotifier.java", null);
	cv.visitOuterClass("Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;");
	cv.visitInnerClass(null, "Lorg/junit/runner/notification/RunNotifier;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$description", "Lorg/junit/runner/Description;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$7;", "this$0", "Lorg/junit/runner/notification/RunNotifier;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runner/notification/RunNotifier$7;", "val$description", "Lorg/junit/runner/Description;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/RunNotifier$SafeNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "notifyListener", "VLorg/junit/runner/notification/RunListener;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runner/notification/RunNotifier$7;", "val$description", "Lorg/junit/runner/Description;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunListener;", "testFinished", "VLorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpBlockJUnit4ClassRunner$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;", null, "Lorg/junit/internal/runners/model/ReflectiveCallable;", null);
	cv.visit(0, 0, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;", null, "Lorg/junit/internal/runners/model/ReflectiveCallable;", null);
	cv.visitSource("BlockJUnit4ClassRunner.java", null);
	cv.visitOuterClass("Lorg/junit/runners/BlockJUnit4ClassRunner;", "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;");
	cv.visitInnerClass(null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/BlockJUnit4ClassRunner;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/BlockJUnit4ClassRunner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;", "this$0", "Lorg/junit/runners/BlockJUnit4ClassRunner;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/model/ReflectiveCallable;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runReflectiveCall", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;", "this$0", "Lorg/junit/runners/BlockJUnit4ClassRunner;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "createTest", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParentRunner$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/ParentRunner$1;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/runners/model/RunnerScheduler;" });
	cv.visit(0, 0, "Lorg/junit/runners/ParentRunner$1;", null, "Ljava/lang/Object;", new String[] { "Lorg/junit/runners/model/RunnerScheduler;" });
	cv.visitSource("ParentRunner.java", null);
	cv.visitInnerClass("Lorg/junit/runners/ParentRunner$1;", "Lorg/junit/runners/ParentRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/ParentRunner;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/ParentRunner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$1;", "this$0", "Lorg/junit/runners/ParentRunner;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Object;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "finished", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "schedule", "VLjava/lang/Runnable;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Runnable;", "run", "V", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParentRunner$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/ParentRunner$2;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visit(0, 0, "Lorg/junit/runners/ParentRunner$2;", null, "Lorg/junit/runners/model/Statement;", null);
	cv.visitSource("ParentRunner.java", null);
	cv.visitOuterClass("Lorg/junit/runners/ParentRunner;", "childrenInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;");
	cv.visitInnerClass(null, "Lorg/junit/runners/ParentRunner;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/ParentRunner;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/ParentRunner;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$2;", "this$0", "Lorg/junit/runners/ParentRunner;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner$2;", "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/Statement;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "evaluate", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$2;", "this$0", "Lorg/junit/runners/ParentRunner;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner$2;", "val$notifier", "Lorg/junit/runner/notification/RunNotifier;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/ParentRunner;", "access$000", "VLorg/junit/runners/ParentRunner;Lorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFrameworkField(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/model/FrameworkField;", new String[] { "Lorg/junit/runners/model/FrameworkMember", "<", "Lorg/junit/runners/model/FrameworkField;", ">;" }, "Lorg/junit/runners/model/FrameworkMember;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/model/FrameworkField;", new String[] { "Lorg/junit/runners/model/FrameworkMember", "<", "Lorg/junit/runners/model/FrameworkField;", ">;" }, "Lorg/junit/runners/model/FrameworkMember;", null);
	cv.visitSource("FrameworkField.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fField", "Ljava/lang/reflect/Field;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMember;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "get", "Ljava/lang/Object;Ljava/lang/Object;", null, new String[] { "Ljava/lang/IllegalArgumentException;", "Ljava/lang/IllegalAccessException;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "get", "Ljava/lang/Object;Ljava/lang/Object;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getField", "Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "getField", "Ljava/lang/reflect/Field;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getType", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isPublic", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isShadowedBy", "ZLorg/junit/runners/model/FrameworkField;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "isShadowedBy", "ZLorg/junit/runners/model/FrameworkMember;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runners/model/FrameworkField;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "isShadowedBy", "ZLorg/junit/runners/model/FrameworkField;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isStatic", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkField;", "fField", "Ljava/lang/reflect/Field;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFrameworkMethod$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/model/FrameworkMethod$1;", null, "Lorg/junit/internal/runners/model/ReflectiveCallable;", null);
	cv.visit(0, 0, "Lorg/junit/runners/model/FrameworkMethod$1;", null, "Lorg/junit/internal/runners/model/ReflectiveCallable;", null);
	cv.visitSource("FrameworkMethod.java", null);
	cv.visitOuterClass("Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;");
	cv.visitInnerClass(null, "Lorg/junit/runners/model/FrameworkMethod;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/model/FrameworkMethod;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$params", "[Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$target", "Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "this$0", "Lorg/junit/runners/model/FrameworkMethod;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "val$target", "Ljava/lang/Object;", 2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "val$params", "[Ljava/lang/Object;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/model/ReflectiveCallable;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runReflectiveCall", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "this$0", "Lorg/junit/runners/model/FrameworkMethod;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "val$target", "Ljava/lang/Object;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "val$params", "[Ljava/lang/Object;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFrameworkMethod(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/model/FrameworkMethod;", new String[] { "Lorg/junit/runners/model/FrameworkMember", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, "Lorg/junit/runners/model/FrameworkMember;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/model/FrameworkMethod;", new String[] { "Lorg/junit/runners/model/FrameworkMember", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, "Lorg/junit/runners/model/FrameworkMember;", null);
	cv.visitSource("FrameworkMethod.java", null);
	{
		fv = cv.visitField(ACC_FINAL, "fMethod", "Ljava/lang/reflect/Method;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMember;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getParameterTypes", "[Ljava/lang/Class;", new String[] { "()[", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "equals", "ZLjava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isInstance", "ZLjava/lang/Object;", new int[] { 0, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "equals", "ZLjava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new String[] { "<T::", "Ljava/lang/annotation/Annotation;", ">(", "Ljava/lang/Class", "<TT;>;)TT;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMethod", "Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getReturnType", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getReturnType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getType", "Ljava/lang/Class;", new String[] { "()", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getReturnType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "hashCode", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "hashCode", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod$1;", "<init>", "VLorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod$1;", "run", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isPublic", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_VOLATILE + ACC_SYNTHETIC, "isShadowedBy", "ZLorg/junit/runners/model/FrameworkMember;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "isShadowedBy", "ZLorg/junit/runners/model/FrameworkMethod;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isShadowedBy", "ZLorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayLengthInsn(2, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayLengthInsn(3, 3);
		mv.visitJumpInsn(INSN_IF_NE, l1, 2, 3);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayLengthInsn(2, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 0, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 3, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "equals", "ZLjava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "isStatic", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "producesType", "ZLjava/lang/reflect/Type;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/FrameworkMethod;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 2, 0, "Ljava/lang/Class;");
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Ljava/lang/Class;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getReturnType", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "isAssignableFrom", "ZLjava/lang/Class;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validateNoTypeParametersOnArgs", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "<init>", "VLjava/lang/reflect/Method;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/NoGenericTypeParametersValidator;", "validate", "VLjava/util/List;", new int[] { 0, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validatePublicVoid", "VZLjava/util/List;", new String[] { "(Z", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 1, 5);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "should");
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "() ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " be static");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 1 });
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getDeclaringClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getDeclaringClass", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, " should be public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 1 });
		mv.visitLabel(l3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "() should be public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 1 });
		mv.visitLabel(l4);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getReturnType", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/Void;", "TYPE", "Ljava/lang/Class;", 2, 0);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l5, 1, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "() should be void");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 6, 1 });
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "should not");
		mv.visitJumpInsn(INSN_GOTO_16, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "validatePublicVoidNoArg", "VZLjava/util/List;", new String[] { "(Z", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "validatePublicVoid", "VZLjava/util/List;", new int[] { 3, 4, 5 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitArrayLengthInsn(0, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "Method ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/model/FrameworkMethod;", "fMethod", "Ljava/lang/reflect/Method;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " should have no parameters");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 5, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingPolicy$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$1;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$1;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visitSource("FieldNamingPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/FieldNamingPolicy$1;", "Lcom/google/gson/FieldNamingPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/FieldNamingPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingPolicy$2(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$2;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$2;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visitSource("FieldNamingPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/FieldNamingPolicy$2;", "Lcom/google/gson/FieldNamingPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/FieldNamingPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "access$100", "Ljava/lang/String;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingPolicy$3(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$3;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$3;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visitSource("FieldNamingPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/FieldNamingPolicy$3;", "Lcom/google/gson/FieldNamingPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/FieldNamingPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, " ");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "access$200", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "access$100", "Ljava/lang/String;Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingPolicy$4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$4;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$4;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visitSource("FieldNamingPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/FieldNamingPolicy$4;", "Lcom/google/gson/FieldNamingPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/FieldNamingPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "_");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "access$200", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "toLowerCase", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpFieldNamingPolicy$5(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$5;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visit(0, ACC_FINAL + ACC_ENUM, "Lcom/google/gson/FieldNamingPolicy$5;", null, "Lcom/google/gson/FieldNamingPolicy;", null);
	cv.visitSource("FieldNamingPolicy.java", null);
	cv.visitInnerClass("Lcom/google/gson/FieldNamingPolicy$5;", "Lcom/google/gson/FieldNamingPolicy;", null, ACC_STATIC + ACC_ENUM);
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;I", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lcom/google/gson/FieldNamingPolicy;", "<init>", "VLjava/lang/String;ILcom/google/gson/FieldNamingPolicy$1;", new int[] { 1, 2, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "translateName", "Ljava/lang/String;Ljava/lang/reflect/Field;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "-");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lcom/google/gson/FieldNamingPolicy;", "access$200", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "toLowerCase", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSplatterIgnoreMethodRule(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lcom/heisentest/splatter/sdk/SplatterIgnoreMethodRule;", null, "Lorg/junit/rules/TestWatcher;", null);
	cv.visit(0, ACC_PUBLIC, "Lcom/heisentest/splatter/sdk/SplatterIgnoreMethodRule;", null, "Lorg/junit/rules/TestWatcher;", null);
	cv.visitSource("SplatterIgnoreMethodRule.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "ignored", "Z", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "currentTestIsIgnored", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_BOOLEAN, "Lcom/heisentest/splatter/sdk/SplatterIgnoreMethodRule;", "ignored", "Z", 0, 1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "starting", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lcom/heisentest/splatter/sdk/SplatterIgnore;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IPUT_BOOLEAN, "Lcom/heisentest/splatter/sdk/SplatterIgnoreMethodRule;", "ignored", "Z", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpActiveTestSuite(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/extensions/ActiveTestSuite;", null, "Ljunit/framework/TestSuite;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/extensions/ActiveTestSuite;", null, "Ljunit/framework/TestSuite;", null);
	cv.visitSource("ActiveTestSuite.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_VOLATILE, "fActiveTestDeathCount", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljunit/framework/TestCase;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljunit/framework/TestCase;", ">;", "Ljava/lang/String;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;Ljava/lang/String;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/extensions/ActiveTestSuite;", "fActiveTestDeathCount", "I", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljunit/framework/TestSuite;", "run", "VLjunit/framework/TestResult;", new int[] { 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/ActiveTestSuite;", "waitUntilFinished", "V", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_DECLARED_SYNCHRONIZED, "runFinished", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/extensions/ActiveTestSuite;", "fActiveTestDeathCount", "I", 0, 1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/extensions/ActiveTestSuite;", "fActiveTestDeathCount", "I", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "notifyAll", "V", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 1);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "runTest", "VLjunit/framework/Test;Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/extensions/ActiveTestSuite$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/extensions/ActiveTestSuite$1;", "<init>", "VLjunit/extensions/ActiveTestSuite;Ljunit/framework/Test;Ljunit/framework/TestResult;", new int[] { 0, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Thread;", "start", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_DECLARED_SYNCHRONIZED, "waitUntilFinished", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitIntInsn(INSN_MONITOR_ENTER, 3);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, null);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/extensions/ActiveTestSuite;", "fActiveTestDeathCount", "I", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/ActiveTestSuite;", "testCount", "I", new int[] { 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 1, 2);
		Label l4 = new Label();
		mv.visitLabel(l4);
		Label l5 = new Label();
		Label l6 = new Label();
		mv.visitTryCatchBlock(l4, l5, l6, "Ljava/lang/InterruptedException;");
		mv.visitTryCatchBlock(l4, l5, l2, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "wait", "V", new int[] { 3 });
		mv.visitLabel(l5);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l6);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 3);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitIntInsn(INSN_MONITOR_EXIT, 3);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpRepeatedTest(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/extensions/RepeatedTest;", null, "Ljunit/extensions/TestDecorator;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/extensions/RepeatedTest;", null, "Ljunit/extensions/TestDecorator;", null);
	cv.visitSource("RepeatedTest.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fTimesRepeat", "I", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/Test;I", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/extensions/TestDecorator;", "<init>", "VLjunit/framework/Test;", new int[] { 2, 3 });
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_GEZ, l0, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalArgumentException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "Repetition count must be >= 0");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalArgumentException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IPUT, "Ljunit/extensions/RepeatedTest;", "fTimesRepeat", "I", 4, 2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "countTestCases", "I", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljunit/extensions/TestDecorator;", "countTestCases", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/extensions/RepeatedTest;", "fTimesRepeat", "I", 1, 2);
		mv.visitOperationInsn(INSN_MUL_INT_2ADDR, 0, 0, 1, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET, "Ljunit/extensions/RepeatedTest;", "fTimesRepeat", "I", 1, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "shouldStop", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 1, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljunit/extensions/TestDecorator;", "run", "VLjunit/framework/TestResult;", new int[] { 2, 3 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "toString", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Ljunit/extensions/TestDecorator;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "(repeated)");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestSetup(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/extensions/TestSetup;", null, "Ljunit/extensions/TestDecorator;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/extensions/TestSetup;", null, "Ljunit/extensions/TestDecorator;", null);
	cv.visitSource("TestSetup.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/extensions/TestDecorator;", "<init>", "VLjunit/framework/Test;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLjunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/extensions/TestSetup$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/extensions/TestSetup$1;", "<init>", "VLjunit/extensions/TestSetup;Ljunit/framework/TestResult;", new int[] { 0, 1, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "runProtected", "VLjunit/framework/Test;Ljunit/framework/Protectable;", new int[] { 2, 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "setUp", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "tearDown", "V", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestSuite$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_FINAL, "Ljunit/framework/TestSuite$1;", null, "Ljunit/framework/TestCase;", null);
	cv.visit(0, ACC_FINAL, "Ljunit/framework/TestSuite$1;", null, "Ljunit/framework/TestCase;", null);
	cv.visitSource("TestSuite.java", null);
	cv.visitOuterClass("Ljunit/framework/TestSuite;", "warning", "Ljunit/framework/Test;Ljava/lang/String;");
	cv.visitInnerClass(null, "Ljunit/framework/TestSuite;", null, ACC_STATIC);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$message", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLjava/lang/String;Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/framework/TestSuite$1;", "val$message", "Ljava/lang/String;", 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestCase;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runTest", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/framework/TestSuite$1;", "val$message", "Ljava/lang/String;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite$1;", "fail", "VLjava/lang/String;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Ljunit/textui/TestRunner;", null, "Ljunit/runner/BaseTestRunner;", null);
	cv.visit(0, ACC_PUBLIC, "Ljunit/textui/TestRunner;", null, "Ljunit/runner/BaseTestRunner;", null);
	cv.visitSource("TestRunner.java", null);
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "EXCEPTION_EXIT", "I", null, 2);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "FAILURE_EXIT", "I", null, 1);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, "SUCCESS_EXIT", "I", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fPrinter", "Ljunit/textui/ResultPrinter;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "out", "Ljava/io/PrintStream;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/textui/TestRunner;", "<init>", "VLjava/io/PrintStream;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/PrintStream;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/textui/ResultPrinter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/textui/ResultPrinter;", "<init>", "VLjava/io/PrintStream;", new int[] { 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/textui/TestRunner;", "<init>", "VLjunit/textui/ResultPrinter;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjunit/textui/ResultPrinter;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/runner/BaseTestRunner;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/textui/TestRunner;", "fPrinter", "Ljunit/textui/ResultPrinter;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "V[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/textui/TestRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/textui/TestRunner;", "<init>", "V", new int[] { 0 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "start", "Ljunit/framework/TestResult;[Ljava/lang/String;", new int[] { 0, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "wasSuccessful", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "exit", "VI", new int[] { 3 });
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "exit", "VI", new int[] { 3 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "err", "Ljava/io/PrintStream;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Exception;", "getMessage", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitVarInsn(INSN_CONST_4, 3, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "exit", "VI", new int[] { 3 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "run", "Ljunit/framework/TestResult;Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/textui/TestRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/textui/TestRunner;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "run", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljunit/framework/TestCase;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/textui/TestRunner;", "run", "Ljunit/framework/TestResult;Ljunit/framework/Test;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "runAndWait", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/textui/TestRunner;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/textui/TestRunner;", "<init>", "V", new int[] { 0 });
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;Z", new int[] { 0, 2, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "createTestResult", "Ljunit/framework/TestResult;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestResult;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "<init>", "V", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;Z", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;Z", null, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "createTestResult", "Ljunit/framework/TestResult;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/textui/TestRunner;", "fPrinter", "Ljunit/textui/ResultPrinter;", 7, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "addListener", "VLjunit/framework/TestListener;", new int[] { 2, 7 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "currentTimeMillis", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 5);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "run", "VLjunit/framework/TestResult;", new int[] { 9, 2 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "currentTimeMillis", "J", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitOperationInsn(INSN_SUB_LONG, 3, 0, 5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/textui/TestRunner;", "fPrinter", "Ljunit/textui/ResultPrinter;", 7, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "print", "VLjunit/framework/TestResult;J", new int[] { 7, 2, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "pause", "VZ", new int[] { 8, 10 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "pause", "VZ", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Ljunit/textui/TestRunner;", "fPrinter", "Ljunit/textui/ResultPrinter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/ResultPrinter;", "printWaitPrompt", "V", new int[] { 0 });
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		Label l4 = new Label();
		mv.visitTryCatchBlock(l2, l3, l4, "Ljava/lang/Exception;");
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "in", "Ljava/io/InputStream;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/InputStream;", "read", "I", new int[] { 0 });
		mv.visitLabel(l3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runFailed", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "err", "Ljava/io/PrintStream;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 0, 2 });
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/System;", "exit", "VI", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runSingleMethod", "Ljunit/framework/TestResult;Ljava/lang/String;Ljava/lang/String;Z", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "loadSuiteClass", "Ljava/lang/Class;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "asSubclass", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/framework/TestSuite;", "createTest", "Ljunit/framework/Test;Ljava/lang/Class;Ljava/lang/String;", new int[] { 1, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;Z", new int[] { 4, 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setPrinter", "VLjunit/textui/ResultPrinter;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Ljunit/textui/TestRunner;", "fPrinter", "Ljunit/textui/ResultPrinter;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "start", "Ljunit/framework/TestResult;[Ljava/lang/String;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(13, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 6, "");
		mv.visitStringInsn(INSN_CONST_STRING, 4, "");
		mv.visitVarInsn(INSN_CONST_4, 7, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(8, 12);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 2, 8);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 8, 12, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 9, "-wait");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 8, 0);
		mv.visitVarInsn(INSN_CONST_4, 7, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 8, 12, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 9, "-c");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 8, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 8, 12, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "extractClassName", "Ljava/lang/String;Ljava/lang/String;", new int[] { 11, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 8, 12, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 9, "-m");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l5 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l5, 8, 0);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 0, 12, 2);
		mv.visitVarInsn(INSN_CONST_16, 8, 46);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "lastIndexOf", "II", new int[] { 0, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;II", new int[] { 0, 8, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 8, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "substring", "Ljava/lang/String;I", new int[] { 0, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l5);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 8, 12, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 9, "-v");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 8, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Ljava/lang/System;", "err", "Ljava/io/PrintStream;", 8, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 9, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 9 });
		mv.visitStringInsn(INSN_CONST_STRING, 10, "JUnit ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljunit/runner/Version;", "id", "Ljava/lang/String;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, " by Kent Beck and Erich Gamma");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/PrintStream;", "println", "VLjava/lang/String;", new int[] { 8, 9 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l6);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 6, 12, 2);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 8, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 6, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 8, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 9, "Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_THROW, 8);
		mv.visitLabel(l7);
		Label l8 = new Label();
		Label l9 = new Label();
		mv.visitTryCatchBlock(l7, l8, l9, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 8, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "equals", "ZLjava/lang/Object;", new int[] { 4, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l10 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l10, 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "runSingleMethod", "Ljunit/framework/TestResult;Ljava/lang/String;Ljava/lang/String;Z", new int[] { 11, 6, 4, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		Label l11 = new Label();
		mv.visitLabel(l11);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 8);
		mv.visitLabel(l10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "getTest", "Ljunit/framework/Test;Ljava/lang/String;", new int[] { 11, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/textui/TestRunner;", "doRun", "Ljunit/framework/TestResult;Ljunit/framework/Test;Z", new int[] { 11, 5, 7 });
		mv.visitLabel(l8);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitJumpInsn(INSN_GOTO, l11, 0, 0);
		mv.visitLabel(l9);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 9, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 9 });
		mv.visitStringInsn(INSN_CONST_STRING, 10, "Could not create and run test suite: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 9, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_THROW, 8);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testEnded", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testFailed", "VILjunit/framework/Test;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "testStarted", "VLjava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpIgnoredClassRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/builders/IgnoredClassRunner;", null, "Lorg/junit/runner/Runner;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/builders/IgnoredClassRunner;", null, "Lorg/junit/runner/Runner;", null);
	cv.visitSource("IgnoredClassRunner.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTestClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Runner;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/builders/IgnoredClassRunner;", "fTestClass", "Ljava/lang/Class;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/builders/IgnoredClassRunner;", "fTestClass", "Ljava/lang/Class;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/builders/IgnoredClassRunner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestIgnored", "VLorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpErrorReportingRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/ErrorReportingRunner;", null, "Lorg/junit/runner/Runner;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/ErrorReportingRunner;", null, "Lorg/junit/runner/Runner;", null);
	cv.visitSource("ErrorReportingRunner.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fCauses", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTestClass", "Ljava/lang/Class;", new String[] { "Ljava/lang/Class", "<*>;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/lang/Throwable;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/lang/Throwable;", ")V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Runner;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "fTestClass", "Ljava/lang/Class;", 2, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "getCauses", "Ljava/util/List;Ljava/lang/Throwable;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "fCauses", "Ljava/util/List;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "describeCause", "Lorg/junit/runner/Description;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "fTestClass", "Ljava/lang/Class;", 0, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "initializationError");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getCauses", "Ljava/util/List;Ljava/lang/Throwable;", new String[] { "(", "Ljava/lang/Throwable;", ")", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Ljava/lang/reflect/InvocationTargetException;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Throwable;", "getCause", "Ljava/lang/Throwable;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "getCauses", "Ljava/util/List;Ljava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lorg/junit/runners/model/InitializationError;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/InitializationError;", "getCauses", "Ljava/util/List;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 0, 3, 0, "Lorg/junit/internal/runners/InitializationError;");
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l3, 0, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 3, 0, "Lorg/junit/internal/runners/InitializationError;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/InitializationError;", "getCauses", "Ljava/util/List;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/Throwable;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Arrays;", "asList", "Ljava/util/List;[Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runCause", "VLjava/lang/Throwable;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "describeCause", "Lorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestStarted", "VLorg/junit/runner/Description;", new int[] { 4, 0 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 1, 0, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 4, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;", new int[] { 4, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "fTestClass", "Ljava/lang/Class;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "fCauses", "Ljava/util/List;", 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "describeCause", "Lorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "addChild", "VLorg/junit/runner/Description;", new int[] { 0, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "fCauses", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ErrorReportingRunner;", "runCause", "VLjava/lang/Throwable;Lorg/junit/runner/notification/RunNotifier;", new int[] { 3, 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit38ClassRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", null, "Lorg/junit/runner/Runner;", new String[] { "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", null, "Lorg/junit/runner/Runner;", new String[] { "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" });
	cv.visitSource("JUnit38ClassRunner.java", null);
	cv.visitMemberClass("Lorg/junit/internal/runners/JUnit38ClassRunner$1;", "Lorg/junit/internal/runners/JUnit38ClassRunner;", "1");
	cv.visitMemberClass("Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "Lorg/junit/internal/runners/JUnit38ClassRunner;", "OldTestClassAdaptingListener");
	{
		fv = cv.visitField(ACC_PRIVATE, "fTest", "Ljunit/framework/Test;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "asSubclass", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "<init>", "VLjunit/framework/Test;", new int[] { 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Runner;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "setTest", "VLjunit/framework/Test;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "createSuiteDescription", "Ljava/lang/String;Ljunit/framework/TestSuite;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "countTestCases", "I", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "");
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "TestSuite with %s tests%s");
		mv.visitVarInsn(INSN_CONST_4, 3, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "valueOf", "Ljava/lang/Integer;I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 3, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 1, 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " [example: %s]");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 6, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "testAt", "Ljunit/framework/Test;I", new int[] { 7, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 4, 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getTest", "Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "fTest", "Ljunit/framework/Test;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "makeDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 9, 11, 0, "Ljunit/framework/TestCase;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 9, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 11);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 7, 0, "Ljunit/framework/TestCase;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestCase;", "getName", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 9, 11, 0, "Ljunit/framework/TestSuite;");
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 9, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 8, 11);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 8, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "getName", "Ljava/lang/String;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 9, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "createSuiteDescription", "Ljava/lang/String;Ljunit/framework/TestSuite;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitVarInsn(INSN_CONST_4, 9, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 9, 0, 9, "[Ljava/lang/annotation/Annotation;");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 6, 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "testCount", "I", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "testAt", "Ljunit/framework/Test;I", new int[] { 8, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "makeDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "addChild", "VLorg/junit/runner/Description;", new int[] { 2, 4 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "getName", "Ljava/lang/String;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l2);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 9, 11, 0, "Lorg/junit/runner/Describable;");
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 9, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 11);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Describable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/Describable;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l6);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 9, 11, 0, "Ljunit/extensions/TestDecorator;");
		Label l7 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l7, 9, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 1, 11);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljunit/extensions/TestDecorator;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/extensions/TestDecorator;", "getTest", "Ljunit/framework/Test;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "makeDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "setTest", "VLjunit/framework/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "fTest", "Ljunit/framework/Test;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "createAdaptingListener", "Ljunit/framework/TestListener;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner$OldTestClassAdaptingListener;", "<init>", "VLorg/junit/internal/runners/JUnit38ClassRunner;Lorg/junit/runner/notification/RunNotifier;Lorg/junit/internal/runners/JUnit38ClassRunner$1;", new int[] { 0, 2, 3, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "filter", "VLorg/junit/runner/manipulation/Filter;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 6, 6, 0, "Lorg/junit/runner/manipulation/Filterable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/manipulation/Filterable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/manipulation/Filterable;", "filter", "VLorg/junit/runner/manipulation/Filter;", new int[] { 0, 8 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 6, 6, 0, "Ljunit/framework/TestSuite;");
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "Ljunit/framework/TestSuite;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljunit/framework/TestSuite;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "getName", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestSuite;", "<init>", "VLjava/lang/String;", new int[] { 1, 6 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "testCount", "I", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l3, 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "testAt", "Ljunit/framework/Test;I", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "makeDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 8, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestSuite;", "addTest", "VLjunit/framework/Test;", new int[] { 1, 5 });
		mv.visitLabel(l4);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 2, 2, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "setTest", "VLjunit/framework/Test;", new int[] { 7, 1 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "makeDescription", "Lorg/junit/runner/Description;Ljunit/framework/Test;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljunit/framework/TestResult;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljunit/framework/TestResult;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "createAdaptingListener", "Ljunit/framework/TestListener;Lorg/junit/runner/notification/RunNotifier;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljunit/framework/TestResult;", "addListener", "VLjunit/framework/TestListener;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljunit/framework/Test;", "run", "VLjunit/framework/TestResult;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sort", "VLorg/junit/runner/manipulation/Sorter;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 1, 0, "Lorg/junit/runner/manipulation/Sortable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "getTest", "Ljunit/framework/Test;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/manipulation/Sortable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runner/manipulation/Sortable;", "sort", "VLorg/junit/runner/manipulation/Sorter;", new int[] { 0, 3 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4ClassRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/JUnit4ClassRunner;", null, "Lorg/junit/runner/Runner;", new String[] { "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" });
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/JUnit4ClassRunner;", null, "Lorg/junit/runner/Runner;", new String[] { "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" });
	cv.visitSource("JUnit4ClassRunner.java", null);
	{
	av0 = cv.visitAnnotation("Ljava/lang/Deprecated;", true);
		av0.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fTestClass", "Lorg/junit/internal/runners/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTestMethods", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/internal/runners/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Runner;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/TestClass;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/TestClass;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "getTestMethods", "Ljava/util/List;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestMethods", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "validate", "V", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "testAborted", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;Ljava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestStarted", "VLorg/junit/runner/Description;", new int[] { 2, 3 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runner/notification/Failure;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/notification/Failure;", "<init>", "VLorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 0, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFailure", "VLorg/junit/runner/notification/Failure;", new int[] { 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestFinished", "VLorg/junit/runner/Description;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "classAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "createTest", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "getTestClass", "Lorg/junit/internal/runners/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "filter", "VLorg/junit/runner/manipulation/Filter;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestMethods", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "methodDescription", "Lorg/junit/runner/Description;Ljava/lang/reflect/Method;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "remove", "V", new int[] { 0 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestMethods", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/runner/manipulation/NoTestsRemainException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/NoTestsRemainException;", "<init>", "V", new int[] { 2 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "classAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestMethods", "Ljava/util/List;", 3, 6);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "methodDescription", "Lorg/junit/runner/Description;Ljava/lang/reflect/Method;", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "addChild", "VLorg/junit/runner/Description;", new int[] { 2, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "getTestClass", "Lorg/junit/internal/runners/TestClass;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getTestClass", "Lorg/junit/internal/runners/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getTestMethods", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Ljava/lang/reflect/Method;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getTestMethods", "Ljava/util/List;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "invokeTestMethod", "VLjava/lang/reflect/Method;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "methodDescription", "Lorg/junit/runner/Description;Ljava/lang/reflect/Method;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/reflect/InvocationTargetException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "createTest", "Ljava/lang/Object;", new int[] { 5 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "wrapMethod", "Lorg/junit/internal/runners/TestMethod;Ljava/lang/reflect/Method;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Lorg/junit/internal/runners/MethodRoadie;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodRoadie;", "<init>", "VLjava/lang/Object;Lorg/junit/internal/runners/TestMethod;Lorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 4, 2, 3, 7, 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodRoadie;", "run", "V", new int[] { 4 });
		Label l4 = new Label();
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getCause", "Ljava/lang/Throwable;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "testAborted", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 5, 7, 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "testAborted", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;Ljava/lang/Throwable;", new int[] { 5, 7, 0, 1 });
		mv.visitJumpInsn(INSN_GOTO, l4, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "methodDescription", "Lorg/junit/runner/Description;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "getTestClass", "Lorg/junit/internal/runners/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "testName", "Ljava/lang/String;Ljava/lang/reflect/Method;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "testAnnotations", "[Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Method;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/ClassRoadie;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 1, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$1;", "<init>", "VLorg/junit/internal/runners/JUnit4ClassRunner;Lorg/junit/runner/notification/RunNotifier;", new int[] { 3, 4, 5 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/ClassRoadie;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/internal/runners/TestClass;Lorg/junit/runner/Description;Ljava/lang/Runnable;", new int[] { 0, 5, 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/ClassRoadie;", "runProtected", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runMethods", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestMethods", "Ljava/util/List;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/reflect/Method;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "invokeTestMethod", "VLjava/lang/reflect/Method;Lorg/junit/runner/notification/RunNotifier;", new int[] { 3, 1, 4 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sort", "VLorg/junit/runner/manipulation/Sorter;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestMethods", "Ljava/util/List;", 0, 2);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit4ClassRunner$2;", "<init>", "VLorg/junit/internal/runners/JUnit4ClassRunner;Lorg/junit/runner/manipulation/Sorter;", new int[] { 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "sort", "VLjava/util/List;Ljava/util/Comparator;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "testAnnotations", "[Ljava/lang/annotation/Annotation;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "testName", "Ljava/lang/String;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validate", "V", null, new String[] { "Lorg/junit/internal/runners/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/MethodValidator;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/MethodValidator;", "<init>", "VLorg/junit/internal/runners/TestClass;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodValidator;", "validateMethodsForDefaultRunner", "Ljava/util/List;", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/MethodValidator;", "assertValid", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "wrapMethod", "Lorg/junit/internal/runners/TestMethod;Ljava/lang/reflect/Method;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/TestMethod;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/internal/runners/JUnit4ClassRunner;", "fTestClass", "Lorg/junit/internal/runners/TestClass;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/TestMethod;", "<init>", "VLjava/lang/reflect/Method;Lorg/junit/internal/runners/TestClass;", new int[] { 0, 3, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpErrorCollector(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/ErrorCollector;", null, "Lorg/junit/rules/Verifier;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/ErrorCollector;", null, "Lorg/junit/rules/Verifier;", null);
	cv.visitSource("ErrorCollector.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "errors", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/Verifier;", "<init>", "V", new int[] { 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/ErrorCollector;", "errors", "Ljava/util/List;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "addError", "VLjava/lang/Throwable;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ErrorCollector;", "errors", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "checkSucceeds", "Ljava/lang/Object;Ljava/util/concurrent/Callable;", new String[] { "(", "Ljava/util/concurrent/Callable", "<", "Ljava/lang/Object;", ">;)", "Ljava/lang/Object;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/concurrent/Callable;", "call", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ErrorCollector;", "addError", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "checkThat", "VLjava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(TT;", "Lorg/hamcrest/Matcher", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ErrorCollector;", "checkThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 1, 0, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "checkThat", "VLjava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new String[] { "<T:", "Ljava/lang/Object;", ">(", "Ljava/lang/String;", "TT;", "Lorg/hamcrest/Matcher", "<TT;>;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/ErrorCollector$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ErrorCollector$1;", "<init>", "VLorg/junit/rules/ErrorCollector;Ljava/lang/String;Ljava/lang/Object;Lorg/hamcrest/Matcher;", new int[] { 0, 1, 2, 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/ErrorCollector;", "checkSucceeds", "Ljava/lang/Object;Ljava/util/concurrent/Callable;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "verify", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/ErrorCollector;", "errors", "Ljava/util/List;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/model/MultipleFailureException;", "assertEmpty", "VLjava/util/List;", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTemporaryFolder(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/TemporaryFolder;", null, "Lorg/junit/rules/ExternalResource;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/TemporaryFolder;", null, "Lorg/junit/rules/ExternalResource;", null);
	cv.visitSource("TemporaryFolder.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "folder", "Ljava/io/File;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "parentFolder", "Ljava/io/File;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TemporaryFolder;", "<init>", "VLjava/io/File;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/ExternalResource;", "<init>", "V", new int[] { 0 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "parentFolder", "Ljava/io/File;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "createTemporaryFolderIn", "Ljava/io/File;Ljava/io/File;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 1, "junit");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/io/File;", "createTempFile", "Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/io/File;", new int[] { 1, 2, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "delete", "Z", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "mkdir", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "isLastElementInArray", "ZI[Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitArrayLengthInsn(0, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 0, 0, 0, -1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "recursiveDelete", "VLjava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "listFiles", "[Ljava/io/File;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 2, 0);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitJumpInsn(INSN_IF_GE, l0, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TemporaryFolder;", "recursiveDelete", "VLjava/io/File;", new int[] { 5, 1 });
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "delete", "Z", new int[] { 6 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "after", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "delete", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "before", "V", null, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "create", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "create", "V", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "parentFolder", "Ljava/io/File;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TemporaryFolder;", "createTemporaryFolderIn", "Ljava/io/File;Ljava/io/File;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "folder", "Ljava/io/File;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "delete", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "folder", "Ljava/io/File;", 0, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "folder", "Ljava/io/File;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TemporaryFolder;", "recursiveDelete", "VLjava/io/File;", new int[] { 1, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getRoot", "Ljava/io/File;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "folder", "Ljava/io/File;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/IllegalStateException;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "the temporary folder has not yet been created");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/IllegalStateException;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TemporaryFolder;", "folder", "Ljava/io/File;", 0, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newFile", "Ljava/io/File;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "junit");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "getRoot", "Ljava/io/File;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/io/File;", "createTempFile", "Ljava/io/File;Ljava/lang/String;Ljava/lang/String;Ljava/io/File;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newFile", "Ljava/io/File;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/io/File;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "getRoot", "Ljava/io/File;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/io/File;Ljava/lang/String;", new int[] { 0, 1, 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "createNewFile", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "a file with the name '");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "' already exists in the test folder");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newFolder", "Ljava/io/File;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "getRoot", "Ljava/io/File;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TemporaryFolder;", "createTemporaryFolderIn", "Ljava/io/File;Ljava/io/File;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "newFolder", "Ljava/io/File;Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/String;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 3, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "newFolder", "Ljava/io/File;[Ljava/lang/String;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_TRANSIENT, "newFolder", "Ljava/io/File;[Ljava/lang/String;", null, new String[] { "Ljava/io/IOException;" });
		mv.visitCode();
		mv.visitMaxs(9, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/rules/TemporaryFolder;", "getRoot", "Ljava/io/File;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitArrayLengthInsn(4, 8);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 2, 8, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/io/File;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/File;", "<init>", "VLjava/io/File;Ljava/lang/String;", new int[] { 1, 0, 2 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/io/File;", "mkdir", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TemporaryFolder;", "isLastElementInArray", "ZI[Ljava/lang/String;", new int[] { 7, 3, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 4);
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/io/IOException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 5 });
		mv.visitStringInsn(INSN_CONST_STRING, 6, "a folder with the name '");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitStringInsn(INSN_CONST_STRING, 6, "' already exists");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 5, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/io/IOException;", "<init>", "VLjava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_THROW, 4);
		mv.visitLabel(l2);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTestName(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/rules/TestName;", null, "Lorg/junit/rules/TestWatcher;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/rules/TestName;", null, "Lorg/junit/rules/TestWatcher;", null);
	cv.visitSource("TestName.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/TestWatcher;", "<init>", "V", new int[] { 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getMethodName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/rules/TestName;", "fName", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "starting", "VLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getMethodName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/rules/TestName;", "fName", "Ljava/lang/String;", 0, 1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParentRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/ParentRunner;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lorg/junit/runner/Runner;", "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" }, "Lorg/junit/runner/Runner;", new String[] { "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" });
	cv.visit(0, ACC_PUBLIC + ACC_ABSTRACT, "Lorg/junit/runners/ParentRunner;", new String[] { "<T:", "Ljava/lang/Object;", ">", "Lorg/junit/runner/Runner;", "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" }, "Lorg/junit/runner/Runner;", new String[] { "Lorg/junit/runner/manipulation/Filterable;", "Lorg/junit/runner/manipulation/Sortable;" });
	cv.visitSource("ParentRunner.java", null);
	{
		fv = cv.visitField(ACC_PRIVATE, "fFilteredChildren", "Ljava/util/List;", new String[] { "Ljava/util/List", "<TT;>;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fScheduler", "Lorg/junit/runners/model/RunnerScheduler;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE, "fSorter", "Lorg/junit/runner/manipulation/Sorter;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fTestClass", "Lorg/junit/runners/model/TestClass;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/Runner;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runner/manipulation/Sorter;", "NULL", "Lorg/junit/runner/manipulation/Sorter;", 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fSorter", "Lorg/junit/runner/manipulation/Sorter;", 0, 1);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fFilteredChildren", "Ljava/util/List;", 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/ParentRunner$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner$1;", "<init>", "VLorg/junit/runners/ParentRunner;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fScheduler", "Lorg/junit/runners/model/RunnerScheduler;", 0, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/model/TestClass;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/TestClass;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "validate", "V", new int[] { 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "VLorg/junit/runners/ParentRunner;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "runChildren", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "Lorg/junit/runner/manipulation/Sorter;Lorg/junit/runners/ParentRunner;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fSorter", "Lorg/junit/runner/manipulation/Sorter;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "comparator", "Ljava/util/Comparator;", new String[] { "()", "Ljava/util/Comparator", "<-TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/ParentRunner$4;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner$4;", "<init>", "VLorg/junit/runners/ParentRunner;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getFilteredChildren", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<TT;>;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fFilteredChildren", "Ljava/util/List;", 0, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getChildren", "Ljava/util/List;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "VLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fFilteredChildren", "Ljava/util/List;", 0, 2);
		mv.visitLabel(l0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fFilteredChildren", "Ljava/util/List;", 0, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "runChildren", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "getFilteredChildren", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fScheduler", "Lorg/junit/runners/model/RunnerScheduler;", 2, 4);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/runners/ParentRunner$3;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner$3;", "<init>", "VLorg/junit/runners/ParentRunner;Ljava/lang/Object;Lorg/junit/runner/notification/RunNotifier;", new int[] { 3, 4, 0, 5 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runners/model/RunnerScheduler;", "schedule", "VLjava/lang/Runnable;", new int[] { 2, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fScheduler", "Lorg/junit/runners/model/RunnerScheduler;", 2, 4);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runners/model/RunnerScheduler;", "finished", "V", new int[] { 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "shouldRun", "ZLorg/junit/runner/manipulation/Filter;Ljava/lang/Object;", new String[] { "(", "Lorg/junit/runner/manipulation/Filter;", "TT;)Z" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", new int[] { 1, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "shouldRun", "ZLorg/junit/runner/Description;", new int[] { 2, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "sortChild", "VLjava/lang/Object;", new String[] { "(TT;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fSorter", "Lorg/junit/runner/manipulation/Sorter;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Sorter;", "apply", "VLjava/lang/Object;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validate", "V", null, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "collectInitializationErrors", "VLjava/util/List;", new int[] { 2, 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/util/List;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateClassRules", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "CLASS_RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validate", "VLorg/junit/runners/model/TestClass;Ljava/util/List;", new int[] { 0, 1, 3 });
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "CLASS_RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validate", "VLorg/junit/runners/model/TestClass;Ljava/util/List;", new int[] { 0, 1, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "withClassRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "classRules", "Ljava/util/List;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/rules/RunRules;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/RunRules;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/lang/Iterable;Lorg/junit/runner/Description;", new int[] { 1, 4, 0, 2 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "childrenInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/runners/ParentRunner$2;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner$2;", "<init>", "VLorg/junit/runners/ParentRunner;Lorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "classBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "childrenInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "withBeforeClasses", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "withAfterClasses", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "withClassRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "classRules", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/rules/TestRule;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 1, 5);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/ClassRule;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethodValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 1, 4, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 1, 5);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/ClassRule;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedFieldValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 1, 4, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "collectInitializationErrors", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/BeforeClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "validatePublicVoidNoArgMethods", "VLjava/lang/Class;ZLjava/util/List;", new int[] { 2, 0, 1, 3 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/AfterClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "validatePublicVoidNoArgMethods", "VLjava/lang/Class;ZLjava/util/List;", new int[] { 2, 0, 1, 3 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "validateClassRules", "VLjava/util/List;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", new String[] { "(TT;)", "Lorg/junit/runner/Description;" }, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "filter", "VLorg/junit/runner/manipulation/Filter;", null, new String[] { "Lorg/junit/runner/manipulation/NoTestsRemainException;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "getFilteredChildren", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "shouldRun", "ZLorg/junit/runner/manipulation/Filter;Ljava/lang/Object;", new int[] { 4, 5, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 3, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l3, l4, l5, "Lorg/junit/runner/manipulation/NoTestsRemainException;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/manipulation/Filter;", "apply", "VLjava/lang/Object;", new int[] { 5, 1 });
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "remove", "V", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "remove", "V", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "getFilteredChildren", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l6, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/runner/manipulation/NoTestsRemainException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runner/manipulation/NoTestsRemainException;", "<init>", "V", new int[] { 3 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l6);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "getChildren", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<TT;>;" }, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "getDescription", "Lorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getRunnerAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createSuiteDescription", "Lorg/junit/runner/Description;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "getFilteredChildren", "Ljava/util/List;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", new int[] { 5, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "addChild", "VLorg/junit/runner/Description;", new int[] { 1, 3 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getName", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getRunnerAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_FINAL, "getTestClass", "Lorg/junit/runners/model/TestClass;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "run", "VLorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/internal/runners/model/EachTestNotifier;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 2, 5, 3 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Lorg/junit/runner/notification/StoppedByUserException;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, "Ljava/lang/Throwable;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "classBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 1 });
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fireTestIgnored", "V", new int[] { 2 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitIntInsn(INSN_THROW, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "addFailure", "VLjava/lang/Throwable;", new int[] { 2, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_ABSTRACT, "runChild", "VLjava/lang/Object;Lorg/junit/runner/notification/RunNotifier;", new String[] { "(TT;", "Lorg/junit/runner/notification/RunNotifier;", ")V" }, null);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_FINAL, "runLeaf", "VLorg/junit/runners/model/Statement;Lorg/junit/runner/Description;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/model/EachTestNotifier;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/model/EachTestNotifier;", "<init>", "VLorg/junit/runner/notification/RunNotifier;Lorg/junit/runner/Description;", new int[] { 1, 6, 5 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fireTestStarted", "V", new int[] { 1 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/internal/AssumptionViolatedException;");
		Label l3 = new Label();
		mv.visitTryCatchBlock(l0, l1, l3, "Ljava/lang/Throwable;");
		Label l4 = new Label();
		mv.visitTryCatchBlock(l0, l1, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/Statement;", "evaluate", "V", new int[] { 4 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fireTestFinished", "V", new int[] { 1 });
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l6 = new Label();
		mv.visitLabel(l6);
		Label l7 = new Label();
		mv.visitTryCatchBlock(l6, l7, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "addFailedAssumption", "VLorg/junit/internal/AssumptionViolatedException;", new int[] { 1, 0 });
		mv.visitLabel(l7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fireTestFinished", "V", new int[] { 1 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		Label l8 = new Label();
		mv.visitLabel(l8);
		Label l9 = new Label();
		mv.visitTryCatchBlock(l8, l9, l4, null);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "addFailure", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitLabel(l9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fireTestFinished", "V", new int[] { 1 });
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/model/EachTestNotifier;", "fireTestFinished", "V", new int[] { 1 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "setScheduler", "VLorg/junit/runners/model/RunnerScheduler;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fScheduler", "Lorg/junit/runners/model/RunnerScheduler;", 1, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "sort", "VLorg/junit/runner/manipulation/Sorter;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/ParentRunner;", "fSorter", "Lorg/junit/runner/manipulation/Sorter;", 5, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "getFilteredChildren", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "sortChild", "VLjava/lang/Object;", new int[] { 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "getFilteredChildren", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "comparator", "Ljava/util/Comparator;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "sort", "VLjava/util/List;Ljava/util/Comparator;", new int[] { 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validatePublicVoidNoArgMethods", "VLjava/lang/Class;ZLjava/util/List;", new String[] { "(", "Ljava/lang/Class", "<+", "Ljava/lang/annotation/Annotation;", ">;Z", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/ParentRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 3, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "validatePublicVoidNoArg", "VZLjava/util/List;", new int[] { 0, 6, 7 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "withAfterClasses", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 1, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/AfterClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/statements/RunAfters;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/RunAfters;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/util/List;Ljava/lang/Object;", new int[] { 1, 4, 0, 2 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "withBeforeClasses", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/ParentRunner;", "fTestClass", "Lorg/junit/runners/model/TestClass;", 1, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/BeforeClass;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 4);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/statements/RunBefores;");
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/RunBefores;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/util/List;Ljava/lang/Object;", new int[] { 1, 4, 0, 2 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 4, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSuiteMethod(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/internal/runners/SuiteMethod;", null, "Lorg/junit/internal/runners/JUnit38ClassRunner;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/internal/runners/SuiteMethod;", null, "Lorg/junit/internal/runners/JUnit38ClassRunner;", null);
	cv.visitSource("SuiteMethod.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/internal/runners/SuiteMethod;", "testFromSuiteMethod", "Ljunit/framework/Test;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/JUnit38ClassRunner;", "<init>", "VLjunit/framework/Test;", new int[] { 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "testFromSuiteMethod", "Ljunit/framework/Test;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljunit/framework/Test;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitTryCatchBlock(l0, l1, l1, "Ljava/lang/reflect/InvocationTargetException;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "suite");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getMethod", "Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;", new int[] { 6, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "getModifiers", "I", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 3, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitStringInsn(INSN_CONST_STRING, 5, ".suite() must be static");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/InvocationTargetException;", "getCause", "Ljava/lang/Throwable;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		mv.visitTryCatchBlock(l3, l4, l1, "Ljava/lang/reflect/InvocationTargetException;");
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Method;", "invoke", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljunit/framework/Test;");
		mv.visitLabel(l4);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpBlockJUnit4ClassRunner(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/BlockJUnit4ClassRunner;", new String[] { "Lorg/junit/runners/ParentRunner", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, "Lorg/junit/runners/ParentRunner;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/BlockJUnit4ClassRunner;", new String[] { "Lorg/junit/runners/ParentRunner", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, "Lorg/junit/runners/ParentRunner;", null);
	cv.visitSource("BlockJUnit4ClassRunner.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "expectsException", "ZLorg/junit/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getExpectedException", "Ljava/lang/Class;Lorg/junit/Test;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getExpectedException", "Ljava/lang/Class;Lorg/junit/Test;", new String[] { "(", "Lorg/junit/Test;", ")", "Ljava/lang/Class", "<+", "Ljava/lang/Throwable;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/Test;", "expected", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Test$None;");
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l1, 0, 1);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/Test;", "expected", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getMethodRules", "Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")", "Ljava/util/List", "<", "Lorg/junit/rules/MethodRule;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "rules", "Ljava/util/List;Ljava/lang/Object;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getTimeout", "JLorg/junit/Test;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 3, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_WIDE, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/Test;", "timeout", "J", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "hasOneConstructor", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getConstructors", "[Ljava/lang/reflect/Constructor;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitArrayLengthInsn(1, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NE, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateMethods", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "RULE_METHOD_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validate", "VLorg/junit/runners/model/TestClass;Ljava/util/List;", new int[] { 0, 1, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "withMethodRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/util/List;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMethod;", "Ljava/util/List", "<", "Lorg/junit/rules/TestRule;", ">;", "Ljava/lang/Object;", "Lorg/junit/runners/model/Statement;", ")", "Lorg/junit/runners/model/Statement;" }, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getMethodRules", "Ljava/util/List;Ljava/lang/Object;", new int[] { 3, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/rules/MethodRule;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "contains", "ZLjava/lang/Object;", new int[] { 5, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/rules/MethodRule;", "apply", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", new int[] { 0, 7, 4, 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "withRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestRules", "Ljava/util/List;Ljava/lang/Object;", new int[] { 2, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 5);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "withMethodRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/util/List;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new int[] { 2, 3, 1, 4, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "withTestRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/util/List;Lorg/junit/runners/model/Statement;", new int[] { 2, 3, 1, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "withTestRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/util/List;Lorg/junit/runners/model/Statement;", new String[] { "(", "Lorg/junit/runners/model/FrameworkMethod;", "Ljava/util/List", "<", "Lorg/junit/rules/TestRule;", ">;", "Lorg/junit/runners/model/Statement;", ")", "Lorg/junit/runners/model/Statement;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 5);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/rules/RunRules;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "describeChild", "Lorg/junit/runner/Description;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/rules/RunRules;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/lang/Iterable;Lorg/junit/runner/Description;", new int[] { 0, 5, 4, 1 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 5, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "collectInitializationErrors", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runners/ParentRunner;", "collectInitializationErrors", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateNoNonStaticInnerClass", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateConstructor", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateInstanceMethods", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateFields", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateMethods", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "computeTestMethods", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "createTest", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 1, 0, 1, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "describeChild", "Lorg/junit/runner/Description;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "describeChild", "Lorg/junit/runner/Description;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "testName", "Ljava/lang/String;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getAnnotations", "[Ljava/lang/annotation/Annotation;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runner/Description;", "createTestDescription", "Lorg/junit/runner/Description;Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/annotation/Annotation;", new int[] { 0, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getChildren", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "computeTestMethods", "Ljava/util/List;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getTestRules", "Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")", "Ljava/util/List", "<", "Lorg/junit/rules/TestRule;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Rule;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethodValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 1, 5, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Rule;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/rules/TestRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedFieldValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 1, 5, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/Throwable;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;", "<init>", "VLorg/junit/runners/BlockJUnit4ClassRunner;", new int[] { 3, 4 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner$1;", "run", "Ljava/lang/Object;", new int[] { 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "methodInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", new int[] { 4, 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "possiblyExpectingExceptions", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new int[] { 4, 5, 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "withPotentialTimeout", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new int[] { 4, 5, 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "withBefores", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new int[] { 4, 5, 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "withAfters", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new int[] { 4, 5, 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "withRules", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", new int[] { 4, 5, 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/statements/Fail;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/Fail;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "methodInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/runners/statements/InvokeMethod;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/InvokeMethod;", "<init>", "VLorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", new int[] { 0, 2, 3 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "possiblyExpectingExceptions", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 4, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "expectsException", "ZLorg/junit/Test;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/statements/ExpectException;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getExpectedException", "Ljava/lang/Class;Lorg/junit/Test;", new int[] { 3, 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/ExpectException;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/lang/Class;", new int[] { 1, 6, 2 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 1);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "rules", "Ljava/util/List;Ljava/lang/Object;", new String[] { "(", "Ljava/lang/Object;", ")", "Ljava/util/List", "<", "Lorg/junit/rules/MethodRule;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Rule;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/rules/MethodRule;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedFieldValues", "Ljava/util/List;Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;", new int[] { 0, 4, 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "runChild", "VLjava/lang/Object;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "runChild", "VLorg/junit/runners/model/FrameworkMethod;Lorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runChild", "VLorg/junit/runners/model/FrameworkMethod;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "describeChild", "Lorg/junit/runner/Description;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/Ignore;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/notification/RunNotifier;", "fireTestIgnored", "VLorg/junit/runner/Description;", new int[] { 4, 0 });
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "runLeaf", "VLorg/junit/runners/model/Statement;Lorg/junit/runner/Description;Lorg/junit/runner/notification/RunNotifier;", new int[] { 2, 1, 0, 4 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "testName", "Ljava/lang/String;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateConstructor", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateOnlyOneConstructor", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateZeroArgConstructor", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateFields", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "RULE_VALIDATOR", "Lorg/junit/internal/runners/rules/RuleFieldValidator;", 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/internal/runners/rules/RuleFieldValidator;", "validate", "VLorg/junit/runners/model/TestClass;Ljava/util/List;", new int[] { 0, 1, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateInstanceMethods", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/After;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validatePublicVoidNoArgMethods", "VLjava/lang/Class;ZLjava/util/List;", new int[] { 2, 0, 1, 3 });
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Before;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validatePublicVoidNoArgMethods", "VLjava/lang/Class;ZLjava/util/List;", new int[] { 2, 0, 1, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateTestMethods", "VLjava/util/List;", new int[] { 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "computeTestMethods", "Ljava/util/List;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/Exception;");
		mv.visitStringInsn(INSN_CONST_STRING, 1, "No runnable methods");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 0 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateNoNonStaticInnerClass", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "isANonStaticInnerClass", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 1 });
		mv.visitStringInsn(INSN_CONST_STRING, 2, "The inner class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitStringInsn(INSN_CONST_STRING, 2, " is not static.");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 4, 1 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateOnlyOneConstructor", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "hasOneConstructor", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Test class should have exactly one public constructor");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 1 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateTestMethods", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 0, 0, 0, "Lorg/junit/Test;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validatePublicVoidNoArgMethods", "VLjava/lang/Class;ZLjava/util/List;", new int[] { 2, 0, 1, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateZeroArgConstructor", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "isANonStaticInnerClass", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "hasOneConstructor", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "getParameterTypes", "[Ljava/lang/Class;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitArrayLengthInsn(1, 1);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 0, "Test class should have exactly one public zero-argument constructor");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 1, 0 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 3, 1 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "withAfters", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/After;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/statements/RunAfters;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/RunAfters;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/util/List;Ljava/lang/Object;", new int[] { 1, 6, 0, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "withBefores", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Before;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 1);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 6);
		mv.visitLabel(l0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/internal/runners/statements/RunBefores;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/RunBefores;", "<init>", "VLorg/junit/runners/model/Statement;Ljava/util/List;Ljava/lang/Object;", new int[] { 1, 6, 0, 5 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 6, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "withPotentialTimeout", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;Lorg/junit/runners/model/Statement;", null, null);
		{
			av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
			av0.visitEnd();
		}
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 5, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/Test;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "getTimeout", "JLorg/junit/Test;", new int[] { 4, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_WIDE, 0);
		mv.visitVarInsn(INSN_CONST_WIDE_16, 2, 0);
		mv.visitOperationInsn(INSN_CMP_LONG, 2, 0, 2, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_LEZ, l0, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/internal/runners/statements/FailOnTimeout;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/statements/FailOnTimeout;", "<init>", "VLorg/junit/runners/model/Statement;J", new int[] { 2, 7, 0, 1 });
		mv.visitVarInsn(INSN_MOVE_OBJECT, 7, 2);
		mv.visitLabel(l0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpSuite(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/Suite;", new String[] { "Lorg/junit/runners/ParentRunner", "<", "Lorg/junit/runner/Runner;", ">;" }, "Lorg/junit/runners/ParentRunner;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/Suite;", new String[] { "Lorg/junit/runners/ParentRunner", "<", "Lorg/junit/runner/Runner;", ">;" }, "Lorg/junit/runners/ParentRunner;", null);
	cv.visitSource("Suite.java", null);
	cv.visitMemberClass("Lorg/junit/runners/Suite$SuiteClasses;", "Lorg/junit/runners/Suite;", "SuiteClasses");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fRunners", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Ljava/util/List;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/ParentRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/Suite;", "fRunners", "Ljava/util/List;", 2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Lorg/junit/runners/model/RunnerBuilder;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Lorg/junit/runners/model/RunnerBuilder;", ")V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Suite;", "getAnnotatedClasses", "[Ljava/lang/Class;Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;[Ljava/lang/Class;", new int[] { 1, 3, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;[Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;[", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;");
		mv.visitVarInsn(INSN_CONST_4, 1, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/builders/AllDefaultPossibilitiesBuilder;", "<init>", "VZ", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;[Ljava/lang/Class;", new int[] { 2, 0, 3, 4 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/RunnerBuilder;", "Ljava/lang/Class", "<*>;[", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "runners", "Ljava/util/List;Ljava/lang/Class;[Ljava/lang/Class;", new int[] { 2, 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLjava/lang/Class;Ljava/util/List;", new int[] { 1, 3, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class;", new String[] { "(", "Lorg/junit/runners/model/RunnerBuilder;", "[", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/RunnerBuilder;", "runners", "Ljava/util/List;Ljava/lang/Class;[Ljava/lang/Class;", new int[] { 3, 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLjava/lang/Class;Ljava/util/List;", new int[] { 2, 1, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_STATIC, "emptySuite", "Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/runners/model/InitializationError;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/runners/Suite;");
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Ljava/lang/Class;");
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Class;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLjava/lang/Class;[Ljava/lang/Class;", new int[] { 2, 1, 3 });
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/lang/RuntimeException;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "This shouldn't be possible");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/RuntimeException;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "getAnnotatedClasses", "[Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)[", "Ljava/lang/Class", "<*>;" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/runners/Suite$SuiteClasses;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 6, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/Suite$SuiteClasses;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitStringInsn(INSN_CONST_STRING, 2, "class '%s' must have a SuiteClasses annotation");
		mv.visitVarInsn(INSN_CONST_4, 3, 1);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getName", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 5, 3, 4);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/String;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/lang/String;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runners/Suite$SuiteClasses;", "value", "[Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "describeChild", "Lorg/junit/runner/Description;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runner/Runner;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Suite;", "describeChild", "Lorg/junit/runner/Description;Lorg/junit/runner/Runner;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "describeChild", "Lorg/junit/runner/Description;Lorg/junit/runner/Runner;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getChildren", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Suite;", "fRunners", "Ljava/util/List;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED + ACC_VOLATILE + ACC_SYNTHETIC, "runChild", "VLjava/lang/Object;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runner/Runner;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Suite;", "runChild", "VLorg/junit/runner/Runner;Lorg/junit/runner/notification/RunNotifier;", new int[] { 0, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "runChild", "VLorg/junit/runner/Runner;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Runner;", "run", "VLorg/junit/runner/notification/RunNotifier;", new int[] { 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpCategories(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/categories/Categories;", null, "Lorg/junit/runners/Suite;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/categories/Categories;", null, "Lorg/junit/runners/Suite;", null);
	cv.visitSource("Categories.java", null);
	cv.visitMemberClass("Lorg/junit/experimental/categories/Categories$CategoryFilter;", "Lorg/junit/experimental/categories/Categories;", "CategoryFilter");
	cv.visitMemberClass("Lorg/junit/experimental/categories/Categories$ExcludeCategory;", "Lorg/junit/experimental/categories/Categories;", "ExcludeCategory");
	cv.visitMemberClass("Lorg/junit/experimental/categories/Categories$IncludeCategory;", "Lorg/junit/experimental/categories/Categories;", "IncludeCategory");
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Lorg/junit/runners/model/RunnerBuilder;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Lorg/junit/runners/model/RunnerBuilder;", ")V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLjava/lang/Class;Lorg/junit/runners/model/RunnerBuilder;", new int[] { 4, 5, 6 });
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Lorg/junit/runner/manipulation/NoTestsRemainException;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/categories/Categories$CategoryFilter;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories;", "getIncludedCategory", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories;", "getExcludedCategory", "Ljava/lang/Class;Ljava/lang/Class;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories$CategoryFilter;", "<init>", "VLjava/lang/Class;Ljava/lang/Class;", new int[] { 1, 2, 3 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/categories/Categories;", "filter", "VLorg/junit/runner/manipulation/Filter;", new int[] { 4, 1 });
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/categories/Categories;", "getDescription", "Lorg/junit/runner/Description;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories;", "assertNoCategorizedDescendentsOfUncategorizeableParents", "VLorg/junit/runner/Description;", new int[] { 4, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/lang/Throwable;", new int[] { 1, 0 });
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "assertNoCategorizedDescendentsOfUncategorizeableParents", "VLorg/junit/runner/Description;", null, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/categories/Categories;", "canHaveCategorizedChildren", "ZLorg/junit/runner/Description;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories;", "assertNoDescendantsHaveCategoryAnnotations", "VLorg/junit/runner/Description;", new int[] { 3, 4 });
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories;", "assertNoCategorizedDescendentsOfUncategorizeableParents", "VLorg/junit/runner/Description;", new int[] { 3, 0 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "assertNoDescendantsHaveCategoryAnnotations", "VLorg/junit/runner/Description;", null, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/experimental/categories/Category;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Lorg/junit/runners/model/InitializationError;");
		mv.visitStringInsn(INSN_CONST_STRING, 3, "Category annotations on Parameterized classes are not supported on individual methods.");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/model/InitializationError;", "<init>", "VLjava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_THROW, 2);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/categories/Categories;", "assertNoDescendantsHaveCategoryAnnotations", "VLorg/junit/runner/Description;", new int[] { 4, 0 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE + ACC_STATIC, "canHaveCategorizedChildren", "ZLorg/junit/runner/Description;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getChildren", "Ljava/util/ArrayList;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runner/Description;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runner/Description;", "getTestClass", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		Label l2 = new Label();
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN, 2);
		mv.visitLabel(l1);
		mv.visitVarInsn(INSN_CONST_4, 2, 1);
		mv.visitJumpInsn(INSN_GOTO, l2, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getExcludedCategory", "Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/experimental/categories/Categories$ExcludeCategory;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/experimental/categories/Categories$ExcludeCategory;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/experimental/categories/Categories$ExcludeCategory;", "value", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getIncludedCategory", "Ljava/lang/Class;Ljava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)", "Ljava/lang/Class", "<*>;" }, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/experimental/categories/Categories$IncludeCategory;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/experimental/categories/Categories$IncludeCategory;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/experimental/categories/Categories$IncludeCategory;", "value", "Ljava/lang/Class;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpMaxCore$1$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/max/MaxCore$1$1;", null, "Lorg/junit/runners/Suite;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/max/MaxCore$1$1;", null, "Lorg/junit/runners/Suite;", null);
	cv.visitSource("MaxCore.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/max/MaxCore$1;", "getRunner", "Lorg/junit/runner/Runner;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/max/MaxCore$1;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$1", "Lorg/junit/experimental/max/MaxCore$1;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/max/MaxCore$1;Ljava/lang/Class;Ljava/util/List;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/max/MaxCore$1$1;", "this$1", "Lorg/junit/experimental/max/MaxCore$1;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLjava/lang/Class;Ljava/util/List;", new int[] { 0, 2, 3 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpEnclosed(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/runners/Enclosed;", null, "Lorg/junit/runners/Suite;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/runners/Enclosed;", null, "Lorg/junit/runners/Suite;", null);
	cv.visitSource("Enclosed.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;Lorg/junit/runners/model/RunnerBuilder;", new String[] { "(", "Ljava/lang/Class", "<*>;", "Lorg/junit/runners/model/RunnerBuilder;", ")V" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getClasses", "[Ljava/lang/Class;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class;[Ljava/lang/Class;", new int[] { 1, 3, 2, 0 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTheories$TheoryAnchor$1(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visit(0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visitSource("Theories.java", null);
	cv.visitOuterClass("Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "runWithCompleteAssignment", "VLorg/junit/experimental/theories/internal/Assignments;");
	cv.visitInnerClass(null, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", null, 0);
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/experimental/theories/Theories$TheoryAnchor;Ljava/lang/Class;Lorg/junit/experimental/theories/internal/Assignments;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 1, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "collectInitializationErrors", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "createTest", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", 1, 3);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 2, 3);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "access$000", "ZLorg/junit/experimental/theories/Theories$TheoryAnchor;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/internal/Assignments;", "getConstructorArguments", "[Ljava/lang/Object;Z", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1$1;", "<init>", "VLorg/junit/experimental/theories/Theories$TheoryAnchor$1;Lorg/junit/runners/model/Statement;", new int[] { 1, 2, 0 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "methodInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "this$0", "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", 0, 2);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor$1;", "val$complete", "Lorg/junit/experimental/theories/internal/Assignments;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "access$100", "Lorg/junit/runners/model/Statement;Lorg/junit/experimental/theories/Theories$TheoryAnchor;Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/experimental/theories/internal/Assignments;Ljava/lang/Object;", new int[] { 0, 3, 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpTheories(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/experimental/theories/Theories;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/experimental/theories/Theories;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visitSource("Theories.java", null);
	cv.visitMemberClass("Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "Lorg/junit/experimental/theories/Theories;", "TheoryAnchor");
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "validateDataPointFields", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getDeclaredFields", "[Ljava/lang/reflect/Field;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitVarInsn(INSN_MOVE_OBJECT, 0, 2);
		mv.visitArrayLengthInsn(4, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_GE, l1, 3, 4);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 1, 0, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 5, 0, 0, "Lorg/junit/experimental/theories/DataPoint;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l2, 5, 0);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isStatic", "ZI", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l4, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Error;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "DataPoint field ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " must be static");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Error;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 9, 5 });
		mv.visitLabel(l4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getModifiers", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/reflect/Modifier;", "isPublic", "ZI", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 5);
		mv.visitJumpInsn(INSN_IF_NEZ, l3, 5, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Ljava/lang/Error;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 6 });
		mv.visitStringInsn(INSN_CONST_STRING, 7, "DataPoint field ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitStringInsn(INSN_CONST_STRING, 7, " must be public");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Error;", "<init>", "VLjava/lang/String;", new int[] { 5, 6 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 9, 5 });
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "collectInitializationErrors", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "collectInitializationErrors", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories;", "validateDataPointFields", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "computeTestMethods", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkMethod;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "computeTestMethods", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CONST_CLASS, 3, 0, 0, "Lorg/junit/experimental/theories/Theory;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "removeAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "addAll", "ZLjava/util/Collection;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "methodBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/experimental/theories/Theories$TheoryAnchor;", "<init>", "VLorg/junit/runners/model/FrameworkMethod;Lorg/junit/runners/model/TestClass;", new int[] { 0, 3, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateConstructor", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories;", "validateOnlyOneConstructor", "VLjava/util/List;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateTestMethods", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(6, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/experimental/theories/Theories;", "computeTestMethods", "Ljava/util/List;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 2);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/experimental/theories/Theory;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 0, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 2, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "validatePublicVoid", "VZLjava/util/List;", new int[] { 0, 3, 5 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "validatePublicVoidNoArg", "VZLjava/util/List;", new int[] { 0, 3, 5 });
		mv.visitJumpInsn(INSN_GOTO, l0, 0, 0);
		mv.visitLabel(l1);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpAllTests(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/AllTests;", null, "Lorg/junit/internal/runners/SuiteMethod;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/AllTests;", null, "Lorg/junit/internal/runners/SuiteMethod;", null);
	cv.visitSource("AllTests.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/internal/runners/SuiteMethod;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpJUnit4(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC + ACC_FINAL, "Lorg/junit/runners/JUnit4;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visit(0, ACC_PUBLIC + ACC_FINAL, "Lorg/junit/runners/JUnit4;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visitSource("JUnit4.java", null);
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 1 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterized$TestClassRunnerForParameters(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(0, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visit(0, 0, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", null, "Lorg/junit/runners/BlockJUnit4ClassRunner;", null);
	cv.visitSource("Parameterized.java", null);
	cv.visitInnerClass("Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "Lorg/junit/runners/Parameterized;", "TestClassRunnerForParameters", ACC_PRIVATE);
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fName", "Ljava/lang/String;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "fParameters", "[Ljava/lang/Object;", null, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_FINAL + ACC_SYNTHETIC, "this$0", "Lorg/junit/runners/Parameterized;", null, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_CONSTRUCTOR, "<init>", "VLorg/junit/runners/Parameterized;Ljava/lang/Class;[Ljava/lang/Object;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Class", "<*>;[", "Ljava/lang/Object;", "Ljava/lang/String;", ")V" }, new String[] { "Lorg/junit/runners/model/InitializationError;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "this$0", "Lorg/junit/runners/Parameterized;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "<init>", "VLjava/lang/Class;", new int[] { 0, 2 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 3, 0);
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fName", "Ljava/lang/String;", 4, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "createTestUsingConstructorInjection", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getOnlyConstructor", "Ljava/lang/reflect/Constructor;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 1, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Constructor;", "newInstance", "Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "createTestUsingFieldInjection", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(12, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "this$0", "Lorg/junit/runners/Parameterized;", 8, 11);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Parameterized;", "access$100", "Ljava/util/List;Lorg/junit/runners/Parameterized;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 9, 11);
		mv.visitArrayLengthInsn(9, 9);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQ, l0, 8, 9);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 9, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 9 });
		mv.visitStringInsn(INSN_CONST_STRING, 10, "Wrong number of parameters and @Parameter fields. @Parameter fields counted: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, ", available parameters: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 10, 11);
		mv.visitArrayLengthInsn(10, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, ".");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 8, 9 });
		mv.visitIntInsn(INSN_THROW, 8);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "newInstance", "Ljava/lang/Object;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 8, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 2, 0, "Lorg/junit/runners/model/FrameworkField;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "getField", "Ljava/lang/reflect/Field;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 8, 0, 0, "Lorg/junit/runners/Parameterized$Parameter;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 3, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/Parameterized$Parameter;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runners/Parameterized$Parameter;", "value", "I", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l3 = new Label();
		mv.visitLabel(l3);
		Label l4 = new Label();
		Label l5 = new Label();
		mv.visitTryCatchBlock(l3, l4, l5, "Ljava/lang/IllegalArgumentException;");
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 8, 11);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 8, 8, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "set", "VLjava/lang/Object;Ljava/lang/Object;", new int[] { 3, 7, 8 });
		mv.visitLabel(l4);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l5);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 5);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 8, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 9, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 9 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 11 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, ": Trying to set ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, " with the value ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 10, 11);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 10, 10, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/Object;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, " that is not the right type (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fParameters", "[Ljava/lang/Object;", 10, 11);
		mv.visitArrayOperationInsn(INSN_AGET_OBJECT, 10, 10, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Object;", "getClass", "Ljava/lang/Class;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, " instead of ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getType", "Ljava/lang/Class;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/Class;", "getSimpleName", "Ljava/lang/String;", new int[] { 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 10);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitStringInsn(INSN_CONST_STRING, 10, ").");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 9, 10 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 9 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 9);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;Ljava/lang/Throwable;", new int[] { 8, 9, 5 });
		mv.visitIntInsn(INSN_THROW, 8);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 7);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "classBlock", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;", null, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "childrenInvoker", "Lorg/junit/runners/model/Statement;Lorg/junit/runner/notification/RunNotifier;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC, "createTest", "Ljava/lang/Object;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "this$0", "Lorg/junit/runners/Parameterized;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Parameterized;", "access$000", "ZLorg/junit/runners/Parameterized;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "createTestUsingFieldInjection", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "createTestUsingConstructorInjection", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getName", "Ljava/lang/String;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "fName", "Ljava/lang/String;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getRunnerAnnotations", "[Ljava/lang/annotation/Annotation;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 0, 0, 0, "[Ljava/lang/annotation/Annotation;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "testName", "Ljava/lang/String;Lorg/junit/runners/model/FrameworkMethod;", null, null);
		mv.visitCode();
		mv.visitMaxs(4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 0, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 0 });
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "getName", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateConstructor", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "validateOnlyOneConstructor", "VLjava/util/List;", new int[] { 1, 2 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "this$0", "Lorg/junit/runners/Parameterized;", 0, 1);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Parameterized;", "access$000", "ZLorg/junit/runners/Parameterized;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 0, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "validateZeroArgConstructor", "VLjava/util/List;", new int[] { 1, 2 });
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "validateFields", "VLjava/util/List;", new String[] { "(", "Ljava/util/List", "<", "Ljava/lang/Throwable;", ">;)V" }, null);
		mv.visitCode();
		mv.visitMaxs(11, 0);
		mv.visitMethodInsn(INSN_INVOKE_SUPER, "Lorg/junit/runners/BlockJUnit4ClassRunner;", "validateFields", "VLjava/util/List;", new int[] { 9, 10 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "this$0", "Lorg/junit/runners/Parameterized;", 6, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Parameterized;", "access$000", "ZLorg/junit/runners/Parameterized;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 6, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "this$0", "Lorg/junit/runners/Parameterized;", 6, 9);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Lorg/junit/runners/Parameterized;", "access$100", "Ljava/util/List;Lorg/junit/runners/Parameterized;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 5, 0, 6, "[I");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l2 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l2, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 1, 0, "Lorg/junit/runners/model/FrameworkField;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkField;", "getField", "Ljava/lang/reflect/Field;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_CONST_CLASS, 7, 0, 0, "Lorg/junit/runners/Parameterized$Parameter;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/reflect/Field;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 6, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 6, 0, "Lorg/junit/runners/Parameterized$Parameter;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runners/Parameterized$Parameter;", "value", "I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l3 = new Label();
		mv.visitJumpInsn(INSN_IF_LTZ, l3, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, -1);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_LE, l4, 3, 6);
		mv.visitLabel(l3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "Invalid @Parameter value: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 7, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, ". @Parameter fields counted: ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, ". Please use an index between 0 and ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "size", "I", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 8);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 8, 8, 0, -1);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, ".");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 10, 6 });
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l4);
		mv.visitArrayOperationInsn(INSN_AGET, 6, 5, 3);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 6, 6, 0, 1);
		mv.visitArrayOperationInsn(INSN_APUT, 6, 5, 3);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitLabel(l2);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		Label l5 = new Label();
		mv.visitLabel(l5);
		mv.visitArrayLengthInsn(6, 5);
		mv.visitJumpInsn(INSN_IF_GE, l0, 3, 6);
		mv.visitArrayOperationInsn(INSN_AGET, 4, 5, 3);
		Label l6 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l6, 4, 0);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "@Parameter(");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 7, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, ") is never used.");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 10, 6 });
		Label l7 = new Label();
		mv.visitLabel(l7);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 3, 3, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l5, 0, 0);
		mv.visitLabel(l6);
		mv.visitVarInsn(INSN_CONST_4, 6, 1);
		mv.visitJumpInsn(INSN_IF_LE, l7, 4, 6);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 6, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 7, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 7 });
		mv.visitStringInsn(INSN_CONST_STRING, 8, "@Parameter(");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 7, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, ") is used more than once (");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;I", new int[] { 7, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitStringInsn(INSN_CONST_STRING, 8, ").");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 7, 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 7);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 6, 7 });
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "add", "ZLjava/lang/Object;", new int[] { 10, 6 });
		mv.visitJumpInsn(INSN_GOTO, l7, 0, 0);
		mv.visitLabel(l0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	cv.visitEnd();
}

public static void dumpParameterized(ApplicationWriter aw) {
	ClassVisitor cv;
	FieldVisitor fv;
	MethodVisitor mv;
	AnnotationVisitor av0;

	cv = aw.visitClass(ACC_PUBLIC, "Lorg/junit/runners/Parameterized;", null, "Lorg/junit/runners/Suite;", null);
	cv.visit(0, ACC_PUBLIC, "Lorg/junit/runners/Parameterized;", null, "Lorg/junit/runners/Suite;", null);
	cv.visitSource("Parameterized.java", null);
	cv.visitMemberClass("Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "Lorg/junit/runners/Parameterized;", "TestClassRunnerForParameters");
	cv.visitMemberClass("Lorg/junit/runners/Parameterized$Parameter;", "Lorg/junit/runners/Parameterized;", "Parameter");
	cv.visitMemberClass("Lorg/junit/runners/Parameterized$Parameters;", "Lorg/junit/runners/Parameterized;", "Parameters");
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_STATIC + ACC_FINAL, "NO_RUNNERS", "Ljava/util/List;", new String[] { "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, null);
		fv.visitEnd();
	}
	{
		fv = cv.visitField(ACC_PRIVATE + ACC_FINAL, "runners", "Ljava/util/ArrayList;", new String[] { "Ljava/util/ArrayList", "<", "Lorg/junit/runner/Runner;", ">;" }, null);
		fv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_CONSTRUCTOR, "<clinit>", "V", null, null);
		mv.visitCode();
		mv.visitMaxs(1, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/util/Collections;", "emptyList", "Ljava/util/List;", new int[] {  });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitFieldInsn(INSN_SPUT_OBJECT, "Lorg/junit/runners/Parameterized;", "NO_RUNNERS", "Ljava/util/List;", 0, 0);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PUBLIC + ACC_CONSTRUCTOR, "<init>", "VLjava/lang/Class;", new String[] { "(", "Ljava/lang/Class", "<*>;)V" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitFieldInsn(INSN_SGET_OBJECT, "Lorg/junit/runners/Parameterized;", "NO_RUNNERS", "Ljava/util/List;", 1, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Suite;", "<init>", "VLjava/lang/Class;Ljava/util/List;", new int[] { 3, 4, 1 });
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 1, 0, 0, "Ljava/util/ArrayList;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/util/ArrayList;", "<init>", "V", new int[] { 1 });
		mv.visitFieldInsn(INSN_IPUT_OBJECT, "Lorg/junit/runners/Parameterized;", "runners", "Ljava/util/ArrayList;", 1, 3);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "getParametersMethod", "Lorg/junit/runners/model/FrameworkMethod;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_CONST_CLASS, 2, 0, 0, "Lorg/junit/runners/Parameterized$Parameters;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getAnnotation", "Ljava/lang/annotation/Annotation;Ljava/lang/Class;", new int[] { 1, 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/Parameterized$Parameters;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "allParameters", "Ljava/lang/Iterable;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Lorg/junit/runners/Parameterized$Parameters;", "name", "Ljava/lang/String;", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "createRunnersForParameters", "VLjava/lang/Iterable;Ljava/lang/String;", new int[] { 3, 1, 2 });
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "ZLorg/junit/runners/Parameterized;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "fieldsAreAnnotated", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "Ljava/util/List;Lorg/junit/runners/Parameterized;", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "getAnnotatedFieldsByParameter", "Ljava/util/List;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "allParameters", "Ljava/lang/Iterable;", new String[] { "()", "Ljava/lang/Iterable", "<[", "Ljava/lang/Object;", ">;" }, new String[] { "Ljava/lang/Throwable;" });
		mv.visitCode();
		mv.visitMaxs(5, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "getParametersMethod", "Lorg/junit/runners/model/FrameworkMethod;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitVarInsn(INSN_CONST_4, 2, 0);
		mv.visitVarInsn(INSN_CONST_4, 3, 0);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 3, 0, 3, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "invokeExplosively", "Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;", new int[] { 1, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_INSTANCE_OF, 1, 0, 0, "Ljava/lang/Iterable;");
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 1, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Ljava/lang/Iterable;");
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "parametersMethodReturnedWrongType", "Ljava/lang/Exception;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitIntInsn(INSN_THROW, 1);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "createRunnersForParameters", "VLjava/lang/Iterable;Ljava/lang/String;", new String[] { "(", "Ljava/lang/Iterable", "<[", "Ljava/lang/Object;", ">;", "Ljava/lang/String;", ")V" }, new String[] { "Lorg/junit/runners/model/InitializationError;", "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(10, 0);
		mv.visitVarInsn(INSN_CONST_4, 1, 0);
		Label l0 = new Label();
		mv.visitLabel(l0);
		Label l1 = new Label();
		Label l2 = new Label();
		mv.visitTryCatchBlock(l0, l1, l2, "Ljava/lang/ClassCastException;");
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/lang/Iterable;", "iterator", "Ljava/util/Iterator;", new int[] { 8 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		Label l3 = new Label();
		mv.visitLabel(l3);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 6);
		Label l4 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l4, 6, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 4, 0, "[Ljava/lang/Object;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "nameFor", "Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/Object;", new int[] { 7, 9, 1, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 5, 0, 0, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getJavaClass", "Ljava/lang/Class;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized$TestClassRunnerForParameters;", "<init>", "VLorg/junit/runners/Parameterized;Ljava/lang/Class;[Ljava/lang/Object;Ljava/lang/String;", new int[] { 5, 7, 6, 4, 3 });
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized;", "runners", "Ljava/util/ArrayList;", 6, 7);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/util/ArrayList;", "add", "ZLjava/lang/Object;", new int[] { 6, 5 });
		mv.visitLabel(l1);
		mv.visitOperationInsn(INSN_ADD_INT_LIT8, 1, 1, 0, 1);
		mv.visitJumpInsn(INSN_GOTO, l3, 0, 0);
		mv.visitLabel(l2);
		mv.visitIntInsn(INSN_MOVE_EXCEPTION, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "parametersMethodReturnedWrongType", "Ljava/lang/Exception;", new int[] { 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 6);
		mv.visitIntInsn(INSN_THROW, 6);
		mv.visitLabel(l4);
		mv.visitInsn(INSN_RETURN_VOID);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "fieldsAreAnnotated", "Z", null, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "getAnnotatedFieldsByParameter", "Ljava/util/List;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "isEmpty", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 0);
		Label l0 = new Label();
		mv.visitJumpInsn(INSN_IF_NEZ, l0, 0, 0);
		mv.visitVarInsn(INSN_CONST_4, 0, 1);
		Label l1 = new Label();
		mv.visitLabel(l1);
		mv.visitIntInsn(INSN_RETURN, 0);
		mv.visitLabel(l0);
		mv.visitVarInsn(INSN_CONST_4, 0, 0);
		mv.visitJumpInsn(INSN_GOTO, l1, 0, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getAnnotatedFieldsByParameter", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runners/model/FrameworkField;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CONST_CLASS, 1, 0, 0, "Lorg/junit/runners/Parameterized$Parameter;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedFields", "Ljava/util/List;Ljava/lang/Class;", new int[] { 0, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "getParametersMethod", "Lorg/junit/runners/model/FrameworkMethod;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitTypeInsn(INSN_CONST_CLASS, 4, 0, 0, "Lorg/junit/runners/Parameterized$Parameters;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getAnnotatedMethods", "Ljava/util/List;Ljava/lang/Class;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/List;", "iterator", "Ljava/util/Iterator;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		Label l0 = new Label();
		mv.visitLabel(l0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "hasNext", "Z", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		Label l1 = new Label();
		mv.visitJumpInsn(INSN_IF_EQZ, l1, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_INTERFACE, "Ljava/util/Iterator;", "next", "Ljava/lang/Object;", new int[] { 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitTypeInsn(INSN_CHECK_CAST, 0, 0, 0, "Lorg/junit/runners/model/FrameworkMethod;");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "isStatic", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "isPublic", "Z", new int[] { 0 });
		mv.visitIntInsn(INSN_MOVE_RESULT, 3);
		mv.visitJumpInsn(INSN_IF_EQZ, l0, 3, 0);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitLabel(l1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/Exception;");
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 4, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 4 });
		mv.visitStringInsn(INSN_CONST_STRING, 5, "No public static parameters method on class ");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getName", "Ljava/lang/String;", new int[] { 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 5);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 4, 5 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 4);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_THROW, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "nameFor", "Ljava/lang/String;Ljava/lang/String;I[Ljava/lang/Object;", null, null);
		mv.visitCode();
		mv.visitMaxs(8, 0);
		mv.visitStringInsn(INSN_CONST_STRING, 2, "\\{index\\}");
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/lang/Integer;", "toString", "Ljava/lang/String;I", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/String;", "replaceAll", "Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;", new int[] { 5, 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/MessageFormat;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 0, 7 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 2, 0, 0, "Ljava/lang/StringBuilder;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/StringBuilder;", "<init>", "V", new int[] { 2 });
		mv.visitStringInsn(INSN_CONST_STRING, 3, "[");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 1 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "]");
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "append", "Ljava/lang/StringBuilder;Ljava/lang/String;", new int[] { 2, 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Ljava/lang/StringBuilder;", "toString", "Ljava/lang/String;", new int[] { 2 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 2);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PRIVATE, "parametersMethodReturnedWrongType", "Ljava/lang/Exception;", null, new String[] { "Ljava/lang/Exception;" });
		mv.visitCode();
		mv.visitMaxs(7, 0);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/Parameterized;", "getTestClass", "Lorg/junit/runners/model/TestClass;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/TestClass;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 0);
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Lorg/junit/runners/Parameterized;", "getParametersMethod", "Lorg/junit/runners/model/FrameworkMethod;", new int[] { 6 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 3);
		mv.visitMethodInsn(INSN_INVOKE_VIRTUAL, "Lorg/junit/runners/model/FrameworkMethod;", "getName", "Ljava/lang/String;", new int[] { 3 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 2);
		mv.visitStringInsn(INSN_CONST_STRING, 3, "{0}.{1}() must return an Iterable of arrays.");
		mv.visitVarInsn(INSN_CONST_4, 4, 2);
		mv.visitTypeInsn(INSN_NEW_ARRAY, 4, 0, 4, "[Ljava/lang/Object;");
		mv.visitVarInsn(INSN_CONST_4, 5, 0);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 0, 4, 5);
		mv.visitVarInsn(INSN_CONST_4, 5, 1);
		mv.visitArrayOperationInsn(INSN_APUT_OBJECT, 2, 4, 5);
		mv.visitMethodInsn(INSN_INVOKE_STATIC, "Ljava/text/MessageFormat;", "format", "Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;", new int[] { 3, 4 });
		mv.visitIntInsn(INSN_MOVE_RESULT_OBJECT, 1);
		mv.visitTypeInsn(INSN_NEW_INSTANCE, 3, 0, 0, "Ljava/lang/Exception;");
		mv.visitMethodInsn(INSN_INVOKE_DIRECT, "Ljava/lang/Exception;", "<init>", "VLjava/lang/String;", new int[] { 3, 1 });
		mv.visitIntInsn(INSN_RETURN_OBJECT, 3);
		mv.visitEnd();
	}
	{
		mv = cv.visitMethod(ACC_PROTECTED, "getChildren", "Ljava/util/List;", new String[] { "()", "Ljava/util/List", "<", "Lorg/junit/runner/Runner;", ">;" }, null);
		mv.visitCode();
		mv.visitMaxs(2, 0);
		mv.visitFieldInsn(INSN_IGET_OBJECT, "Lorg/junit/runners/Parameterized;", "runners", "Ljava/util/ArrayList;", 0, 1);
		mv.visitIntInsn(INSN_RETURN_OBJECT, 0);
		mv.visitEnd();
	}
	cv.visitEnd();
}

}

